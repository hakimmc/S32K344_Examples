
Marking local functions: FlexCAN_CanBitSampling/35 FlexCAN_SetEdgeFilter/34 FlexCAN_SetBusOffAutorecovery/33 FlexCAN_SetRemoteReqStore/32 FlexCAN_SetProtocolException/31 FlexCAN_SetEntireFrameArbitrationFieldComparison/30 FlexCAN_SetIsoCan/29 FlexCAN_IsFDEnabled/26 FlexCAN_SetSelfReception/25


Marking externally visible functions: FlexCAN_ResetImaskBuff/83 FlexCAN_ConfigCtrlOptions/82 FlexCAN_SetEnhancedRxFifoFilter/81 FlexCAN_EnableEnhancedRxFifo/80 FlexCAN_IsEnhancedRxFifoAvailable/79 FlexCAN_IsMbOutOfRange/78 FlexCAN_ReadEnhancedRxFifo/77 FlexCAN_ReadRxFifo/76 FlexCAN_SetRxFifoFilter/75 FlexCAN_SetOperationMode/74 FlexCAN_SetMaxMsgBuffNum/73 FlexCAN_SetTxMsgBuff/72 FlexCAN_GetMsgBuff/71 FlexCAN_GetMsgBuffTimestamp/70 FlexCAN_SetRxMsgBuff/69 FlexCAN_EnableInterrupts/68 FlexCAN_DisableInterrupts/67 FLEXCAN_ClearMsgBuffIntCmd/66 FlexCAN_SetMsgBuffIntCmd/65 FlexCAN_LockRxMsgBuff/64 FlexCAN_GetMbPayloadSize/63 FlexCAN_SetPayloadSize/61 FlexCAN_EnableRxFifo/60 FlexCAN_Init/59 FlexCAN_SetErrIntCmd/58 FlexCAN_Disable/57 FlexCAN_ExitFreezeMode/56 FlexCAN_Enable/55 FlexCAN_EnterFreezeMode/54 FlexCAN_GetMaxMbNum/53 FlexCAN_GetMsgBuffRegion/52 FlexCAN_ComputePayloadSize/51


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

FlexcanBase.0/106 (FlexcanBase) @07048438
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: FlexCAN_IsEnhancedRxFifoAvailable/79 (read) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/105 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13) @0702e540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_SetRxFifoFilter/75 FlexCAN_SetRxFifoFilter/75 FlexCAN_SetRxFifoFilter/75 FlexCAN_SetRxFifoFilter/75 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/104 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13) @0702e460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_SetRxFifoFilter/75 FlexCAN_SetRxFifoFilter/75 FlexCAN_SetRxFifoFilter/75 FlexCAN_SetRxFifoFilter/75 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11/103 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11) @070117e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FLEXCAN_ClearMsgBuffIntCmd/66 FLEXCAN_ClearMsgBuffIntCmd/66 FLEXCAN_ClearMsgBuffIntCmd/66 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11/102 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11) @07011700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FLEXCAN_ClearMsgBuffIntCmd/66 FLEXCAN_ClearMsgBuffIntCmd/66 FLEXCAN_ClearMsgBuffIntCmd/66 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/101 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18) @07011460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_SetMsgBuffIntCmd/65 FlexCAN_SetMsgBuffIntCmd/65 FlexCAN_SetMsgBuffIntCmd/65 FlexCAN_SetMsgBuffIntCmd/65 FlexCAN_SetMsgBuffIntCmd/65 FlexCAN_SetMsgBuffIntCmd/65 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/100 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18) @07011380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_SetMsgBuffIntCmd/65 FlexCAN_SetMsgBuffIntCmd/65 FlexCAN_SetMsgBuffIntCmd/65 FlexCAN_SetMsgBuffIntCmd/65 FlexCAN_SetMsgBuffIntCmd/65 FlexCAN_SetMsgBuffIntCmd/65 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_06/99 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_06) @07000a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_SetErrIntCmd/58 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_06/98 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_06) @070009a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_SetErrIntCmd/58 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_05/97 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_05) @070007e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Disable/57 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_05/96 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_05) @07000700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Disable/57 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_04/95 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_04) @07000540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_ExitFreezeMode/56 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_04/94 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_04) @07000460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_ExitFreezeMode/56 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_03/93 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_03) @070002a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Enable/55 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_03/92 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_03) @070001c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Enable/55 
  Calls: 
OsIf_GetElapsed/91 (OsIf_GetElapsed) @07000000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Init/59 FlexCAN_Disable/57 FlexCAN_ExitFreezeMode/56 FlexCAN_Enable/55 FlexCAN_EnterFreezeMode/54 
  Calls: 
OsIf_GetCounter/90 (OsIf_GetCounter) @06f78380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Init/59 FlexCAN_Disable/57 FlexCAN_ExitFreezeMode/56 FlexCAN_Enable/55 FlexCAN_EnterFreezeMode/54 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_02/89 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_02) @06f780e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_EnterFreezeMode/54 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_02/88 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_02) @06f78ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_EnterFreezeMode/54 
  Calls: 
OsIf_MicrosToTicks/87 (OsIf_MicrosToTicks) @06f78e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Init/59 FlexCAN_Disable/57 FlexCAN_ExitFreezeMode/56 FlexCAN_Enable/55 FlexCAN_EnterFreezeMode/54 
  Calls: 
maxMbNum.1/86 (maxMbNum) @06f7fe58
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: FlexCAN_GetMaxMbNum/53 (read) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
flexcanBase.2/85 (flexcanBase) @06f7fe10
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: FlexCAN_GetMaxMbNum/53 (read) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
payload_code.3/84 (payload_code) @06ed9e10
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: FlexCAN_ComputeDLCValue/49 (read) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
FlexCAN_ResetImaskBuff/83 (FlexCAN_ResetImaskBuff) @06f78540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: FlexCAN_Ip_au32ImaskBuff/48 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FlexCAN_ConfigCtrlOptions/82 (FlexCAN_ConfigCtrlOptions) @06f782a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_SetEdgeFilter/34 FlexCAN_SetEdgeFilter/34 FlexCAN_SetRemoteReqStore/32 FlexCAN_SetRemoteReqStore/32 FlexCAN_SetBusOffAutorecovery/33 FlexCAN_SetBusOffAutorecovery/33 FlexCAN_CanBitSampling/35 FlexCAN_CanBitSampling/35 FlexCAN_SetProtocolException/31 FlexCAN_SetProtocolException/31 FlexCAN_SetEntireFrameArbitrationFieldComparison/30 FlexCAN_SetEntireFrameArbitrationFieldComparison/30 FlexCAN_SetIsoCan/29 FlexCAN_SetIsoCan/29 
FlexCAN_SetEnhancedRxFifoFilter/81 (FlexCAN_SetEnhancedRxFifoFilter) @06f78000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FlexCAN_EnableEnhancedRxFifo/80 (FlexCAN_EnableEnhancedRxFifo) @06edaa80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_IsEnhancedRxFifoAvailable/79 
FlexCAN_IsEnhancedRxFifoAvailable/79 (FlexCAN_IsEnhancedRxFifoAvailable) @06edaee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: FlexcanBase.0/106 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_EnableEnhancedRxFifo/80 
  Calls: 
FlexCAN_IsMbOutOfRange/78 (FlexCAN_IsMbOutOfRange) @06edac40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FlexCAN_ReadEnhancedRxFifo/77 (FlexCAN_ReadEnhancedRxFifo) @06eda9a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ComputePayloadSize/51 
FlexCAN_ReadRxFifo/76 (FlexCAN_ReadRxFifo) @06eda620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ComputePayloadSize/51 
FlexCAN_SetRxFifoFilter/75 (FlexCAN_SetRxFifoFilter) @06eda2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/105 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/104 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/105 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/104 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/105 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/104 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/105 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/104 
FlexCAN_SetOperationMode/74 (FlexCAN_SetOperationMode) @06eda000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_SetSelfReception/25 
FlexCAN_SetMaxMsgBuffNum/73 (FlexCAN_SetMaxMsgBuffNum) @06ec9c40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetMbPayloadSize/63 FlexCAN_GetMsgBuffRegion/52 FlexCAN_GetMaxMbNum/53 FlexCAN_GetMaxMbNum/53 FlexCAN_GetMsgBuffRegion/52 FlexCAN_GetMbPayloadSize/63 
FlexCAN_SetTxMsgBuff/72 (FlexCAN_SetTxMsgBuff) @06ec99a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ComputePayloadSize/51 FlexCAN_ComputeDLCValue/49 
FlexCAN_GetMsgBuff/71 (FlexCAN_GetMsgBuff) @06ec9460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetMbPayloadSize/63 FlexCAN_GetMbPayloadSize/63 FlexCAN_ComputePayloadSize/51 FlexCAN_GetMsgBuffRegion/52 
FlexCAN_GetMsgBuffTimestamp/70 (FlexCAN_GetMsgBuffTimestamp) @06ec9000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetMsgBuffRegion/52 
FlexCAN_SetRxMsgBuff/69 (FlexCAN_SetRxMsgBuff) @06ebcb60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetMsgBuffRegion/52 
FlexCAN_EnableInterrupts/68 (FlexCAN_EnableInterrupts) @06ebc620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: FlexCAN_Ip_au32ImaskBuff/48 (read) FlexCAN_Ip_au32ImaskBuff/48 (read) FlexCAN_Ip_au32ImaskBuff/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetMaxMbNum/53 
FlexCAN_DisableInterrupts/67 (FlexCAN_DisableInterrupts) @06ebc0e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetMaxMbNum/53 
FLEXCAN_ClearMsgBuffIntCmd/66 (FLEXCAN_ClearMsgBuffIntCmd) @06ebcd20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: FlexCAN_Ip_au32ImaskBuff/48 (write) FlexCAN_Ip_au32ImaskBuff/48 (read) FlexCAN_Ip_au32ImaskBuff/48 (write) FlexCAN_Ip_au32ImaskBuff/48 (read) FlexCAN_Ip_au32ImaskBuff/48 (write) FlexCAN_Ip_au32ImaskBuff/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11/103 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11/102 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11/103 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11/102 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11/103 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11/102 
FlexCAN_SetMsgBuffIntCmd/65 (FlexCAN_SetMsgBuffIntCmd) @06ebca80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: FlexCAN_Ip_au32ImaskBuff/48 (read) FlexCAN_Ip_au32ImaskBuff/48 (write) FlexCAN_Ip_au32ImaskBuff/48 (read) FlexCAN_Ip_au32ImaskBuff/48 (read) FlexCAN_Ip_au32ImaskBuff/48 (write) FlexCAN_Ip_au32ImaskBuff/48 (read) FlexCAN_Ip_au32ImaskBuff/48 (read) FlexCAN_Ip_au32ImaskBuff/48 (write) FlexCAN_Ip_au32ImaskBuff/48 (read) FlexCAN_Ip_au32ImaskBuff/48 (read) FlexCAN_Ip_au32ImaskBuff/48 (write) FlexCAN_Ip_au32ImaskBuff/48 (read) FlexCAN_Ip_au32ImaskBuff/48 (read) FlexCAN_Ip_au32ImaskBuff/48 (write) FlexCAN_Ip_au32ImaskBuff/48 (read) FlexCAN_Ip_au32ImaskBuff/48 (read) FlexCAN_Ip_au32ImaskBuff/48 (write) FlexCAN_Ip_au32ImaskBuff/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/101 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/100 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/101 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/100 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/101 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/100 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/101 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/100 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/101 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/100 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/101 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/100 
FlexCAN_LockRxMsgBuff/64 (FlexCAN_LockRxMsgBuff) @06ebc7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetMsgBuffRegion/52 
FlexCAN_GetMbPayloadSize/63 (FlexCAN_GetMbPayloadSize) @06ebc540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_SetMaxMsgBuffNum/73 FlexCAN_SetMaxMsgBuffNum/73 FlexCAN_GetMsgBuff/71 FlexCAN_GetMsgBuff/71 
  Calls: FlexCAN_GetPayloadSize/62 
FlexCAN_GetPayloadSize/62 (FlexCAN_GetPayloadSize) @06ebc2a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_GetMbPayloadSize/63 FlexCAN_GetMsgBuffRegion/52 
  Calls: 
FlexCAN_SetPayloadSize/61 (FlexCAN_SetPayloadSize) @06ebc000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_IsFDEnabled/26 
FlexCAN_EnableRxFifo/60 (FlexCAN_EnableRxFifo) @06eb4a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetMaxMbNum/53 
FlexCAN_Init/59 (FlexCAN_Init) @06eb4e00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetMaxMbNum/53 FlexCAN_GetMaxMbNum/53 FlexCAN_ClearRAM/50 OsIf_GetElapsed/91 OsIf_GetCounter/90 OsIf_MicrosToTicks/87 
FlexCAN_SetErrIntCmd/58 (FlexCAN_SetErrIntCmd) @06eb49a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Can_CAN_EXCLUSIVE_AREA_06/99 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_06/98 
FlexCAN_Disable/57 (FlexCAN_Disable) @06eb4380
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: OsIf_GetElapsed/91 OsIf_GetCounter/90 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_05/97 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_05/96 OsIf_MicrosToTicks/87 
FlexCAN_ExitFreezeMode/56 (FlexCAN_ExitFreezeMode) @06eb4000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: OsIf_GetElapsed/91 OsIf_GetCounter/90 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_04/95 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_04/94 OsIf_MicrosToTicks/87 
FlexCAN_Enable/55 (FlexCAN_Enable) @05b5a540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: OsIf_GetElapsed/91 OsIf_GetCounter/90 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_03/93 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_03/92 OsIf_MicrosToTicks/87 
FlexCAN_EnterFreezeMode/54 (FlexCAN_EnterFreezeMode) @05b5ae00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: OsIf_GetElapsed/91 OsIf_GetCounter/90 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_02/89 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_02/88 OsIf_MicrosToTicks/87 
FlexCAN_GetMaxMbNum/53 (FlexCAN_GetMaxMbNum) @05b5a9a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: flexcanBase.2/85 (read) maxMbNum.1/86 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_SetMaxMsgBuffNum/73 FlexCAN_SetMaxMsgBuffNum/73 FlexCAN_EnableInterrupts/68 FlexCAN_DisableInterrupts/67 FlexCAN_EnableRxFifo/60 FlexCAN_Init/59 FlexCAN_Init/59 FlexCAN_ClearRAM/50 FlexCAN_ClearRAM/50 
  Calls: 
FlexCAN_GetMsgBuffRegion/52 (FlexCAN_GetMsgBuffRegion) @05b5a700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_SetMaxMsgBuffNum/73 FlexCAN_SetMaxMsgBuffNum/73 FlexCAN_GetMsgBuff/71 FlexCAN_GetMsgBuffTimestamp/70 FlexCAN_SetRxMsgBuff/69 FlexCAN_LockRxMsgBuff/64 
  Calls: FlexCAN_GetPayloadSize/62 
FlexCAN_ComputePayloadSize/51 (FlexCAN_ComputePayloadSize) @05b5a460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_ReadEnhancedRxFifo/77 FlexCAN_ReadRxFifo/76 FlexCAN_SetTxMsgBuff/72 FlexCAN_GetMsgBuff/71 
  Calls: 
FlexCAN_ClearRAM/50 (FlexCAN_ClearRAM) @05b5a1c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Init/59 
  Calls: FlexCAN_GetMaxMbNum/53 FlexCAN_GetMaxMbNum/53 
FlexCAN_ComputeDLCValue/49 (FlexCAN_ComputeDLCValue) @06fa4d20
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: payload_code.3/84 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_SetTxMsgBuff/72 
  Calls: 
FlexCAN_Ip_au32ImaskBuff/48 (FlexCAN_Ip_au32ImaskBuff) @06fa61b0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: FlexCAN_SetMsgBuffIntCmd/65 (read) FlexCAN_SetMsgBuffIntCmd/65 (write) FlexCAN_SetMsgBuffIntCmd/65 (read) FlexCAN_SetMsgBuffIntCmd/65 (read) FlexCAN_SetMsgBuffIntCmd/65 (write) FlexCAN_SetMsgBuffIntCmd/65 (read) FlexCAN_SetMsgBuffIntCmd/65 (read) FlexCAN_SetMsgBuffIntCmd/65 (write) FlexCAN_SetMsgBuffIntCmd/65 (read) FlexCAN_SetMsgBuffIntCmd/65 (read) FlexCAN_SetMsgBuffIntCmd/65 (write) FlexCAN_SetMsgBuffIntCmd/65 (read) FlexCAN_SetMsgBuffIntCmd/65 (read) FlexCAN_SetMsgBuffIntCmd/65 (write) FlexCAN_SetMsgBuffIntCmd/65 (read) FlexCAN_SetMsgBuffIntCmd/65 (read) FlexCAN_SetMsgBuffIntCmd/65 (write) FlexCAN_SetMsgBuffIntCmd/65 (read) FLEXCAN_ClearMsgBuffIntCmd/66 (write) FLEXCAN_ClearMsgBuffIntCmd/66 (read) FLEXCAN_ClearMsgBuffIntCmd/66 (write) FLEXCAN_ClearMsgBuffIntCmd/66 (read) FLEXCAN_ClearMsgBuffIntCmd/66 (write) FLEXCAN_ClearMsgBuffIntCmd/66 (read) FlexCAN_EnableInterrupts/68 (read) FlexCAN_EnableInterrupts/68 (read) FlexCAN_EnableInterrupts/68 (read) FlexCAN_ResetImaskBuff/83 (write) 
  Availability: available
  Varpool flags:
FlexCAN_CanBitSampling/35 (FlexCAN_CanBitSampling) @06e95a80
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_ConfigCtrlOptions/82 FlexCAN_ConfigCtrlOptions/82 
  Calls: 
FlexCAN_SetEdgeFilter/34 (FlexCAN_SetEdgeFilter) @06e95700
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_ConfigCtrlOptions/82 FlexCAN_ConfigCtrlOptions/82 
  Calls: 
FlexCAN_SetBusOffAutorecovery/33 (FlexCAN_SetBusOffAutorecovery) @06e95380
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_ConfigCtrlOptions/82 FlexCAN_ConfigCtrlOptions/82 
  Calls: 
FlexCAN_SetRemoteReqStore/32 (FlexCAN_SetRemoteReqStore) @06e95000
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_ConfigCtrlOptions/82 FlexCAN_ConfigCtrlOptions/82 
  Calls: 
FlexCAN_SetProtocolException/31 (FlexCAN_SetProtocolException) @06e91c40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_ConfigCtrlOptions/82 FlexCAN_ConfigCtrlOptions/82 
  Calls: 
FlexCAN_SetEntireFrameArbitrationFieldComparison/30 (FlexCAN_SetEntireFrameArbitrationFieldComparison) @06e918c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_ConfigCtrlOptions/82 FlexCAN_ConfigCtrlOptions/82 
  Calls: 
FlexCAN_SetIsoCan/29 (FlexCAN_SetIsoCan) @06e91540
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_ConfigCtrlOptions/82 FlexCAN_ConfigCtrlOptions/82 
  Calls: 
FlexCAN_IsFDEnabled/26 (FlexCAN_IsFDEnabled) @06e8da80
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_SetPayloadSize/61 
  Calls: 
FlexCAN_SetSelfReception/25 (FlexCAN_SetSelfReception) @06e8d7e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_SetOperationMode/74 
  Calls: 
FlexCAN_ResetImaskBuff (uint8 Instance)
{
  uint8 ImaskCnt;

  <bb 2> :
  ImaskCnt = 0;
  ImaskCnt = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = (int) Instance;
  _2 = (int) ImaskCnt;
  FlexCAN_Ip_au32ImaskBuff[_1][_2] = 0;
  ImaskCnt.22_3 = ImaskCnt;
  ImaskCnt = ImaskCnt.22_3 + 1;

  <bb 4> :
  if (ImaskCnt <= 2)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


FlexCAN_ConfigCtrlOptions (struct FLEXCAN_Type * pBase, uint32 u32Options)
{
  <bb 2> :
  _1 = u32Options & 32;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  FlexCAN_SetIsoCan (pBase, 1);
  goto <bb 5>; [INV]

  <bb 4> :
  FlexCAN_SetIsoCan (pBase, 0);

  <bb 5> :
  _2 = u32Options & 64;
  if (_2 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  FlexCAN_SetEntireFrameArbitrationFieldComparison (pBase, 1);
  goto <bb 8>; [INV]

  <bb 7> :
  FlexCAN_SetEntireFrameArbitrationFieldComparison (pBase, 0);

  <bb 8> :
  _3 = u32Options & 8;
  if (_3 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  FlexCAN_SetProtocolException (pBase, 1);
  goto <bb 11>; [INV]

  <bb 10> :
  FlexCAN_SetProtocolException (pBase, 0);

  <bb 11> :
  _4 = u32Options & 2;
  if (_4 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _5 = pBase->MCR;
  _6 = _5 & 2048;
  if (_6 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  FlexCAN_CanBitSampling (pBase, 1);
  goto <bb 15>; [INV]

  <bb 14> :
  FlexCAN_CanBitSampling (pBase, 0);

  <bb 15> :
  _7 = u32Options & 4;
  if (_7 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  FlexCAN_SetBusOffAutorecovery (pBase, 1);
  goto <bb 18>; [INV]

  <bb 17> :
  FlexCAN_SetBusOffAutorecovery (pBase, 0);

  <bb 18> :
  _8 = u32Options & 1;
  if (_8 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  FlexCAN_SetRemoteReqStore (pBase, 1);
  goto <bb 21>; [INV]

  <bb 20> :
  FlexCAN_SetRemoteReqStore (pBase, 0);

  <bb 21> :
  _9 = u32Options & 16;
  if (_9 != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  FlexCAN_SetEdgeFilter (pBase, 1);
  goto <bb 24>; [INV]

  <bb 23> :
  FlexCAN_SetEdgeFilter (pBase, 0);

  <bb 24> :
  return;

}


FlexCAN_SetEnhancedRxFifoFilter (struct FLEXCAN_Type * base, const struct Flexcan_Ip_EnhancedIdTableType * idFilterTable)
{
  volatile uint32 * FilterStdIDTable;
  volatile uint32 * FilterExtIDTable;
  uint32 Val;
  uint32 Val1;
  uint32 Val2;
  uint32 NumOfStdIDFilter;
  uint32 NumOfExtIDFilter;
  uint32 NumOfEnhancedFilter;
  uint32 n;
  uint32 j;
  uint32 i;

  <bb 2> :
  Val2 = 0;
  Val1 = 0;
  Val = 0;
  FilterExtIDTable = 0B;
  FilterStdIDTable = 0B;
  _1 = base->ERFCR;
  _2 = _1 >> 8;
  NumOfEnhancedFilter = _2 & 63;
  _3 = base->ERFCR;
  _4 = _3 >> 16;
  NumOfExtIDFilter = _4 & 127;
  _5 = NumOfEnhancedFilter - NumOfExtIDFilter;
  _6 = _5 + 1;
  NumOfStdIDFilter = _6 * 2;
  FilterExtIDTable = &base->ERFFEL[0];
  _7 = NumOfExtIDFilter * 2;
  FilterStdIDTable = &base->ERFFEL[_7];
  j = 0;
  n = 0;
  i = 0;
  goto <bb 25>; [INV]

  <bb 3> :
  _8 = i * 16;
  _9 = idFilterTable + _8;
  _10 = _9->isExtendedFrame;
  _11 = ~_10;
  if (_11 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 4> :
  Val = 0;
  _12 = i * 16;
  _13 = idFilterTable + _12;
  _14 = _13->rtr2;
  if (_14 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Val = 134217728;

  <bb 6> :
  _15 = i * 16;
  _16 = idFilterTable + _15;
  _17 = _16->rtr1;
  if (_17 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Val = Val | 2048;

  <bb 8> :
  _18 = i * 16;
  _19 = idFilterTable + _18;
  _20 = _19->id2;
  _21 = _20 << 16;
  _22 = _21 & 134152192;
  _23 = i * 16;
  _24 = idFilterTable + _23;
  _25 = _24->id1;
  _26 = _25 & 2047;
  _27 = _22 | _26;
  _28 = j * 4;
  _29 = FilterStdIDTable + _28;
  _30 = Val | _27;
  *_29 = _30;
  _31 = i * 16;
  _32 = idFilterTable + _31;
  _33 = _32->filterType;
  switch (_33) <default: <L9> [INV], case 0: <L6> [INV], case 1: <L7> [INV], case 2: <L8> [INV]>

  <bb 9> :
<L6>:
  _34 = j * 4;
  _35 = FilterStdIDTable + _34;
  _36 = j * 4;
  _37 = FilterStdIDTable + _36;
  _38 = *_35;
  *_37 = _38;
  goto <bb 13>; [INV]

  <bb 10> :
<L7>:
  _39 = j * 4;
  _40 = FilterStdIDTable + _39;
  _41 = *_40;
  _42 = j * 4;
  _43 = FilterStdIDTable + _42;
  _44 = _41 | 1073741824;
  *_43 = _44;
  goto <bb 13>; [INV]

  <bb 11> :
<L8>:
  _45 = j * 4;
  _46 = FilterStdIDTable + _45;
  _47 = *_46;
  _48 = j * 4;
  _49 = FilterStdIDTable + _48;
  _50 = _47 | 2147483648;
  *_49 = _50;
  goto <bb 13>; [INV]

  <bb 12> :
<L9>:

  <bb 13> :
  j = j + 1;
  goto <bb 24>; [INV]

  <bb 14> :
  Val2 = 0;
  Val1 = 0;
  _51 = i * 16;
  _52 = idFilterTable + _51;
  _53 = _52->rtr2;
  if (_53 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  Val2 = 536870912;

  <bb 16> :
  _54 = i * 16;
  _55 = idFilterTable + _54;
  _56 = _55->rtr1;
  if (_56 != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  Val1 = 536870912;

  <bb 18> :
  _57 = i * 16;
  _58 = idFilterTable + _57;
  _59 = _58->id2;
  _60 = _59 & 536870911;
  _61 = n * 4;
  _62 = FilterExtIDTable + _61;
  _63 = Val2 | _60;
  *_62 = _63;
  _64 = i * 16;
  _65 = idFilterTable + _64;
  _66 = _65->id1;
  _67 = _66 & 536870911;
  _68 = n + 1;
  _69 = _68 * 4;
  _70 = FilterExtIDTable + _69;
  _71 = Val1 | _67;
  *_70 = _71;
  _72 = i * 16;
  _73 = idFilterTable + _72;
  _74 = _73->filterType;
  switch (_74) <default: <L19> [INV], case 0: <L16> [INV], case 1: <L17> [INV], case 2: <L18> [INV]>

  <bb 19> :
<L16>:
  _75 = n * 4;
  _76 = FilterExtIDTable + _75;
  _77 = n * 4;
  _78 = FilterExtIDTable + _77;
  _79 = *_76;
  *_78 = _79;
  goto <bb 23>; [INV]

  <bb 20> :
<L17>:
  _80 = n * 4;
  _81 = FilterExtIDTable + _80;
  _82 = *_81;
  _83 = n * 4;
  _84 = FilterExtIDTable + _83;
  _85 = _82 | 1073741824;
  *_84 = _85;
  goto <bb 23>; [INV]

  <bb 21> :
<L18>:
  _86 = n * 4;
  _87 = FilterExtIDTable + _86;
  _88 = *_87;
  _89 = n * 4;
  _90 = FilterExtIDTable + _89;
  _91 = _88 | 2147483648;
  *_90 = _91;
  goto <bb 23>; [INV]

  <bb 22> :
<L19>:

  <bb 23> :
  n = n + 2;

  <bb 24> :
  i = i + 1;

  <bb 25> :
  _92 = NumOfExtIDFilter + NumOfStdIDFilter;
  if (i < _92)
    goto <bb 3>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 26> :
  return;

}


FlexCAN_EnableEnhancedRxFifo (struct FLEXCAN_Type * base, uint32 numOfStdIDFilters, uint32 numOfExtIDFilters, uint32 numOfWatermark)
{
  uint32 NumOfEnhancedFilters;
  Flexcan_Ip_StatusType Stat;
  Flexcan_Ip_StatusType D.10479;

  <bb 2> :
  Stat = 0;
  NumOfEnhancedFilters = 0;
  _1 = FlexCAN_IsEnhancedRxFifoAvailable (base);
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 3> :
  _2 = numOfStdIDFilters >> 1;
  _3 = numOfExtIDFilters + _2;
  NumOfEnhancedFilters = _3 + 4294967295;
  if (numOfStdIDFilters == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  if (numOfExtIDFilters == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Stat = 1;

  <bb 6> :
  _4 = numOfStdIDFilters & 1;
  if (_4 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Stat = 1;

  <bb 8> :
  _5 = base->MCR;
  _6 = _5 & 536870912;
  if (_6 == 536870912)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Stat = 1;

  <bb 10> :
  if (Stat == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  _7 = base->ERFCR;
  _8 = _7 | 2147483648;
  base->ERFCR = _8;
  _9 = base->ERFSR;
  _10 = _9 | 134217728;
  base->ERFSR = _10;
  _11 = base->ERFSR;
  _12 = _11 & 268435455;
  base->ERFSR = _12;
  _13 = base->ERFCR;
  _14 = _13 & 4294951167;
  _15 = NumOfEnhancedFilters << 8;
  _16 = _15 & 16128;
  _17 = _14 | _16;
  base->ERFCR = _17;
  _18 = base->ERFCR;
  _19 = _18 & 4286644223;
  _20 = numOfExtIDFilters << 16;
  _21 = _20 & 8323072;
  _22 = _19 | _21;
  base->ERFCR = _22;
  _23 = base->ERFCR;
  _24 = _23 & 4294967264;
  _25 = numOfWatermark & 31;
  _26 = _24 | _25;
  base->ERFCR = _26;
  goto <bb 13>; [INV]

  <bb 12> :
  Stat = 1;

  <bb 13> :
  D.10479 = Stat;

  <bb 14> :
<L13>:
  return D.10479;

}


FlexCAN_IsEnhancedRxFifoAvailable (const struct FLEXCAN_Type * base)
{
  boolean ReturnValue;
  static struct FLEXCAN_Type * const FlexcanBase[1] = {1076903936B};
  uint32 i;
  boolean D.10464;

  <bb 2> :
  i = 0;
  ReturnValue = 0;
  i = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = FlexcanBase[i];
  if (base == _1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  ReturnValue = 1;
  goto <bb 7>; [INV]

  <bb 5> :
  i = i + 1;

  <bb 6> :
  if (i == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  D.10464 = ReturnValue;

  <bb 8> :
<L5>:
  return D.10464;

}


FlexCAN_IsMbOutOfRange (const struct FLEXCAN_Type * pBase, uint8 u8MbIndex, boolean bIsLegacyFifoEn, uint32 u32MaxMbNum)
{
  uint32 u32NumOfMbOccupiedByFiFo;
  uint32 u32NumOfFiFoElement;
  boolean ReturnValue;
  boolean D.10460;

  <bb 2> :
  ReturnValue = 0;
  u32NumOfFiFoElement = 0;
  u32NumOfMbOccupiedByFiFo = 0;
  _1 = (unsigned char) u32MaxMbNum;
  if (u8MbIndex >= _1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ReturnValue = 1;
  goto <bb 8>; [INV]

  <bb 4> :
  if (bIsLegacyFifoEn != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _2 = pBase->CTRL2;
  _3 = _2 >> 24;
  u32NumOfFiFoElement = _3 & 15;
  _4 = u32NumOfFiFoElement + 1;
  _5 = _4 * 8;
  _6 = _5 / 4;
  u32NumOfMbOccupiedByFiFo = _6 + 5;
  _7 = (long unsigned int) u8MbIndex;
  if (u32NumOfMbOccupiedByFiFo >= _7)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  ReturnValue = 1;
  goto <bb 8>; [INV]

  <bb 7> :
  ReturnValue = 0;

  <bb 8> :
  D.10460 = ReturnValue;

  <bb 9> :
<L8>:
  return D.10460;

}


FlexCAN_ReadEnhancedRxFifo (const struct FLEXCAN_Type * base, struct Flexcan_Ip_MsgBuffType * rxFifo)
{
  uint8 can_real_payload;
  uint8 flexcan_mb_dlc_value;
  uint32 * MsgData_32;
  const uint32 * Flexcan_Mb_Data_32;
  const uint32 * Flexcan_Mb_Id;
  const uint32 * Flexcan_Mb;
  uint8 Idhit_Offset;
  uint32 MbWord;
  uint32 DataByte;
  uint8 iftmp.14;

  <bb 2> :
  base.13_1 = (long unsigned int) base;
  _2 = base.13_1 + 8192;
  Flexcan_Mb = (const uint32 *) _2;
  Flexcan_Mb_Id = Flexcan_Mb + 4;
  Flexcan_Mb_Data_32 = Flexcan_Mb + 8;
  MsgData_32 = 0B;
  _3 = *Flexcan_Mb;
  _4 = _3 >> 16;
  _5 = (unsigned char) _4;
  flexcan_mb_dlc_value = _5 & 15;
  can_real_payload = FlexCAN_ComputePayloadSize (flexcan_mb_dlc_value);
  MsgData_32 = &rxFifo->data;
  rxFifo->dataLen = can_real_payload;
  _6 = *Flexcan_Mb;
  rxFifo->cs = _6;
  _7 = rxFifo->cs;
  _8 = _7 & 2097152;
  if (_8 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _9 = *Flexcan_Mb_Id;
  rxFifo->msgId = _9;
  goto <bb 5>; [INV]

  <bb 4> :
  _10 = *Flexcan_Mb_Id;
  _11 = _10 >> 18;
  rxFifo->msgId = _11;

  <bb 5> :
  _12 = rxFifo->cs;
  _13 = _12 & 1048576;
  if (_13 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  can_real_payload = 0;

  <bb 7> :
  _14 = can_real_payload >> 2;
  _15 = can_real_payload & 3;
  if (_15 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.14 = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.14 = 0;

  <bb 10> :
  Idhit_Offset = iftmp.14 + _14;
  _16 = (unsigned int) Idhit_Offset;
  _17 = _16 * 4;
  _18 = Flexcan_Mb_Data_32 + _17;
  _19 = *_18;
  _20 = (unsigned char) _19;
  _21 = _20 & 127;
  rxFifo->id_hit = _21;
  _22 = rxFifo->cs;
  _23 = _22 & 65535;
  rxFifo->time_stamp = _23;
  DataByte = 0;
  goto <bb 12>; [INV]

  <bb 11> :
  _24 = DataByte >> 2;
  _25 = _24 * 4;
  _26 = Flexcan_Mb_Data_32 + _25;
  MbWord = *_26;
  _27 = MbWord >> 24;
  _28 = MbWord >> 8;
  _29 = _28 & 65280;
  _30 = _27 | _29;
  _31 = MbWord << 8;
  _32 = _31 & 16711680;
  _33 = _30 | _32;
  _34 = MbWord << 24;
  _35 = DataByte >> 2;
  _36 = _35 * 4;
  _37 = MsgData_32 + _36;
  _38 = _33 | _34;
  *_37 = _38;
  DataByte = DataByte + 4;

  <bb 12> :
  _39 = (long unsigned int) can_real_payload;
  if (DataByte < _39)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  return;

}


FlexCAN_ReadRxFifo (const struct FLEXCAN_Type * base, struct Flexcan_Ip_MsgBuffType * rxFifo)
{
  uint8 can_real_payload;
  uint8 flexcan_mb_dlc_value;
  uint32 * msgData_32;
  const uint32 * flexcan_mb_data_32;
  const uint32 * flexcan_mb_id;
  const uint32 * flexcan_mb;
  uint32 MbWord;
  uint32 DataByte;

  <bb 2> :
  base.12_1 = (long unsigned int) base;
  _2 = base.12_1 + 128;
  flexcan_mb = (const uint32 *) _2;
  flexcan_mb_id = flexcan_mb + 4;
  flexcan_mb_data_32 = flexcan_mb + 8;
  msgData_32 = &rxFifo->data;
  _3 = *flexcan_mb;
  _4 = _3 >> 16;
  _5 = (unsigned char) _4;
  flexcan_mb_dlc_value = _5 & 15;
  can_real_payload = FlexCAN_ComputePayloadSize (flexcan_mb_dlc_value);
  if (can_real_payload > 8)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  can_real_payload = 8;

  <bb 4> :
  rxFifo->dataLen = can_real_payload;
  _6 = *flexcan_mb;
  rxFifo->cs = _6;
  _7 = rxFifo->cs;
  _8 = _7 & 2097152;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _9 = *flexcan_mb_id;
  rxFifo->msgId = _9;
  goto <bb 7>; [INV]

  <bb 6> :
  _10 = *flexcan_mb_id;
  _11 = _10 >> 18;
  rxFifo->msgId = _11;

  <bb 7> :
  _12 = base->RXFIR;
  _13 = (unsigned char) _12;
  rxFifo->id_hit = _13;
  _14 = rxFifo->cs;
  _15 = _14 & 65535;
  rxFifo->time_stamp = _15;
  DataByte = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  _16 = DataByte >> 2;
  _17 = _16 * 4;
  _18 = flexcan_mb_data_32 + _17;
  MbWord = *_18;
  _19 = MbWord >> 24;
  _20 = MbWord >> 8;
  _21 = _20 & 65280;
  _22 = _19 | _21;
  _23 = MbWord << 8;
  _24 = _23 & 16711680;
  _25 = _22 | _24;
  _26 = MbWord << 24;
  _27 = DataByte >> 2;
  _28 = _27 * 4;
  _29 = msgData_32 + _28;
  _30 = _25 | _26;
  *_29 = _30;
  DataByte = DataByte + 4;

  <bb 9> :
  _31 = (long unsigned int) can_real_payload;
  if (DataByte < _31)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  return;

}


FlexCAN_SetRxFifoFilter (struct FLEXCAN_Type * base, Flexcan_Ip_RxFifoIdElementFormatType idFormat, const struct Flexcan_Ip_IdTableType * idFilterTable)
{
  volatile uint32 * FilterTable;
  uint32 Val;
  uint32 Val2;
  uint32 Val1;
  uint32 NumOfFilters;
  uint32 j;
  uint32 i;

  <bb 2> :
  Val1 = 0;
  Val2 = 0;
  Val = 0;
  base.11_1 = (long unsigned int) base;
  _2 = base.11_1 + 224;
  FilterTable = (volatile uint32 *) _2;
  _3 = base->CTRL2;
  _4 = _3 >> 24;
  NumOfFilters = _4 & 15;
  switch (idFormat) <default: <L40> [INV], case 0: <L0> [INV], case 1: <L9> [INV], case 2: <L23> [INV], case 3: <L39> [INV]>

  <bb 3> :
<L0>:
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13 ();
  _5 = base->MCR;
  _6 = _5 & 4294966527;
  base->MCR = _6;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13 ();
  i = 0;
  goto <bb 10>; [INV]

  <bb 4> :
  Val = 0;
  _7 = i * 8;
  _8 = idFilterTable + _7;
  _9 = _8->isRemoteFrame;
  if (_9 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Val = 2147483648;

  <bb 6> :
  _10 = i * 8;
  _11 = idFilterTable + _10;
  _12 = _11->isExtendedFrame;
  if (_12 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Val = Val | 1073741824;
  _13 = i * 8;
  _14 = idFilterTable + _13;
  _15 = _14->id;
  _16 = _15 << 1;
  _17 = _16 & 1073741823;
  _18 = i * 4;
  _19 = FilterTable + _18;
  _20 = Val + _17;
  *_19 = _20;
  goto <bb 9>; [INV]

  <bb 8> :
  _21 = i * 8;
  _22 = idFilterTable + _21;
  _23 = _22->id;
  _24 = _23 << 19;
  _25 = _24 & 1073217536;
  _26 = i * 4;
  _27 = FilterTable + _26;
  _28 = Val + _25;
  *_27 = _28;

  <bb 9> :
  i = i + 1;

  <bb 10> :
  _29 = NumOfFilters + 1;
  _30 = _29 * 8;
  if (i < _30)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  goto <bb 44>; [INV]

  <bb 12> :
<L9>:
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13 ();
  _31 = base->MCR;
  _32 = _31 & 4294966527;
  _33 = _32 | 256;
  base->MCR = _33;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13 ();
  j = 0;
  i = 0;
  goto <bb 24>; [INV]

  <bb 13> :
  Val1 = 0;
  Val2 = 0;
  _34 = j * 8;
  _35 = idFilterTable + _34;
  _36 = _35->isRemoteFrame;
  if (_36 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  Val1 = 2147483648;

  <bb 15> :
  _37 = j + 1;
  _38 = _37 * 8;
  _39 = idFilterTable + _38;
  _40 = _39->isRemoteFrame;
  if (_40 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  Val2 = 32768;

  <bb 17> :
  _41 = j * 8;
  _42 = idFilterTable + _41;
  _43 = _42->isExtendedFrame;
  if (_43 != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  Val1 = Val1 | 1073741824;
  _44 = j * 8;
  _45 = idFilterTable + _44;
  _46 = _45->id;
  _47 = _46 >> 15;
  _48 = _47 << 16;
  _49 = _48 & 1073676288;
  _50 = i * 4;
  _51 = FilterTable + _50;
  _52 = Val1 + _49;
  *_51 = _52;
  goto <bb 20>; [INV]

  <bb 19> :
  _53 = j * 8;
  _54 = idFilterTable + _53;
  _55 = _54->id;
  _56 = _55 << 19;
  _57 = _56 & 1073217536;
  _58 = i * 4;
  _59 = FilterTable + _58;
  _60 = Val1 + _57;
  *_59 = _60;

  <bb 20> :
  _61 = j + 1;
  _62 = _61 * 8;
  _63 = idFilterTable + _62;
  _64 = _63->isExtendedFrame;
  if (_64 != 0)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  Val2 = Val2 | 16384;
  _65 = i * 4;
  _66 = FilterTable + _65;
  _67 = *_66;
  _68 = j + 1;
  _69 = _68 * 8;
  _70 = idFilterTable + _69;
  _71 = _70->id;
  _72 = _71 >> 15;
  _73 = _72 & 16383;
  _74 = Val2 + _73;
  _75 = i * 4;
  _76 = FilterTable + _75;
  _77 = _67 | _74;
  *_76 = _77;
  goto <bb 23>; [INV]

  <bb 22> :
  _78 = i * 4;
  _79 = FilterTable + _78;
  _80 = *_79;
  _81 = j + 1;
  _82 = _81 * 8;
  _83 = idFilterTable + _82;
  _84 = _83->id;
  _85 = _84 << 3;
  _86 = _85 & 16376;
  _87 = Val2 + _86;
  _88 = i * 4;
  _89 = FilterTable + _88;
  _90 = _80 | _87;
  *_89 = _90;

  <bb 23> :
  j = j + 2;
  i = i + 1;

  <bb 24> :
  _91 = NumOfFilters + 1;
  _92 = _91 * 8;
  if (i < _92)
    goto <bb 13>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 25> :
  goto <bb 44>; [INV]

  <bb 26> :
<L23>:
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13 ();
  _93 = base->MCR;
  _94 = _93 & 4294966527;
  _95 = _94 | 512;
  base->MCR = _95;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13 ();
  j = 0;
  i = 0;
  goto <bb 40>; [INV]

  <bb 27> :
  _96 = j * 8;
  _97 = idFilterTable + _96;
  _98 = _97->isExtendedFrame;
  if (_98 != 0)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 28> :
  _99 = j * 8;
  _100 = idFilterTable + _99;
  _101 = _100->id;
  _102 = _101 >> 21;
  _103 = _102 << 24;
  _104 = i * 4;
  _105 = FilterTable + _104;
  _106 = Val1 + _103;
  *_105 = _106;
  goto <bb 30>; [INV]

  <bb 29> :
  _107 = j * 8;
  _108 = idFilterTable + _107;
  _109 = _108->id;
  _110 = _109 >> 3;
  _111 = _110 << 24;
  _112 = i * 4;
  _113 = FilterTable + _112;
  _114 = Val1 + _111;
  *_113 = _114;

  <bb 30> :
  _115 = j + 1;
  _116 = _115 * 8;
  _117 = idFilterTable + _116;
  _118 = _117->isExtendedFrame;
  if (_118 != 0)
    goto <bb 31>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 31> :
  _119 = i * 4;
  _120 = FilterTable + _119;
  _121 = *_120;
  _122 = j + 1;
  _123 = _122 * 8;
  _124 = idFilterTable + _123;
  _125 = _124->id;
  _126 = _125 >> 21;
  _127 = _126 << 16;
  _128 = _127 & 16711680;
  _129 = Val1 + _128;
  _130 = i * 4;
  _131 = FilterTable + _130;
  _132 = _121 | _129;
  *_131 = _132;
  goto <bb 33>; [INV]

  <bb 32> :
  _133 = i * 4;
  _134 = FilterTable + _133;
  _135 = *_134;
  _136 = j + 1;
  _137 = _136 * 8;
  _138 = idFilterTable + _137;
  _139 = _138->id;
  _140 = _139 >> 3;
  _141 = _140 << 16;
  _142 = _141 & 16711680;
  _143 = Val1 + _142;
  _144 = i * 4;
  _145 = FilterTable + _144;
  _146 = _135 | _143;
  *_145 = _146;

  <bb 33> :
  _147 = j + 2;
  _148 = _147 * 8;
  _149 = idFilterTable + _148;
  _150 = _149->isExtendedFrame;
  if (_150 != 0)
    goto <bb 34>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 34> :
  _151 = i * 4;
  _152 = FilterTable + _151;
  _153 = *_152;
  _154 = j + 2;
  _155 = _154 * 8;
  _156 = idFilterTable + _155;
  _157 = _156->id;
  _158 = _157 >> 21;
  _159 = _158 << 8;
  _160 = _159 & 65535;
  _161 = Val1 + _160;
  _162 = i * 4;
  _163 = FilterTable + _162;
  _164 = _153 | _161;
  *_163 = _164;
  goto <bb 36>; [INV]

  <bb 35> :
  _165 = i * 4;
  _166 = FilterTable + _165;
  _167 = *_166;
  _168 = j + 2;
  _169 = _168 * 8;
  _170 = idFilterTable + _169;
  _171 = _170->id;
  _172 = _171 >> 3;
  _173 = _172 << 8;
  _174 = _173 & 65535;
  _175 = Val1 + _174;
  _176 = i * 4;
  _177 = FilterTable + _176;
  _178 = _167 | _175;
  *_177 = _178;

  <bb 36> :
  _179 = j + 3;
  _180 = _179 * 8;
  _181 = idFilterTable + _180;
  _182 = _181->isExtendedFrame;
  if (_182 != 0)
    goto <bb 37>; [INV]
  else
    goto <bb 38>; [INV]

  <bb 37> :
  _183 = i * 4;
  _184 = FilterTable + _183;
  _185 = *_184;
  _186 = j + 3;
  _187 = _186 * 8;
  _188 = idFilterTable + _187;
  _189 = _188->id;
  _190 = _189 >> 21;
  _191 = _190 & 255;
  _192 = Val1 + _191;
  _193 = i * 4;
  _194 = FilterTable + _193;
  _195 = _185 | _192;
  *_194 = _195;
  goto <bb 39>; [INV]

  <bb 38> :
  _196 = i * 4;
  _197 = FilterTable + _196;
  _198 = *_197;
  _199 = j + 3;
  _200 = _199 * 8;
  _201 = idFilterTable + _200;
  _202 = _201->id;
  _203 = _202 >> 3;
  _204 = _203 & 255;
  _205 = Val1 + _204;
  _206 = i * 4;
  _207 = FilterTable + _206;
  _208 = _198 | _205;
  *_207 = _208;

  <bb 39> :
  j = j + 4;
  i = i + 1;

  <bb 40> :
  _209 = NumOfFilters + 1;
  _210 = _209 * 8;
  if (i < _210)
    goto <bb 27>; [INV]
  else
    goto <bb 41>; [INV]

  <bb 41> :
  goto <bb 44>; [INV]

  <bb 42> :
<L39>:
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13 ();
  _211 = base->MCR;
  _212 = _211 | 768;
  base->MCR = _212;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13 ();
  goto <bb 44>; [INV]

  <bb 43> :
<L40>:

  <bb 44> :
  return;

}


FlexCAN_SetOperationMode (struct FLEXCAN_Type * base, Flexcan_Ip_ModesType mode)
{
  <bb 2> :
  switch (mode) <default: <L3> [INV], case 0: <L0> [INV], case 1: <L1> [INV], case 2: <L2> [INV]>

  <bb 3> :
<L0>:
  _1 = base->CTRL1;
  _2 = _1 & 4294967287;
  base->CTRL1 = _2;
  _3 = base->CTRL1;
  _4 = _3 & 4294963199;
  base->CTRL1 = _4;
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  _5 = base->CTRL1;
  _6 = _5 | 8;
  base->CTRL1 = _6;
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  _7 = base->CTRL1;
  _8 = _7 | 4096;
  base->CTRL1 = _8;
  _9 = base->CTRL1;
  _10 = _9 & 4294967287;
  base->CTRL1 = _10;
  FlexCAN_SetSelfReception (base, 1);
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:

  <bb 7> :
  return;

}


FlexCAN_SetMaxMsgBuffNum (struct FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
  Flexcan_Ip_StatusType Status;
  uint32 ValEndRam;
  uint32 ValEndMb;
  uint8 Can_Real_Payload;
  uint8 Arbitration_Field_Size;
  volatile uint8 * Flexcan_Mb_Data;
  volatile uint32 * Flexcan_Mb_Id;
  volatile uint32 * Flexcan_Mb;
  const uint32 * ValEndMbPointer;
  const uint32 * RAM;
  uint32 DataByte;
  uint8 MsgBuffIdx;
  Flexcan_Ip_StatusType D.10405;

  <bb 2> :
  base.7_1 = (long unsigned int) base;
  _2 = base.7_1 + 128;
  RAM = (const uint32 *) _2;
  ValEndMbPointer = 0B;
  Flexcan_Mb = 0B;
  Flexcan_Mb_Id = 0B;
  Flexcan_Mb_Data = 0B;
  Arbitration_Field_Size = 8;
  _3 = maxMsgBuffNum + 4294967295;
  Can_Real_Payload = FlexCAN_GetMbPayloadSize (base, _3);
  ValEndMb = 0;
  ValEndRam = 0;
  Status = 0;
  _4 = maxMsgBuffNum + 4294967295;
  ValEndMbPointer = FlexCAN_GetMsgBuffRegion (base, _4);
  _5 = (long unsigned int) Can_Real_Payload;
  ValEndMbPointer.8_6 = (long unsigned int) ValEndMbPointer;
  _7 = _5 + ValEndMbPointer.8_6;
  _8 = (long unsigned int) Arbitration_Field_Size;
  ValEndMb = _7 + _8;
  _9 = FlexCAN_GetMaxMbNum (base);
  _10 = _9 * 16;
  _11 = RAM + _10;
  ValEndRam = (uint32) _11;
  if (ValEndMb > ValEndRam)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _12 = FlexCAN_GetMaxMbNum (base);
  if (maxMsgBuffNum > _12)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Status = 4;

  <bb 5> :
  if (Status == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 6> :
  _13 = base->MCR;
  _14 = _13 & 4294967168;
  _15 = maxMsgBuffNum + 4294967295;
  _16 = _15 & 127;
  _17 = _14 | _16;
  base->MCR = _17;
  _18 = base->MCR;
  _19 = _18 & 536870912;
  if (_19 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 7> :
  MsgBuffIdx = 0;
  goto <bb 12>; [INV]

  <bb 8> :
  _20 = (long unsigned int) MsgBuffIdx;
  Flexcan_Mb = FlexCAN_GetMsgBuffRegion (base, _20);
  Flexcan_Mb_Id = Flexcan_Mb + 4;
  Flexcan_Mb_Data = Flexcan_Mb + 8;
  *Flexcan_Mb = 0;
  *Flexcan_Mb_Id = 0;
  _21 = (long unsigned int) MsgBuffIdx;
  Can_Real_Payload = FlexCAN_GetMbPayloadSize (base, _21);
  DataByte = 0;
  goto <bb 10>; [INV]

  <bb 9> :
  _22 = Flexcan_Mb_Data + DataByte;
  *_22 = 0;
  DataByte = DataByte + 1;

  <bb 10> :
  _23 = (long unsigned int) Can_Real_Payload;
  if (DataByte < _23)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  MsgBuffIdx.9_24 = MsgBuffIdx;
  MsgBuffIdx = MsgBuffIdx.9_24 + 1;

  <bb 12> :
  _25 = (long unsigned int) MsgBuffIdx;
  if (maxMsgBuffNum > _25)
    goto <bb 8>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  D.10405 = Status;

  <bb 14> :
<L13>:
  return D.10405;

}


FlexCAN_SetTxMsgBuff (volatile uint32 * const pMbAddr, const struct Flexcan_Ip_MsbuffCodeStatusType * cs, uint32 msgId, const uint8 * msgData, const boolean isRemote)
{
  const uint32 * MsgData_32;
  volatile uint32 * Flexcan_Mb_Data_32;
  volatile uint8 * Flexcan_Mb_Data;
  volatile uint32 * Flexcan_Mb_Id;
  volatile uint32 * Flexcan_Mb;
  uint8 Payload_Size;
  uint8 Dlc_Value;
  uint32 DataByte;
  uint32 Flexcan_Mb_Config;

  <bb 2> :
  Flexcan_Mb_Config = 0;
  Flexcan_Mb = pMbAddr;
  Flexcan_Mb_Id = Flexcan_Mb + 4;
  Flexcan_Mb_Data = Flexcan_Mb + 8;
  Flexcan_Mb_Data_32 = Flexcan_Mb + 8;
  MsgData_32 = msgData;
  *Flexcan_Mb = 134217728;
  *Flexcan_Mb_Id = 0;
  _1 = cs->dataLen;
  _2 = (unsigned char) _1;
  Dlc_Value = FlexCAN_ComputeDLCValue (_2);
  if (msgData != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 3> :
  DataByte = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  _3 = DataByte >> 2;
  _4 = _3 * 4;
  _5 = MsgData_32 + _4;
  _6 = *_5;
  _7 = _6 >> 24;
  _8 = DataByte >> 2;
  _9 = _8 * 4;
  _10 = MsgData_32 + _9;
  _11 = *_10;
  _12 = _11 >> 8;
  _13 = _12 & 65280;
  _14 = _7 | _13;
  _15 = DataByte >> 2;
  _16 = _15 * 4;
  _17 = MsgData_32 + _16;
  _18 = *_17;
  _19 = _18 << 8;
  _20 = _19 & 16711680;
  _21 = _14 | _20;
  _22 = DataByte >> 2;
  _23 = _22 * 4;
  _24 = MsgData_32 + _23;
  _25 = *_24;
  _26 = _25 << 24;
  _27 = DataByte >> 2;
  _28 = _27 * 4;
  _29 = Flexcan_Mb_Data_32 + _28;
  _30 = _21 | _26;
  *_29 = _30;
  DataByte = DataByte + 4;

  <bb 5> :
  _31 = cs->dataLen;
  _32 = _31 & 4294967292;
  if (DataByte < _32)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  goto <bb 8>; [INV]

  <bb 7> :
  _33 = msgData + DataByte;
  _34 = DataByte ^ 3;
  _35 = Flexcan_Mb_Data + _34;
  _36 = *_33;
  *_35 = _36;
  DataByte = DataByte + 1;

  <bb 8> :
  _37 = cs->dataLen;
  if (DataByte < _37)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  Payload_Size = FlexCAN_ComputePayloadSize (Dlc_Value);
  DataByte = cs->dataLen;
  goto <bb 11>; [INV]

  <bb 10> :
  _38 = DataByte ^ 3;
  _39 = Flexcan_Mb_Data + _38;
  _40 = cs->fd_padding;
  *_39 = _40;
  DataByte = DataByte + 1;

  <bb 11> :
  _41 = (long unsigned int) Payload_Size;
  if (DataByte < _41)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  _42 = cs->msgIdType;
  if (_42 == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  _43 = *Flexcan_Mb_Id;
  _44 = _43 & 3758096384;
  *Flexcan_Mb_Id = _44;
  _45 = *Flexcan_Mb_Id;
  _46 = msgId & 536870911;
  _47 = _45 | _46;
  *Flexcan_Mb_Id = _47;
  Flexcan_Mb_Config = Flexcan_Mb_Config | 6291456;

  <bb 14> :
  _48 = cs->msgIdType;
  if (_48 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _49 = *Flexcan_Mb_Id;
  _50 = _49 & 3758358527;
  *Flexcan_Mb_Id = _50;
  _51 = *Flexcan_Mb_Id;
  _52 = msgId << 18;
  _53 = _52 & 536608768;
  _54 = _51 | _53;
  *Flexcan_Mb_Id = _54;
  Flexcan_Mb_Config = Flexcan_Mb_Config & 4288675839;

  <bb 16> :
  Flexcan_Mb_Config = Flexcan_Mb_Config & 4293984255;
  _55 = (long unsigned int) Dlc_Value;
  _56 = _55 << 16;
  _57 = _56 & 983040;
  Flexcan_Mb_Config = Flexcan_Mb_Config | _57;
  _58 = cs->code;
  if (_58 != 15)
    goto <bb 17>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 17> :
  _59 = cs->code;
  if (_59 == 28)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  Flexcan_Mb_Config = Flexcan_Mb_Config | 1048576;
  goto <bb 21>; [INV]

  <bb 19> :
  if (isRemote != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  Flexcan_Mb_Config = Flexcan_Mb_Config | 1048576;

  <bb 21> :
  Flexcan_Mb_Config = Flexcan_Mb_Config & 4043309055;
  _60 = cs->fd_enable;
  if (_60 != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  _61 = cs->code;
  _62 = _61 << 24;
  _63 = _62 & 251658240;
  _64 = Flexcan_Mb_Config | _63;
  Flexcan_Mb_Config = _64 | 2147483648;
  Flexcan_Mb_Config = Flexcan_Mb_Config & 4293918719;
  goto <bb 24>; [INV]

  <bb 23> :
  _65 = cs->code;
  _66 = _65 << 24;
  _67 = _66 & 251658240;
  Flexcan_Mb_Config = Flexcan_Mb_Config | _67;

  <bb 24> :
  _68 = cs->enable_brs;
  if (_68 != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  Flexcan_Mb_Config = Flexcan_Mb_Config | 1073741824;

  <bb 26> :
  _69 = *Flexcan_Mb;
  _70 = Flexcan_Mb_Config | _69;
  *Flexcan_Mb = _70;

  <bb 27> :
  return;

}


FlexCAN_GetMsgBuff (const struct FLEXCAN_Type * base, uint32 msgBuffIdx, struct Flexcan_Ip_MsgBuffType * msgBuff)
{
  uint8 Payload_Size;
  uint8 Flexcan_Mb_Dlc_Value;
  uint32 MbWord;
  uint32 * MsgBuff_Data_32;
  const uint32 * Flexcan_Mb_Data_32;
  const uint8 * Flexcan_Mb_Data;
  const uint32 * Flexcan_Mb_Id;
  const uint32 * Flexcan_Mb;
  uint8 i;

  <bb 2> :
  Flexcan_Mb = FlexCAN_GetMsgBuffRegion (base, msgBuffIdx);
  Flexcan_Mb_Id = Flexcan_Mb + 4;
  Flexcan_Mb_Data = Flexcan_Mb + 8;
  Flexcan_Mb_Data_32 = Flexcan_Mb + 8;
  MsgBuff_Data_32 = &msgBuff->data;
  _1 = *Flexcan_Mb;
  _2 = _1 >> 16;
  _3 = (unsigned char) _2;
  Flexcan_Mb_Dlc_Value = _3 & 15;
  Payload_Size = FlexCAN_ComputePayloadSize (Flexcan_Mb_Dlc_Value);
  _4 = FlexCAN_GetMbPayloadSize (base, msgBuffIdx);
  if (Payload_Size > _4)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Payload_Size = FlexCAN_GetMbPayloadSize (base, msgBuffIdx);

  <bb 4> :
  msgBuff->dataLen = Payload_Size;
  _5 = *Flexcan_Mb;
  msgBuff->cs = _5;
  _6 = msgBuff->cs;
  _7 = _6 & 2097152;
  if (_7 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _8 = *Flexcan_Mb_Id;
  msgBuff->msgId = _8;
  goto <bb 7>; [INV]

  <bb 6> :
  _9 = *Flexcan_Mb_Id;
  _10 = _9 >> 18;
  msgBuff->msgId = _10;

  <bb 7> :
  _11 = msgBuff->cs;
  _12 = _11 & 65535;
  msgBuff->time_stamp = _12;
  i = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  _13 = i >> 2;
  _14 = (unsigned int) _13;
  _15 = _14 * 4;
  _16 = Flexcan_Mb_Data_32 + _15;
  MbWord = *_16;
  _17 = MbWord >> 24;
  _18 = MbWord >> 8;
  _19 = _18 & 65280;
  _20 = _17 | _19;
  _21 = MbWord << 8;
  _22 = _21 & 16711680;
  _23 = _20 | _22;
  _24 = MbWord << 24;
  _25 = i >> 2;
  _26 = (unsigned int) _25;
  _27 = _26 * 4;
  _28 = MsgBuff_Data_32 + _27;
  _29 = _23 | _24;
  *_28 = _29;
  i = i + 4;

  <bb 9> :
  _30 = (unsigned int) i;
  _31 = (unsigned int) Payload_Size;
  _32 = _31 & 4294967292;
  if (_30 < _32)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  goto <bb 12>; [INV]

  <bb 11> :
  _33 = i ^ 3;
  _34 = (sizetype) _33;
  _35 = Flexcan_Mb_Data + _34;
  _36 = (int) i;
  _37 = *_35;
  msgBuff->data[_36] = _37;
  i.6_38 = i;
  i = i.6_38 + 1;

  <bb 12> :
  if (i < Payload_Size)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  return;

}


FlexCAN_GetMsgBuffTimestamp (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  const uint32 * Flexcan_Mb;
  uint32 TimeStamp;
  uint32 D.10373;

  <bb 2> :
  TimeStamp = 0;
  Flexcan_Mb = FlexCAN_GetMsgBuffRegion (base, msgBuffIdx);
  _1 = *Flexcan_Mb;
  TimeStamp = _1 & 65535;
  D.10373 = TimeStamp;

  <bb 3> :
<L0>:
  return D.10373;

}


FlexCAN_SetRxMsgBuff (const struct FLEXCAN_Type * base, uint32 msgBuffIdx, const struct Flexcan_Ip_MsbuffCodeStatusType * cs, uint32 msgId)
{
  volatile uint32 * flexcan_mb_id;
  volatile uint32 * flexcan_mb;

  <bb 2> :
  flexcan_mb = FlexCAN_GetMsgBuffRegion (base, msgBuffIdx);
  flexcan_mb_id = flexcan_mb + 4;
  *flexcan_mb = 0;
  *flexcan_mb_id = 0;
  _1 = cs->msgIdType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = *flexcan_mb;
  _3 = _2 | 2097152;
  *flexcan_mb = _3;
  _4 = *flexcan_mb;
  _5 = _4 & 4290772991;
  *flexcan_mb = _5;
  _6 = *flexcan_mb_id;
  _7 = _6 & 3758096384;
  *flexcan_mb_id = _7;
  _8 = *flexcan_mb_id;
  _9 = msgId & 536870911;
  _10 = _8 | _9;
  *flexcan_mb_id = _10;

  <bb 4> :
  _11 = cs->msgIdType;
  if (_11 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _12 = *flexcan_mb;
  _13 = _12 & 4288675839;
  *flexcan_mb = _13;
  _14 = *flexcan_mb_id;
  _15 = _14 & 3758358527;
  *flexcan_mb_id = _15;
  _16 = *flexcan_mb_id;
  _17 = msgId << 18;
  _18 = _17 & 536608768;
  _19 = _16 | _18;
  *flexcan_mb_id = _19;

  <bb 6> :
  _20 = cs->code;
  if (_20 != 15)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _21 = *flexcan_mb;
  _22 = _21 & 4043309055;
  *flexcan_mb = _22;
  _23 = *flexcan_mb;
  _24 = cs->code;
  _25 = _24 << 24;
  _26 = _25 & 251658240;
  _27 = _23 | _26;
  *flexcan_mb = _27;

  <bb 8> :
  return;

}


FlexCAN_EnableInterrupts (struct FLEXCAN_Type * pBase, uint8 u8Instance)
{
  uint32 u32MaxMbCrtlNum;

  <bb 2> :
  u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum (pBase);
  _1 = (int) u8Instance;
  _2 = FlexCAN_Ip_au32ImaskBuff[_1][0];
  pBase->IMASK1 = _2;
  if (u32MaxMbCrtlNum > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _3 = (int) u8Instance;
  _4 = FlexCAN_Ip_au32ImaskBuff[_3][1];
  pBase->IMASK2 = _4;

  <bb 4> :
  if (u32MaxMbCrtlNum > 64)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _5 = (int) u8Instance;
  _6 = FlexCAN_Ip_au32ImaskBuff[_5][2];
  pBase->IMASK3 = _6;

  <bb 6> :
  return;

}


FlexCAN_DisableInterrupts (struct FLEXCAN_Type * pBase)
{
  uint32 u32MaxMbCrtlNum;

  <bb 2> :
  u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum (pBase);
  pBase->IMASK1 = 0;
  if (u32MaxMbCrtlNum > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  pBase->IMASK2 = 0;

  <bb 4> :
  if (u32MaxMbCrtlNum > 64)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  pBase->IMASK3 = 0;

  <bb 6> :
  return;

}


FLEXCAN_ClearMsgBuffIntCmd (struct FLEXCAN_Type * pBase, uint8 u8Instance, uint32 mb_idx, boolean bIsIntActive)
{
  uint32 temp;

  <bb 2> :
  _1 = mb_idx & 31;
  temp = 1 << _1;
  if (mb_idx <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11 ();
  _2 = pBase->IMASK1;
  _3 = ~temp;
  _4 = (int) u8Instance;
  _5 = _2 & _3;
  FlexCAN_Ip_au32ImaskBuff[_4][0] = _5;
  if (bIsIntActive != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = (int) u8Instance;
  _7 = FlexCAN_Ip_au32ImaskBuff[_6][0];
  pBase->IMASK1 = _7;

  <bb 5> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11 ();

  <bb 6> :
  if (mb_idx > 31)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  if (mb_idx <= 63)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11 ();
  _8 = pBase->IMASK2;
  _9 = ~temp;
  _10 = (int) u8Instance;
  _11 = _8 & _9;
  FlexCAN_Ip_au32ImaskBuff[_10][1] = _11;
  if (bIsIntActive != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _12 = (int) u8Instance;
  _13 = FlexCAN_Ip_au32ImaskBuff[_12][1];
  pBase->IMASK2 = _13;

  <bb 10> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11 ();

  <bb 11> :
  if (mb_idx > 63)
    goto <bb 12>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 12> :
  if (mb_idx <= 95)
    goto <bb 13>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 13> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11 ();
  _14 = pBase->IMASK3;
  _15 = ~temp;
  _16 = (int) u8Instance;
  _17 = _14 & _15;
  FlexCAN_Ip_au32ImaskBuff[_16][2] = _17;
  if (bIsIntActive != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  _18 = (int) u8Instance;
  _19 = FlexCAN_Ip_au32ImaskBuff[_18][2];
  pBase->IMASK3 = _19;

  <bb 15> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11 ();

  <bb 16> :
  return;

}


FlexCAN_SetMsgBuffIntCmd (struct FLEXCAN_Type * base, uint8 u8Instance, uint32 msgBuffIdx, boolean enable, boolean bIsIntActive)
{
  Flexcan_Ip_StatusType stat;
  uint32 temp;
  Flexcan_Ip_StatusType D.10341;

  <bb 2> :
  stat = 0;
  _1 = msgBuffIdx & 31;
  temp = 1 << _1;
  if (msgBuffIdx <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  if (enable != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18 ();
  _2 = (int) u8Instance;
  _3 = FlexCAN_Ip_au32ImaskBuff[_2][0];
  _4 = (int) u8Instance;
  _5 = temp | _3;
  FlexCAN_Ip_au32ImaskBuff[_4][0] = _5;
  if (bIsIntActive != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _6 = (int) u8Instance;
  _7 = FlexCAN_Ip_au32ImaskBuff[_6][0];
  base->IMASK1 = _7;

  <bb 6> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18 ();
  goto <bb 8>; [INV]

  <bb 7> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18 ();
  _8 = (int) u8Instance;
  _9 = FlexCAN_Ip_au32ImaskBuff[_8][0];
  _10 = ~temp;
  _11 = (int) u8Instance;
  _12 = _9 & _10;
  FlexCAN_Ip_au32ImaskBuff[_11][0] = _12;
  _13 = (int) u8Instance;
  _14 = FlexCAN_Ip_au32ImaskBuff[_13][0];
  base->IMASK1 = _14;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18 ();

  <bb 8> :
  if (msgBuffIdx > 31)
    goto <bb 9>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 9> :
  if (msgBuffIdx <= 63)
    goto <bb 10>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 10> :
  if (enable != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 11> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18 ();
  _15 = (int) u8Instance;
  _16 = FlexCAN_Ip_au32ImaskBuff[_15][1];
  _17 = (int) u8Instance;
  _18 = temp | _16;
  FlexCAN_Ip_au32ImaskBuff[_17][1] = _18;
  if (bIsIntActive != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _19 = (int) u8Instance;
  _20 = FlexCAN_Ip_au32ImaskBuff[_19][1];
  base->IMASK2 = _20;

  <bb 13> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18 ();
  goto <bb 15>; [INV]

  <bb 14> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18 ();
  _21 = (int) u8Instance;
  _22 = FlexCAN_Ip_au32ImaskBuff[_21][1];
  _23 = ~temp;
  _24 = (int) u8Instance;
  _25 = _22 & _23;
  FlexCAN_Ip_au32ImaskBuff[_24][1] = _25;
  _26 = (int) u8Instance;
  _27 = FlexCAN_Ip_au32ImaskBuff[_26][1];
  base->IMASK2 = _27;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18 ();

  <bb 15> :
  if (msgBuffIdx > 63)
    goto <bb 16>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 16> :
  if (msgBuffIdx <= 95)
    goto <bb 17>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 17> :
  if (enable != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 18> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18 ();
  _28 = (int) u8Instance;
  _29 = FlexCAN_Ip_au32ImaskBuff[_28][2];
  _30 = (int) u8Instance;
  _31 = temp | _29;
  FlexCAN_Ip_au32ImaskBuff[_30][2] = _31;
  if (bIsIntActive != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  _32 = (int) u8Instance;
  _33 = FlexCAN_Ip_au32ImaskBuff[_32][2];
  base->IMASK3 = _33;

  <bb 20> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18 ();
  goto <bb 22>; [INV]

  <bb 21> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18 ();
  _34 = (int) u8Instance;
  _35 = FlexCAN_Ip_au32ImaskBuff[_34][2];
  _36 = ~temp;
  _37 = (int) u8Instance;
  _38 = _35 & _36;
  FlexCAN_Ip_au32ImaskBuff[_37][2] = _38;
  _39 = (int) u8Instance;
  _40 = FlexCAN_Ip_au32ImaskBuff[_39][2];
  base->IMASK3 = _40;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18 ();

  <bb 22> :
  D.10341 = stat;

  <bb 23> :
<L25>:
  return D.10341;

}


FlexCAN_LockRxMsgBuff (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  const uint32 * flexcan_mb;
  long unsigned int vol.5;

  <bb 2> :
  flexcan_mb = FlexCAN_GetMsgBuffRegion (base, msgBuffIdx);
  vol.5 = *flexcan_mb;
  return;

}


FlexCAN_GetMbPayloadSize (const struct FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
  uint8 mb_size;
  uint8 i;
  uint8 maxMbBlockNum;
  uint8 can_real_payload;
  uint32 ramBlockSize;
  uint8 arbitration_field_size;
  uint8 D.10313;

  <bb 2> :
  arbitration_field_size = 8;
  ramBlockSize = 512;
  can_real_payload = 8;
  maxMbBlockNum = 0;
  i = 0;
  mb_size = 0;
  i = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  can_real_payload = FlexCAN_GetPayloadSize (base, i);
  mb_size = can_real_payload + arbitration_field_size;
  _1 = (long unsigned int) mb_size;
  _2 = ramBlockSize / _1;
  _3 = (unsigned char) _2;
  maxMbBlockNum = maxMbBlockNum + _3;
  _4 = (long unsigned int) maxMbBlockNum;
  if (maxMsgBuffNum < _4)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  goto <bb 7>; [INV]

  <bb 5> :
  i.4_5 = i;
  i = i.4_5 + 1;

  <bb 6> :
  if (i <= 2)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  D.10313 = can_real_payload;

  <bb 8> :
<L5>:
  return D.10313;

}


FlexCAN_GetPayloadSize (const struct FLEXCAN_Type * base, uint8 mbdsrIdx)
{
  uint32 payloadSize;
  uint8 D.10309;

  <bb 2> :
  payloadSize = 8;
  _1 = (int) mbdsrIdx;
  switch (_1) <default: <L3> [INV], case 0: <L0> [INV], case 1: <L1> [INV], case 2: <L2> [INV]>

  <bb 3> :
<L0>:
  _2 = base->FDCTRL;
  _3 = _2 >> 16;
  _4 = _3 & 3;
  payloadSize = 8 << _4;
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  _5 = base->FDCTRL;
  _6 = _5 >> 19;
  _7 = _6 & 3;
  payloadSize = 8 << _7;
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  _8 = base->FDCTRL;
  _9 = _8 >> 22;
  _10 = _9 & 3;
  payloadSize = 8 << _10;
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:
  _11 = base->FDCTRL;
  _12 = _11 >> 16;
  _13 = _12 & 3;
  payloadSize = 8 << _13;

  <bb 7> :
  D.10309 = (uint8) payloadSize;

  <bb 8> :
<L5>:
  return D.10309;

}


FlexCAN_SetPayloadSize (struct FLEXCAN_Type * base, const struct Flexcan_Ip_PayloadSizeType * payloadSize)
{
  uint32 tmp;

  <bb 2> :
  _1 = FlexCAN_IsFDEnabled (base);
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  tmp = base->FDCTRL;
  tmp = tmp & 4294770687;
  _2 = payloadSize->payloadBlock0;
  _3 = _2 << 16;
  tmp = tmp | _3;
  tmp = tmp & 4293394431;
  _4 = payloadSize->payloadBlock1;
  _5 = _4 << 19;
  tmp = tmp | _5;
  tmp = tmp & 4282384383;
  _6 = payloadSize->payloadBlock2;
  _7 = _6 << 22;
  tmp = tmp | _7;
  base->FDCTRL = tmp;

  <bb 4> :
  return;

}


FlexCAN_EnableRxFifo (struct FLEXCAN_Type * base, uint32 numOfFilters)
{
  Flexcan_Ip_StatusType stat;
  uint16 noOfMbx;
  uint32 i;
  Flexcan_Ip_StatusType D.10303;

  <bb 2> :
  _1 = FlexCAN_GetMaxMbNum (base);
  noOfMbx = (uint16) _1;
  stat = 0;
  _2 = base->MCR;
  _3 = _2 & 2048;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  stat = 1;

  <bb 4> :
  if (stat == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  _4 = base->MCR;
  _5 = _4 | 536870912;
  base->MCR = _5;
  _6 = base->CTRL2;
  _7 = _6 & 4043309055;
  _8 = numOfFilters << 24;
  _9 = _8 & 251658240;
  _10 = _7 | _9;
  base->CTRL2 = _10;
  base->RXFGMASK = 4294967295;
  i = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  base->RXIMR[i] = 536870911;
  i = i + 1;

  <bb 7> :
  _11 = (long unsigned int) noOfMbx;
  if (i < _11)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  D.10303 = stat;

  <bb 9> :
<L7>:
  return D.10303;

}


FlexCAN_Init (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnResult;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType D.10296;
  long unsigned int D.10287;

  <bb 2> :
  timeStart = 0;
  timeElapsed = 0;
  uS2Ticks = OsIf_MicrosToTicks (100, 0);
  returnResult = 0;
  _1 = base->MCR;
  _2 = _1 | 33554432;
  base->MCR = _2;
  _3 = OsIf_GetCounter (0);
  timeStart = _3;
  goto <bb 5>; [INV]

  <bb 3> :
  D.10287 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.10287 + timeElapsed;
  if (timeElapsed >= uS2Ticks)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  returnResult = 3;
  goto <bb 6>; [INV]

  <bb 5> :
  _4 = base->MCR;
  _5 = _4 & 33554432;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (returnResult == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 7> :
  _6 = base->MCR;
  _7 = _6 | 4096;
  base->MCR = _7;
  FlexCAN_ClearRAM (base);
  base->RXMGMASK = 4294967295;
  base->RX14MASK = 4294967295;
  base->RX15MASK = 4294967295;
  base->IMASK1 = 0;
  base->IFLAG1 = 4294967295;
  _8 = FlexCAN_GetMaxMbNum (base);
  if (_8 > 32)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  base->IMASK2 = 0;
  base->IFLAG2 = 4294967295;

  <bb 9> :
  _9 = FlexCAN_GetMaxMbNum (base);
  if (_9 > 64)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  base->IMASK3 = 0;
  base->IFLAG3 = 4294967295;

  <bb 11> :
  base->ESR1 = 3866630;
  base->CTRL1 = 0;
  base->CTRL2 = 1048576;
  base->CBT = 0;
  base->EPRS = 0;
  base->ENCBT = 0;
  base->EDCBT = 0;
  base->ETDC = 0;
  base->FDCBT = 0;
  base->FDCTRL = 2147500288;

  <bb 12> :
  D.10296 = returnResult;
  timeStart = {CLOBBER};

  <bb 13> :
<L12>:
  return D.10296;

}


FlexCAN_SetErrIntCmd (struct FLEXCAN_Type * base, flexcan_int_type_t errType, boolean enable)
{
  uint32 temp;

  <bb 2> :
  temp = errType;
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_06 ();
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  if (errType == 16385)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _1 = base->CTRL2;
  _2 = _1 | 2147483648;
  base->CTRL2 = _2;
  goto <bb 14>; [INV]

  <bb 5> :
  if (errType == 1024)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (errType == 2048)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _3 = base->MCR;
  _4 = _3 | 2097152;
  base->MCR = _4;

  <bb 8> :
  _5 = base->CTRL1;
  _6 = temp | _5;
  base->CTRL1 = _6;
  goto <bb 14>; [INV]

  <bb 9> :
  if (errType == 16385)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _7 = base->CTRL2;
  _8 = _7 & 2147483647;
  base->CTRL2 = _8;
  goto <bb 14>; [INV]

  <bb 11> :
  _9 = base->CTRL1;
  _10 = ~temp;
  _11 = _9 & _10;
  base->CTRL1 = _11;
  temp = base->CTRL1;
  _12 = temp & 1024;
  if (_12 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _13 = temp & 2048;
  if (_13 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  _14 = base->MCR;
  _15 = _14 & 4292870143;
  base->MCR = _15;

  <bb 14> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_06 ();
  return;

}


FlexCAN_Disable (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnResult;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType D.10268;
  long unsigned int D.10265;

  <bb 2> :
  timeStart = 0;
  timeElapsed = 0;
  uS2Ticks = OsIf_MicrosToTicks (100, 0);
  returnResult = 0;
  _1 = base->MCR;
  _2 = (signed int) _1;
  if (_2 >= 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_05 ();
  _3 = base->MCR;
  _4 = _3 | 2147483648;
  base->MCR = _4;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_05 ();
  _5 = OsIf_GetCounter (0);
  timeStart = _5;
  goto <bb 6>; [INV]

  <bb 4> :
  D.10265 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.10265 + timeElapsed;
  if (timeElapsed >= uS2Ticks)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  returnResult = 3;
  goto <bb 7>; [INV]

  <bb 6> :
  _6 = base->MCR;
  _7 = _6 & 1048576;
  if (_7 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  D.10268 = returnResult;
  timeStart = {CLOBBER};

  <bb 8> :
<L8>:
  return D.10268;

}


FlexCAN_ExitFreezeMode (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnValue;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType D.10260;
  long unsigned int D.10257;

  <bb 2> :
  timeStart = 0;
  timeElapsed = 0;
  uS2Ticks = OsIf_MicrosToTicks (100, 0);
  returnValue = 0;
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_04 ();
  _1 = base->MCR;
  _2 = _1 & 4026531839;
  base->MCR = _2;
  _3 = base->MCR;
  _4 = _3 & 3221225471;
  base->MCR = _4;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_04 ();
  _5 = OsIf_GetCounter (0);
  timeStart = _5;
  goto <bb 5>; [INV]

  <bb 3> :
  D.10257 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.10257 + timeElapsed;
  if (timeElapsed >= uS2Ticks)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  returnValue = 3;
  goto <bb 6>; [INV]

  <bb 5> :
  _6 = base->MCR;
  _7 = _6 & 16777216;
  if (_7 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  D.10260 = returnValue;
  timeStart = {CLOBBER};

  <bb 7> :
<L6>:
  return D.10260;

}


FlexCAN_Enable (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnValue;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType D.10254;
  long unsigned int D.10251;

  <bb 2> :
  timeStart = 0;
  timeElapsed = 0;
  uS2Ticks = OsIf_MicrosToTicks (100, 0);
  returnValue = 0;
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_03 ();
  _1 = base->MCR;
  _2 = _1 & 2147483647;
  base->MCR = _2;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_03 ();
  _3 = OsIf_GetCounter (0);
  timeStart = _3;
  goto <bb 5>; [INV]

  <bb 3> :
  D.10251 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.10251 + timeElapsed;
  if (timeElapsed >= uS2Ticks)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  returnValue = 3;
  goto <bb 6>; [INV]

  <bb 5> :
  _4 = base->MCR;
  _5 = _4 & 16777216;
  if (_5 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  D.10254 = returnValue;
  timeStart = {CLOBBER};

  <bb 7> :
<L6>:
  return D.10254;

}


FlexCAN_EnterFreezeMode (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnResult;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType D.10248;
  long unsigned int D.10245;

  <bb 2> :
  timeStart = 0;
  timeElapsed = 0;
  uS2Ticks = OsIf_MicrosToTicks (100, 0);
  returnResult = 0;
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_02 ();
  _1 = base->MCR;
  _2 = _1 | 1073741824;
  base->MCR = _2;
  _3 = base->MCR;
  _4 = _3 | 268435456;
  base->MCR = _4;
  _5 = base->MCR;
  _6 = (signed int) _5;
  if (_6 < 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _7 = base->MCR;
  _8 = _7 & 2147483647;
  base->MCR = _8;

  <bb 4> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_02 ();
  _9 = OsIf_GetCounter (0);
  timeStart = _9;
  goto <bb 7>; [INV]

  <bb 5> :
  D.10245 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.10245 + timeElapsed;
  if (timeElapsed >= uS2Ticks)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  returnResult = 3;
  goto <bb 8>; [INV]

  <bb 7> :
  _10 = base->MCR;
  _11 = _10 & 16777216;
  if (_11 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  D.10248 = returnResult;
  timeStart = {CLOBBER};

  <bb 9> :
<L8>:
  return D.10248;

}


FlexCAN_GetMaxMbNum (const struct FLEXCAN_Type * base)
{
  static const uint32 maxMbNum[6] = {96, 64, 64, 32, 32, 32};
  static struct FLEXCAN_Type * const flexcanBase[6] = {1076903936B, 1076920320B, 1076936704B, 1076953088B, 1076969472B, 1076985856B};
  uint32 ret;
  uint32 i;
  uint32 D.10241;

  <bb 2> :
  ret = 0;
  i = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = flexcanBase[i];
  if (base == _1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  ret = maxMbNum[i];

  <bb 5> :
  i = i + 1;

  <bb 6> :
  if (i <= 5)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  D.10241 = ret;

  <bb 8> :
<L5>:
  return D.10241;

}


FlexCAN_GetMsgBuffRegion (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  volatile uint32 * pAddressRet;
  volatile uint32 * RAM;
  uint8 payload_size;
  uint32 mb_index;
  uint8 maxMbNum;
  uint8 i;
  uint32 msgBuffIdxBackup;
  uint32 ramBlockOffset;
  uint32 ramBlockSize;
  uint8 mb_size;
  uint8 arbitration_field_size;
  volatile uint32 * D.10237;

  <bb 2> :
  arbitration_field_size = 8;
  mb_size = 0;
  ramBlockSize = 512;
  ramBlockOffset = 0;
  msgBuffIdxBackup = msgBuffIdx;
  i = 0;
  maxMbNum = 0;
  mb_index = 0;
  payload_size = 0;
  base.2_1 = (long unsigned int) base;
  _2 = base.2_1 + 128;
  RAM = (volatile uint32 *) _2;
  pAddressRet = 0B;
  i = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  payload_size = FlexCAN_GetPayloadSize (base, i);
  mb_size = payload_size + arbitration_field_size;
  _3 = (long unsigned int) mb_size;
  _4 = ramBlockSize / _3;
  maxMbNum = (uint8) _4;
  _5 = (long unsigned int) maxMbNum;
  if (msgBuffIdxBackup < _5)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  goto <bb 7>; [INV]

  <bb 5> :
  ramBlockOffset = ramBlockOffset + 128;
  _6 = (long unsigned int) maxMbNum;
  msgBuffIdxBackup = msgBuffIdxBackup - _6;
  i.3_7 = i;
  i = i.3_7 + 1;

  <bb 6> :
  if (i <= 2)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _8 = (long unsigned int) maxMbNum;
  _9 = msgBuffIdxBackup % _8;
  _10 = mb_size >> 2;
  _11 = (long unsigned int) _10;
  _12 = _9 * _11;
  mb_index = ramBlockOffset + _12;
  _13 = mb_index * 4;
  pAddressRet = RAM + _13;
  D.10237 = pAddressRet;

  <bb 8> :
<L5>:
  return D.10237;

}


FlexCAN_ComputePayloadSize (uint8 dlcValue)
{
  uint8 ret;
  uint8 D.10233;

  <bb 2> :
  ret = 8;
  if (dlcValue <= 8)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ret = dlcValue;
  goto <bb 13>; [INV]

  <bb 4> :
  _1 = (int) dlcValue;
  switch (_1) <default: <L9> [INV], case 9: <L2> [INV], case 10: <L3> [INV], case 11: <L4> [INV], case 12: <L5> [INV], case 13: <L6> [INV], case 14: <L7> [INV], case 15: <L8> [INV]>

  <bb 5> :
<L2>:
  ret = 12;
  goto <bb 13>; [INV]

  <bb 6> :
<L3>:
  ret = 16;
  goto <bb 13>; [INV]

  <bb 7> :
<L4>:
  ret = 20;
  goto <bb 13>; [INV]

  <bb 8> :
<L5>:
  ret = 24;
  goto <bb 13>; [INV]

  <bb 9> :
<L6>:
  ret = 32;
  goto <bb 13>; [INV]

  <bb 10> :
<L7>:
  ret = 48;
  goto <bb 13>; [INV]

  <bb 11> :
<L8>:
  ret = 64;
  goto <bb 13>; [INV]

  <bb 12> :
<L9>:

  <bb 13> :
  D.10233 = ret;

  <bb 14> :
<L12>:
  return D.10233;

}


FlexCAN_ClearRAM (struct FLEXCAN_Type * base)
{
  uint32 ram_addr;
  volatile uint32 * RAM;
  uint32 RXIMR_size;
  uint32 RAM_size;
  uint32 databyte;

  <bb 2> :
  _1 = FlexCAN_GetMaxMbNum (base);
  RAM_size = _1 * 4;
  RXIMR_size = FlexCAN_GetMaxMbNum (base);
  base.0_2 = (long unsigned int) base;
  _3 = base.0_2 + 128;
  RAM = (volatile uint32 *) _3;
  databyte = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _4 = databyte * 4;
  _5 = RAM + _4;
  *_5 = 0;
  databyte = databyte + 1;

  <bb 4> :
  if (databyte < RAM_size)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  RAM = &base->RXIMR;
  databyte = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  _6 = databyte * 4;
  _7 = RAM + _6;
  *_7 = 0;
  databyte = databyte + 1;

  <bb 7> :
  if (databyte < RXIMR_size)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _8 = base->CTRL2;
  _9 = _8 | 268435456;
  base->CTRL2 = _9;
  base.1_10 = (long unsigned int) base;
  ram_addr = base.1_10 + 128;
  RAM = (volatile uint32 *) ram_addr;
  base->RXMGMASK = 0;
  base->RXFGMASK = 0;
  base->RX14MASK = 0;
  base->RX15MASK = 0;
  databyte = 0;
  goto <bb 10>; [INV]

  <bb 9> :
  _11 = databyte * 4;
  _12 = RAM + _11;
  *_12 = 0;
  databyte = databyte + 1;

  <bb 10> :
  if (databyte == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  _13 = base->CTRL2;
  _14 = _13 & 4026531839;
  base->CTRL2 = _14;
  return;

}


FlexCAN_ComputeDLCValue (uint8 payloadSize)
{
  static const uint8 payload_code[65] = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\t\t\t\n\n\n\n\v\v\v\v\f\f\f\f\r\r\r\r\r\r\r\r\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f";
  uint32 ret;
  uint8 D.10228;

  <bb 2> :
  ret = 255;
  if (payloadSize <= 64)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = (int) payloadSize;
  _2 = payload_code[_1];
  ret = (uint32) _2;

  <bb 4> :
  D.10228 = (uint8) ret;

  <bb 5> :
<L3>:
  return D.10228;

}


FlexCAN_CanBitSampling (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.18;

  <bb 2> :
  _1 = base->CTRL1;
  _2 = _1 & 4294967167;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.18 = 128;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.18 = 0;

  <bb 5> :
  _3 = iftmp.18 | _2;
  base->CTRL1 = _3;
  return;

}


FlexCAN_SetEdgeFilter (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.21;

  <bb 2> :
  _1 = base->CTRL2;
  _2 = _1 & 4294965247;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.21 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.21 = 2048;

  <bb 5> :
  _3 = iftmp.21 | _2;
  base->CTRL2 = _3;
  return;

}


FlexCAN_SetBusOffAutorecovery (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.19;

  <bb 2> :
  _1 = base->CTRL1;
  _2 = _1 & 4294967231;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.19 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.19 = 64;

  <bb 5> :
  _3 = iftmp.19 | _2;
  base->CTRL1 = _3;
  return;

}


FlexCAN_SetRemoteReqStore (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.20;

  <bb 2> :
  _1 = base->CTRL2;
  _2 = _1 & 4294836223;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.20 = 131072;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.20 = 0;

  <bb 5> :
  _3 = iftmp.20 | _2;
  base->CTRL2 = _3;
  return;

}


FlexCAN_SetProtocolException (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.17;

  <bb 2> :
  _1 = base->CTRL2;
  _2 = _1 & 4294950911;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.17 = 16384;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.17 = 0;

  <bb 5> :
  _3 = iftmp.17 | _2;
  base->CTRL2 = _3;
  return;

}


FlexCAN_SetEntireFrameArbitrationFieldComparison (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.16;

  <bb 2> :
  _1 = base->CTRL2;
  _2 = _1 & 4294901759;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.16 = 65536;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.16 = 0;

  <bb 5> :
  _3 = iftmp.16 | _2;
  base->CTRL2 = _3;
  return;

}


FlexCAN_SetIsoCan (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.15;

  <bb 2> :
  _1 = base->CTRL2;
  _2 = _1 & 4294963199;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.15 = 4096;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.15 = 0;

  <bb 5> :
  _3 = iftmp.15 | _2;
  base->CTRL2 = _3;
  return;

}


FlexCAN_IsFDEnabled (const struct FLEXCAN_Type * base)
{
  boolean D.10307;

  <bb 2> :
  _1 = base->MCR;
  _2 = _1 & 2048;
  D.10307 = _2 != 0;

  <bb 3> :
<L0>:
  return D.10307;

}


FlexCAN_SetSelfReception (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.10;

  <bb 2> :
  _1 = base->MCR;
  _2 = _1 & 4294836223;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.10 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.10 = 131072;

  <bb 5> :
  _3 = iftmp.10 | _2;
  base->MCR = _3;
  return;

}


