
Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

SchM_Exit_Can_CAN_EXCLUSIVE_AREA_20/171 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_20) @071b7a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ManualBusOffRecovery/121 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_20/170 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_20) @071b79a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ManualBusOffRecovery/121 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_10/169 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_10) @071b7620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/119 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_10/168 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_10) @071b7540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/119 
  Calls: 
FlexCAN_SetErrIntCmd/167 (FlexCAN_SetErrIntCmd) @071b70e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetErrorInt_Privileged/115 FlexCAN_Ip_SetErrorInt_Privileged/115 FlexCAN_Ip_SetErrorInt_Privileged/115 FlexCAN_Ip_SetErrorInt_Privileged/115 FlexCAN_Ip_SetErrorInt_Privileged/115 
  Calls: 
FlexCAN_DisableInterrupts/166 (FlexCAN_DisableInterrupts) @071a7ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_DisableInterrupts_Privileged/114 
  Calls: 
FlexCAN_EnableInterrupts/165 (FlexCAN_EnableInterrupts) @071a7d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_EnableInterrupts_Privileged/113 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_17/164 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_17) @071a78c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/110 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_17/163 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_17) @071a77e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/110 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_16/162 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_16) @071a7460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetTDCOffset_Privileged/109 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_16/161 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_16) @071a7380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetTDCOffset_Privileged/109 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_15/160 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_15) @07197e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetBitrateCbt_Privileged/107 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_15/159 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_15) @07197d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetBitrateCbt_Privileged/107 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_09/158 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_09) @071979a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ClearTDCFail/104 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_09/157 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_09) @071978c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ClearTDCFail/104 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_14/156 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_14) @071970e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetBitrate_Privileged/102 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_14/155 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_14) @07197000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetBitrate_Privileged/102 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_08/154 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_08) @07182d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetRxMaskType_Privileged/101 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_08/153 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_08) @07182c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetRxMaskType_Privileged/101 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_07/152 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_07) @071829a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetStartMode_Privileged/99 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_07/151 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_07) @071828c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetStartMode_Privileged/99 
  Calls: 
FlexCAN_GetMaxMbNum/150 (FlexCAN_GetMaxMbNum) @071821c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_SetRegDefaultVal/47 FlexCAN_SetRegDefaultVal/47 
  Calls: 
FlexCAN_ExitFreezeMode/149 (FlexCAN_ExitFreezeMode) @07170b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetStartMode_Privileged/99 FlexCAN_Ip_ExitFreezeMode_Privileged/90 
  Calls: 
FlexCAN_SetEnhancedRxFifoFilter/148 (FlexCAN_SetEnhancedRxFifoFilter) @07151540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ConfigEnhancedRxFifo_Privileged/77 
  Calls: 
FlexCAN_SetRxFifoFilter/147 (FlexCAN_SetRxFifoFilter) @07151380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ConfigRxFifo_Privileged/76 
  Calls: 
FlexCAN_Enable/146 (FlexCAN_Enable) @071512a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/119 FlexCAN_Ip_SetRxMb15Mask_Privileged/118 FlexCAN_Ip_SetRxMb14Mask_Privileged/117 FlexCAN_Ip_SetErrorInt_Privileged/115 FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/110 FlexCAN_Ip_SetTDCOffset_Privileged/109 FlexCAN_Ip_SetBitrateCbt_Privileged/107 FlexCAN_Ip_SetBitrate_Privileged/102 FlexCAN_Ip_SetRxMaskType_Privileged/101 FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/92 FlexCAN_Ip_SetRxIndividualMask_Privileged/91 FlexCAN_Ip_SetRxMbGlobalMask_Privileged/88 FlexCAN_Ip_ConfigEnhancedRxFifo_Privileged/77 FlexCAN_Ip_ConfigRxFifo_Privileged/76 
  Calls: 
FlexCAN_IsEnhancedRxFifoAvailable/145 (FlexCAN_IsEnhancedRxFifoAvailable) @0713bee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_DisableInterrupts_Privileged/114 FlexCAN_Ip_EnableInterrupts_Privileged/113 FlexCAN_Ip_MainFunctionRead/94 FlexCAN_Ip_RxFifoBlocking/75 FlexCAN_Ip_RxFifo/74 FlexCAN_SetRegDefaultVal/47 
  Calls: 
FlexCAN_SetRxMsgBuff/144 (FlexCAN_SetRxMsgBuff) @0713ba80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ConfigRxMb/71 FlexCAN_Ip_ConfigRxMb/71 FlexCAN_Ip_ConfigRxMb/71 
  Calls: 
FlexCAN_SetOperationMode/143 (FlexCAN_SetOperationMode) @0713b700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_Init_Privileged/69 
  Calls: 
FLEXCAN_ClearMsgBuffIntCmd/142 (FLEXCAN_ClearMsgBuffIntCmd) @0713b460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_AbortTransfer/116 FlexCAN_AbortRxTransfer/68 
  Calls: 
FlexCAN_ReadEnhancedRxFifo/141 (FlexCAN_ReadEnhancedRxFifo) @0713b0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_IRQHandlerEnhancedRxFIFO/66 
  Calls: 
FlexCAN_GetMsgBuffTimestamp/140 (FlexCAN_GetMsgBuffTimestamp) @0706bee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_MainFunctionWrite/96 FlexCAN_IRQHandlerTxMB/62 
  Calls: 
FlexCAN_GetMsgBuff/139 (FlexCAN_GetMsgBuff) @0706bc40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_MainFunctionWrite/96 FlexCAN_IRQHandlerTxMB/62 FlexCAN_IRQHandlerRxMB/61 
  Calls: 
FlexCAN_LockRxMsgBuff/138 (FlexCAN_LockRxMsgBuff) @0706bb60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_MainFunctionWrite/96 FlexCAN_IRQHandlerTxMB/62 FlexCAN_IRQHandlerRxMB/61 
  Calls: 
FlexCAN_SetTxMsgBuff/137 (FlexCAN_SetTxMsgBuff) @0706b8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ConfigRemoteResponseMb/78 FlexCAN_StartSendData/59 
  Calls: 
FlexCAN_GetMsgBuffRegion/136 (FlexCAN_GetMsgBuffRegion) @0706b7e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SendBlocking/87 FlexCAN_Ip_ConfigRemoteResponseMb/78 FlexCAN_AbortRxTransfer/68 FlexCAN_AbortRxTransfer/68 FlexCAN_AbortTxTransfer/67 FlexCAN_StartSendData/59 
  Calls: 
FlexCAN_ReadRxFifo/135 (FlexCAN_ReadRxFifo) @0706b460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_IRQHandlerRxFIFO/63 
  Calls: 
FlexCAN_SetMsgBuffIntCmd/134 (FlexCAN_SetMsgBuffIntCmd) @0706b1c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_ProccessLegacyRxFIFO/57 FlexCAN_ProccessLegacyRxFIFO/57 FlexCAN_ProccessLegacyRxFIFO/57 FlexCAN_CompleteRxMessageFifoData/80 FlexCAN_CompleteRxMessageFifoData/80 FlexCAN_CompleteRxMessageFifoData/80 FlexCAN_Ip_ConfigRemoteResponseMb/78 FlexCAN_Ip_ReceiveBlocking/73 FlexCAN_Ip_ReceiveBlocking/73 FlexCAN_Ip_Receive/72 FlexCAN_Ip_Send/70 FlexCAN_IRQHandlerTxMB/62 FlexCAN_IRQHandlerTxMB/62 FlexCAN_IRQHandlerRxMB/61 FlexCAN_IRQHandlerRxMB/61 FlexCAN_StartRxMessageFifoData/60 FlexCAN_StartRxMessageFifoData/60 FlexCAN_StartRxMessageFifoData/60 
  Calls: 
OsIf_GetElapsed/133 (OsIf_GetElapsed) @07042e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ManualBusOffRecovery/121 FlexCAN_Ip_SendBlocking/87 FlexCAN_Ip_SendBlocking/87 FlexCAN_ProccessLegacyRxFIFO/57 FlexCAN_Ip_ReceiveBlocking/73 FlexCAN_AbortTxTransfer/67 FlexCAN_ProccessEnhancedRxFifo/56 
  Calls: 
OsIf_GetCounter/132 (OsIf_GetCounter) @07042d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ManualBusOffRecovery/121 FlexCAN_Ip_SendBlocking/87 FlexCAN_Ip_SendBlocking/87 FlexCAN_ProccessLegacyRxFIFO/57 FlexCAN_Ip_ReceiveBlocking/73 FlexCAN_AbortTxTransfer/67 FlexCAN_ProccessEnhancedRxFifo/56 
  Calls: 
OsIf_MicrosToTicks/131 (OsIf_MicrosToTicks) @07042c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ManualBusOffRecovery/121 FlexCAN_Ip_SendBlocking/87 FlexCAN_Ip_SendBlocking/87 FlexCAN_ProccessLegacyRxFIFO/57 FlexCAN_Ip_ReceiveBlocking/73 FlexCAN_AbortTxTransfer/67 FlexCAN_ProccessEnhancedRxFifo/56 
  Calls: 
FlexCAN_ResetImaskBuff/130 (FlexCAN_ResetImaskBuff) @0703be00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_InitController/52 
  Calls: 
FlexCAN_ConfigCtrlOptions/129 (FlexCAN_ConfigCtrlOptions) @0703bd20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_InitController/52 
  Calls: 
FlexCAN_Init/128 (FlexCAN_Init) @0703bc40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_InitController/52 
  Calls: 
FlexCAN_SetMaxMsgBuffNum/127 (FlexCAN_SetMaxMsgBuffNum) @0703b9a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_InitCtroll/51 
  Calls: 
FlexCAN_SetPayloadSize/126 (FlexCAN_SetPayloadSize) @0703b8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_InitCtroll/51 
  Calls: 
FlexCAN_Disable/125 (FlexCAN_Disable) @0703b7e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/119 FlexCAN_Ip_SetRxMb15Mask_Privileged/118 FlexCAN_Ip_SetRxMb14Mask_Privileged/117 FlexCAN_Ip_SetErrorInt_Privileged/115 FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/110 FlexCAN_Ip_SetTDCOffset_Privileged/109 FlexCAN_Ip_SetBitrateCbt_Privileged/107 FlexCAN_Ip_SetBitrate_Privileged/102 FlexCAN_Ip_SetRxMaskType_Privileged/101 FlexCAN_Ip_SetStopMode_Privileged/100 FlexCAN_Ip_Deinit_Privileged/93 FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/92 FlexCAN_Ip_SetRxIndividualMask_Privileged/91 FlexCAN_Ip_SetRxMbGlobalMask_Privileged/88 FlexCAN_Ip_ConfigEnhancedRxFifo_Privileged/77 FlexCAN_Ip_ConfigRxFifo_Privileged/76 FlexCAN_InitController/52 FlexCAN_InitController/52 FlexCAN_InitCtroll/51 
  Calls: 
FlexCAN_EnterFreezeMode/124 (FlexCAN_EnterFreezeMode) @0703b700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetStopMode_Privileged/100 FlexCAN_Ip_Deinit_Privileged/93 FlexCAN_Ip_EnterFreezeMode_Privileged/89 FlexCAN_InitController/52 FlexCAN_InitController/52 FlexCAN_InitCtroll/51 
  Calls: 
FlexCAN_EnableEnhancedRxFifo/123 (FlexCAN_EnableEnhancedRxFifo) @0703b540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_InitRxFifo/50 
  Calls: 
FlexCAN_EnableRxFifo/122 (FlexCAN_EnableRxFifo) @0703b460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_InitRxFifo/50 
  Calls: 
FlexCAN_Ip_ManualBusOffRecovery/121 (FlexCAN_Ip_ManualBusOffRecovery) @0703b000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: OsIf_GetElapsed/133 OsIf_GetCounter/132 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_20/171 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_20/170 OsIf_MicrosToTicks/131 
FlexCAN_Ip_GetListenOnlyMode/120 (FlexCAN_Ip_GetListenOnlyMode) @07030b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_IsListenOnlyModeEnabled/27 
FlexCAN_Ip_SetListenOnlyMode_Privileged/119 (FlexCAN_Ip_SetListenOnlyMode_Privileged) @07030620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/125 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_10/169 FlexCAN_SetListenOnlyMode/6 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_10/168 FlexCAN_Enable/146 FlexCAN_IsEnabled/3 
FlexCAN_Ip_SetRxMb15Mask_Privileged/118 (FlexCAN_Ip_SetRxMb15Mask_Privileged) @070300e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/125 FlexCAN_Enable/146 FlexCAN_IsEnabled/3 
FlexCAN_Ip_SetRxMb14Mask_Privileged/117 (FlexCAN_Ip_SetRxMb14Mask_Privileged) @07030d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/125 FlexCAN_Enable/146 FlexCAN_IsEnabled/3 
FlexCAN_Ip_AbortTransfer/116 (FlexCAN_Ip_AbortTransfer) @07030a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_AbortRxTransfer/68 FlexCAN_AbortTxTransfer/67 FLEXCAN_ClearMsgBuffIntCmd/142 
FlexCAN_Ip_SetErrorInt_Privileged/115 (FlexCAN_Ip_SetErrorInt_Privileged) @070307e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/125 FlexCAN_SetErrIntCmd/167 FlexCAN_SetErrIntCmd/167 FlexCAN_SetErrIntCmd/167 FlexCAN_SetErrIntCmd/167 FlexCAN_SetErrIntCmd/167 FlexCAN_Enable/146 FlexCAN_IsEnabled/3 
FlexCAN_Ip_DisableInterrupts_Privileged/114 (FlexCAN_Ip_DisableInterrupts_Privileged) @07030540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_SetEnhancedRxFifoIntAll/43 FlexCAN_IsEnhancedRxFifoEnabled/42 FlexCAN_IsEnhancedRxFifoAvailable/145 FlexCAN_DisableInterrupts/166 FlexCAN_IsEnabled/3 
FlexCAN_Ip_EnableInterrupts_Privileged/113 (FlexCAN_Ip_EnableInterrupts_Privileged) @070302a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_SetEnhancedRxFifoIntAll/43 FlexCAN_IsEnhancedRxFifoEnabled/42 FlexCAN_IsEnhancedRxFifoAvailable/145 FlexCAN_EnableInterrupts/165 FlexCAN_IsEnabled/3 
FlexCAN_Ip_ClearBuffStatusFlag/112 (FlexCAN_Ip_ClearBuffStatusFlag) @07030000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/8 FlexCAN_ClearEnhancedRxFifoIntStatusFlag/45 
FlexCAN_Ip_GetBuffStatusFlag/111 (FlexCAN_Ip_GetBuffStatusFlag) @06fb4b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetBuffStatusFlag/9 FlexCAN_GetEnhancedRxFIFOStatusFlag/44 
FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/110 (FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged) @06fb4620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/125 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_17/164 FlexCAN_SetTxArbitrationStartDelay/40 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_17/163 FlexCAN_Enable/146 FlexCAN_IsEnabled/3 
FlexCAN_Ip_SetTDCOffset_Privileged/109 (FlexCAN_Ip_SetTDCOffset_Privileged) @06fb40e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/125 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_16/162 FlexCAN_SetTDCOffset/1 FlexCAN_SetEnhancedTDCOffset/2 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_16/161 FlexCAN_Enable/146 FlexCAN_IsEnabled/3 
FlexCAN_Ip_GetBitrateFD/108 (FlexCAN_Ip_GetBitrateFD) @06fb4d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetFDTimeSegments/20 FlexCAN_GetEnhancedDataTimeSegments/17 FlexCAN_IsEnhCbtEnabled/22 
FlexCAN_Ip_SetBitrateCbt_Privileged/107 (FlexCAN_Ip_SetBitrateCbt_Privileged) @06fb4a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/125 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_15/160 FlexCAN_SetFDTimeSegments/11 FlexCAN_SetEnhancedDataTimeSegments/16 FlexCAN_SetFDEnabled/5 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_15/159 FlexCAN_IsEnhCbtEnabled/22 FlexCAN_Enable/146 FlexCAN_IsFDEnabled/26 
FlexCAN_Ip_GetTDCValue/106 (FlexCAN_Ip_GetTDCValue) @06fb47e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_IsEnhCbtEnabled/22 
FlexCAN_Ip_GetTDCFail/105 (FlexCAN_Ip_GetTDCFail) @06fb4540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_IsEnhCbtEnabled/22 
FlexCAN_Ip_ClearTDCFail/104 (FlexCAN_Ip_ClearTDCFail) @06fb42a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Can_CAN_EXCLUSIVE_AREA_09/158 FlexCAN_IsEnhCbtEnabled/22 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_09/157 
FlexCAN_Ip_GetBitrate/103 (FlexCAN_Ip_GetBitrate) @06fb4000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetTimeSegments/19 FlexCAN_GetExtendedTimeSegments/18 FlexCAN_IsExCbtEnabled/21 FlexCAN_GetEnhancedNominalTimeSegments/15 FlexCAN_IsEnhCbtEnabled/22 
FlexCAN_Ip_SetBitrate_Privileged/102 (FlexCAN_Ip_SetBitrate_Privileged) @06fa9b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/125 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_14/156 FlexCAN_SetTimeSegments/12 FlexCAN_SetExtendedTimeSegments/13 FlexCAN_IsExCbtEnabled/21 FlexCAN_SetEnhancedNominalTimeSegments/14 FlexCAN_EnhCbtEnable/23 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_14/155 FlexCAN_Enable/146 
FlexCAN_Ip_SetRxMaskType_Privileged/101 (FlexCAN_Ip_SetRxMaskType_Privileged) @06fa9620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/125 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_08/154 FlexCAN_SetRxMaskType/41 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_08/153 FlexCAN_Enable/146 FlexCAN_IsEnabled/3 
FlexCAN_Ip_SetStopMode_Privileged/100 (FlexCAN_Ip_SetStopMode_Privileged) @06fa90e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/125 FlexCAN_EnterFreezeMode/124 
FlexCAN_Ip_SetStartMode_Privileged/99 (FlexCAN_Ip_SetStartMode_Privileged) @06fa9d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ExitFreezeMode/149 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_07/152 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_07/151 
FlexCAN_Ip_GetStartMode_Privileged/98 (FlexCAN_Ip_GetStartMode_Privileged) @06fa9a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FlexCAN_Ip_GetStopMode_Privileged/97 (FlexCAN_Ip_GetStopMode_Privileged) @06fa97e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FlexCAN_Ip_MainFunctionWrite/96 (FlexCAN_Ip_MainFunctionWrite) @06fa9540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/8 FlexCAN_UnlockRxMsgBuff/7 FlexCAN_GetMsgBuffTimestamp/140 FlexCAN_ClearMsgBuffIntStatusFlag/8 FlexCAN_UnlockRxMsgBuff/7 FlexCAN_GetMsgBuff/139 FlexCAN_LockRxMsgBuff/138 FlexCAN_GetBuffStatusFlag/9 
   Indirect call Num speculative call targets: 0
FlexCAN_Ip_MainFunctionBusOff_Privileged/95 (FlexCAN_Ip_MainFunctionBusOff_Privileged) @06fa92a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
FlexCAN_Ip_MainFunctionRead/94 (FlexCAN_Ip_MainFunctionRead) @06fa9000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_IRQHandlerRxMB/61 FlexCAN_GetBuffStatusFlag/9 FlexCAN_IRQHandlerRxFIFO/63 FlexCAN_GetBuffStatusFlag/9 FlexCAN_IRQHandlerEnhancedRxFIFO/66 FlexCAN_GetEnhancedRxFIFOStatusFlag/44 FlexCAN_IsEnhancedRxFifoEnabled/42 FlexCAN_IsEnhancedRxFifoAvailable/145 
FlexCAN_Ip_Deinit_Privileged/93 (FlexCAN_Ip_Deinit_Privileged) @06f9cb60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/125 FlexCAN_SetRegDefaultVal/47 FlexCAN_EnterFreezeMode/124 
FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/92 (FlexCAN_Ip_SetRxFifoGlobalMask_Privileged) @06f9c620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/125 FlexCAN_SetRxFifoGlobalMask/0 FlexCAN_Enable/146 FlexCAN_IsEnabled/3 
FlexCAN_Ip_SetRxIndividualMask_Privileged/91 (FlexCAN_Ip_SetRxIndividualMask_Privileged) @06f9c0e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/125 FlexCAN_SetRxIndividualMask/38 FlexCAN_Enable/146 FlexCAN_IsEnabled/3 
FlexCAN_Ip_ExitFreezeMode_Privileged/90 (FlexCAN_Ip_ExitFreezeMode_Privileged) @06f9cd20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ExitFreezeMode/149 
FlexCAN_Ip_EnterFreezeMode_Privileged/89 (FlexCAN_Ip_EnterFreezeMode_Privileged) @06f9ca80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_EnterFreezeMode/124 
FlexCAN_Ip_SetRxMbGlobalMask_Privileged/88 (FlexCAN_Ip_SetRxMbGlobalMask_Privileged) @06f9c7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/125 FlexCAN_SetRxMsgBuffGlobalMask/37 FlexCAN_Enable/146 FlexCAN_IsEnabled/3 
FlexCAN_Ip_SendBlocking/87 (FlexCAN_Ip_SendBlocking) @06f9c540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/8 FlexCAN_GetBuffStatusFlag/9 OsIf_GetElapsed/133 OsIf_GetCounter/132 OsIf_MicrosToTicks/131 FlexCAN_GetMsgBuffRegion/136 FlexCAN_ClearMsgBuffIntStatusFlag/8 FlexCAN_GetBuffStatusFlag/9 OsIf_GetElapsed/133 OsIf_GetCounter/132 FlexCAN_StartSendData/59 OsIf_MicrosToTicks/131 
FlexCAN_Busoff_Error_IRQHandler/86 (FlexCAN_Busoff_Error_IRQHandler) @06f9c2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
FlexCAN_Ip_GetControllerRxErrorCounter/85 (FlexCAN_Ip_GetControllerRxErrorCounter) @06f9c000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FlexCAN_Ip_GetControllerTxErrorCounter/84 (FlexCAN_Ip_GetControllerTxErrorCounter) @06f91b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FlexCAN_Ip_GetErrorStatus/83 (FlexCAN_Ip_GetErrorStatus) @06f91620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FlexCAN_Ip_ClearErrorStatus/82 (FlexCAN_Ip_ClearErrorStatus) @06f910e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FlexCAN_IRQHandler/81 (FlexCAN_IRQHandler) @06f91d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ClearEnhancedRxFifoIntStatusFlag/45 FlexCAN_ClearEnhancedRxFifoIntStatusFlag/45 FlexCAN_ClearEnhancedRxFifoIntStatusFlag/45 FlexCAN_ClearEnhancedRxFifoIntStatusFlag/45 FlexCAN_ClearMsgBuffIntStatusFlag/8 FlexCAN_ProcessSpuriousInterruptMB/64 FlexCAN_ProcessIRQHandlerEnhancedRxFIFO/65 FlexCAN_IsEnhancedRxFifoEnabled/42 FlexCAN_ClearMsgBuffIntStatusFlag/8 FlexCAN_GetMsgBuffIntStatusFlag/36 FlexCAN_IRQHandlerTxMB/62 FlexCAN_IRQHandlerRxMB/61 FlexCAN_IRQHandlerRxFIFO/63 FlexCAN_GetMsgBuffIntStatusFlag/36 FlexCAN_GetMsgBuffIntStatusFlag/36 
FlexCAN_CompleteRxMessageFifoData/80 (FlexCAN_CompleteRxMessageFifoData) @06f91a80
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_IRQHandlerRxFIFO/63 
  Calls: FlexCAN_SetMsgBuffIntCmd/134 FlexCAN_SetMsgBuffIntCmd/134 FlexCAN_SetMsgBuffIntCmd/134 
FlexCAN_Ip_GetTransferStatus/79 (FlexCAN_Ip_GetTransferStatus) @06f917e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FlexCAN_Ip_ConfigRemoteResponseMb/78 (FlexCAN_Ip_ConfigRemoteResponseMb) @06f91540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_SetMsgBuffIntCmd/134 FlexCAN_SetTxMsgBuff/137 FlexCAN_GetMsgBuffRegion/136 FlexCAN_ClearMsgBuffIntStatusFlag/8 
FlexCAN_Ip_ConfigEnhancedRxFifo_Privileged/77 (FlexCAN_Ip_ConfigEnhancedRxFifo_Privileged) @06f912a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/125 FlexCAN_SetEnhancedRxFifoFilter/148 FlexCAN_Enable/146 FlexCAN_IsEnabled/3 
FlexCAN_Ip_ConfigRxFifo_Privileged/76 (FlexCAN_Ip_ConfigRxFifo_Privileged) @06f91000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/125 FlexCAN_SetRxFifoFilter/147 FlexCAN_Enable/146 FlexCAN_IsEnabled/3 
FlexCAN_Ip_RxFifoBlocking/75 (FlexCAN_Ip_RxFifoBlocking) @0712db60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ProccessLegacyRxFIFO/57 FlexCAN_StartRxMessageFifoData/60 FlexCAN_ProccessLegacyRxFIFO/57 FlexCAN_StartRxMessageFifoData/60 FlexCAN_ProccessEnhancedRxFifo/56 FlexCAN_StartRxMessageEnhancedFifoData/55 FlexCAN_IsEnhancedRxFifoEnabled/42 FlexCAN_IsEnhancedRxFifoAvailable/145 
FlexCAN_Ip_RxFifo/74 (FlexCAN_Ip_RxFifo) @0712d620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_StartRxMessageFifoData/60 FlexCAN_StartRxMessageFifoData/60 FlexCAN_StartRxMessageEnhancedFifoData/55 FlexCAN_IsEnhancedRxFifoEnabled/42 FlexCAN_IsEnhancedRxFifoAvailable/145 
FlexCAN_Ip_ReceiveBlocking/73 (FlexCAN_Ip_ReceiveBlocking) @0712d0e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxState/49 (read) Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_SetMsgBuffIntCmd/134 OsIf_GetElapsed/133 FlexCAN_IRQHandlerRxMB/61 FlexCAN_GetBuffStatusFlag/9 OsIf_GetCounter/132 FlexCAN_SetMsgBuffIntCmd/134 FlexCAN_StartRxMessageBufferData/58 OsIf_MicrosToTicks/131 
FlexCAN_Ip_Receive/72 (FlexCAN_Ip_Receive) @0712dd20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_SetMsgBuffIntCmd/134 FlexCAN_StartRxMessageBufferData/58 
FlexCAN_Ip_ConfigRxMb/71 (FlexCAN_Ip_ConfigRxMb) @0712da80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_SetRxMsgBuff/144 FlexCAN_SetRxMsgBuff/144 FlexCAN_SetRxMsgBuff/144 FlexCAN_ClearMsgBuffIntStatusFlag/8 
FlexCAN_Ip_Send/70 (FlexCAN_Ip_Send) @0712d7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_SetMsgBuffIntCmd/134 FlexCAN_StartSendData/59 FlexCAN_IsListenOnlyModeEnabled/27 
FlexCAN_Ip_Init_Privileged/69 (FlexCAN_Ip_Init_Privileged) @0712d540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_SetOperationMode/143 FlexCAN_InitBaudrate/53 FlexCAN_InitController/52 
FlexCAN_AbortRxTransfer/68 (FlexCAN_AbortRxTransfer) @0712d2a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_AbortTransfer/116 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/8 FlexCAN_GetMsgBuffRegion/136 FLEXCAN_ClearMsgBuffIntCmd/142 FlexCAN_GetMsgBuffRegion/136 RxFifoOcuppiedLastMsgBuff/28 
FlexCAN_AbortTxTransfer/67 (FlexCAN_AbortTxTransfer) @0712d000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_AbortTransfer/116 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/8 FlexCAN_GetBuffStatusFlag/9 OsIf_GetElapsed/133 OsIf_GetCounter/132 OsIf_MicrosToTicks/131 FlexCAN_GetMsgBuffRegion/136 
FlexCAN_IRQHandlerEnhancedRxFIFO/66 (FlexCAN_IRQHandlerEnhancedRxFIFO) @0711cb60
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_MainFunctionRead/94 FlexCAN_ProcessIRQHandlerEnhancedRxFIFO/65 FlexCAN_ProccessEnhancedRxFifo/56 
  Calls: FlexCAN_ClearEnhancedRxFifoIntStatusFlag/45 FlexCAN_ClearEnhancedRxFifoIntStatusFlag/45 FlexCAN_ClearEnhancedRxFifoIntStatusFlag/45 FlexCAN_CompleteRxMessageEnhancedFifoData/54 FlexCAN_ClearEnhancedRxFifoIntStatusFlag/45 FlexCAN_ClearEnhancedRxFifoIntStatusFlag/45 FlexCAN_ClearEnhancedRxFifoIntStatusFlag/45 FlexCAN_ReadEnhancedRxFifo/141 
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
FlexCAN_ProcessIRQHandlerEnhancedRxFIFO/65 (FlexCAN_ProcessIRQHandlerEnhancedRxFIFO) @0711c620
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_IRQHandler/81 
  Calls: FlexCAN_ClearEnhancedRxFifoIntStatusFlag/45 FlexCAN_IRQHandlerEnhancedRxFIFO/66 FlexCAN_GetEnhancedRxFIFOIntStatusFlag/46 FlexCAN_GetEnhancedRxFIFOStatusFlag/44 
FlexCAN_ProcessSpuriousInterruptMB/64 (FlexCAN_ProcessSpuriousInterruptMB) @0711c0e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_IRQHandler/81 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/8 FlexCAN_GetBuffStatusImask/10 FlexCAN_GetBuffStatusFlag/9 
FlexCAN_IRQHandlerRxFIFO/63 (FlexCAN_IRQHandlerRxFIFO) @0711cd20
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_MainFunctionRead/94 FlexCAN_IRQHandler/81 FlexCAN_ProccessLegacyRxFIFO/57 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/8 FlexCAN_ClearMsgBuffIntStatusFlag/8 FlexCAN_CompleteRxMessageFifoData/80 FlexCAN_ClearMsgBuffIntStatusFlag/8 FlexCAN_ReadRxFifo/135 
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
FlexCAN_IRQHandlerTxMB/62 (FlexCAN_IRQHandlerTxMB) @0711ca80
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_IRQHandler/81 
  Calls: FlexCAN_SetMsgBuffIntCmd/134 FlexCAN_SetMsgBuffIntCmd/134 FlexCAN_ClearMsgBuffIntStatusFlag/8 FlexCAN_UnlockRxMsgBuff/7 FlexCAN_GetMsgBuffTimestamp/140 FlexCAN_ClearMsgBuffIntStatusFlag/8 FlexCAN_UnlockRxMsgBuff/7 FlexCAN_GetMsgBuff/139 FlexCAN_LockRxMsgBuff/138 
   Indirect call Num speculative call targets: 0
FlexCAN_IRQHandlerRxMB/61 (FlexCAN_IRQHandlerRxMB) @0711c7e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_MainFunctionRead/94 FlexCAN_IRQHandler/81 FlexCAN_Ip_ReceiveBlocking/73 
  Calls: FlexCAN_SetMsgBuffIntCmd/134 FlexCAN_SetMsgBuffIntCmd/134 FlexCAN_UnlockRxMsgBuff/7 FlexCAN_ClearMsgBuffIntStatusFlag/8 FlexCAN_GetMsgBuff/139 FlexCAN_LockRxMsgBuff/138 
   Indirect call Num speculative call targets: 0
FlexCAN_StartRxMessageFifoData/60 (FlexCAN_StartRxMessageFifoData) @0711c540
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_RxFifoBlocking/75 FlexCAN_Ip_RxFifoBlocking/75 FlexCAN_Ip_RxFifo/74 FlexCAN_Ip_RxFifo/74 
  Calls: FlexCAN_SetMsgBuffIntCmd/134 FlexCAN_SetMsgBuffIntCmd/134 FlexCAN_SetMsgBuffIntCmd/134 
FlexCAN_StartSendData/59 (FlexCAN_StartSendData) @0711c2a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxState/49 (read) Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_SendBlocking/87 FlexCAN_Ip_Send/70 
  Calls: FlexCAN_SetTxMsgBuff/137 FlexCAN_GetMsgBuffRegion/136 FlexCAN_ClearMsgBuffIntStatusFlag/8 
FlexCAN_StartRxMessageBufferData/58 (FlexCAN_StartRxMessageBufferData) @0711c000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_ReceiveBlocking/73 FlexCAN_Ip_Receive/72 
  Calls: 
FlexCAN_ProccessLegacyRxFIFO/57 (FlexCAN_ProccessLegacyRxFIFO) @070c7b60
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxState/49 (read) Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_RxFifoBlocking/75 FlexCAN_Ip_RxFifoBlocking/75 
  Calls: FlexCAN_SetMsgBuffIntCmd/134 FlexCAN_SetMsgBuffIntCmd/134 FlexCAN_SetMsgBuffIntCmd/134 OsIf_GetElapsed/133 FlexCAN_IRQHandlerRxFIFO/63 FlexCAN_GetBuffStatusFlag/9 OsIf_GetCounter/132 OsIf_MicrosToTicks/131 
FlexCAN_ProccessEnhancedRxFifo/56 (FlexCAN_ProccessEnhancedRxFifo) @070c7620
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxState/49 (read) Flexcan_Ip_apxBase/48 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_RxFifoBlocking/75 
  Calls: FlexCAN_SetEnhancedRxFifoIntAll/43 OsIf_GetElapsed/133 FlexCAN_IRQHandlerEnhancedRxFIFO/66 FlexCAN_GetEnhancedRxFIFOStatusFlag/44 OsIf_GetCounter/132 OsIf_MicrosToTicks/131 
FlexCAN_StartRxMessageEnhancedFifoData/55 (FlexCAN_StartRxMessageEnhancedFifoData) @070c70e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_RxFifoBlocking/75 FlexCAN_Ip_RxFifo/74 
  Calls: FlexCAN_SetEnhancedRxFifoIntAll/43 
FlexCAN_CompleteRxMessageEnhancedFifoData/54 (FlexCAN_CompleteRxMessageEnhancedFifoData) @070c7d20
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/48 (read) Flexcan_Ip_apxState/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_IRQHandlerEnhancedRxFIFO/66 
  Calls: FlexCAN_SetEnhancedRxFifoIntAll/43 
FlexCAN_InitBaudrate/53 (FlexCAN_InitBaudrate) @070c7a80
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_Init_Privileged/69 
  Calls: FlexCAN_SetTimeSegments/12 FlexCAN_SetFDTimeSegments/11 FlexCAN_SetExtendedTimeSegments/13 FlexCAN_SetEnhancedDataTimeSegments/16 FlexCAN_SetEnhancedNominalTimeSegments/14 FlexCAN_EnableExtCbt/24 
FlexCAN_InitController/52 (FlexCAN_InitController) @070c77e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_Init_Privileged/69 
  Calls: FlexCAN_InitCtroll/51 FlexCAN_ResetImaskBuff/130 FlexCAN_ConfigCtrlOptions/129 FlexCAN_SetFDEnabled/5 FlexCAN_DisableMemErrorDetection/4 FlexCAN_Disable/125 FlexCAN_EnterFreezeMode/124 FlexCAN_Init/128 FlexCAN_Disable/125 FlexCAN_EnterFreezeMode/124 FlexCAN_IsEnabled/3 
FlexCAN_InitCtroll/51 (FlexCAN_InitCtroll) @070c7540
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_InitController/52 
  Calls: FlexCAN_SetMaxMsgBuffNum/127 FlexCAN_SetPayloadSize/126 FlexCAN_Disable/125 FlexCAN_EnterFreezeMode/124 FlexCAN_InitRxFifo/50 FlexCAN_SetSelfReception/25 
FlexCAN_InitRxFifo/50 (FlexCAN_InitRxFifo) @070c72a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_InitCtroll/51 
  Calls: FlexCAN_EnableEnhancedRxFifo/123 FlexCAN_EnableRxFifo/122 
Flexcan_Ip_apxState/49 (Flexcan_Ip_apxState) @06f27558
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: FlexCAN_Ip_DisableInterrupts_Privileged/114 (read) FlexCAN_ProcessSpuriousInterruptMB/64 (read) FlexCAN_IRQHandlerTxMB/62 (read) FlexCAN_CompleteRxMessageFifoData/80 (read) FlexCAN_Ip_GetTransferStatus/79 (read) FlexCAN_CompleteRxMessageEnhancedFifoData/54 (read) FlexCAN_StartRxMessageEnhancedFifoData/55 (read) FlexCAN_StartRxMessageBufferData/58 (read) FlexCAN_StartSendData/59 (read) FlexCAN_StartRxMessageFifoData/60 (read) FlexCAN_IRQHandlerRxMB/61 (read) FlexCAN_ProccessEnhancedRxFifo/56 (read) FlexCAN_ProcessIRQHandlerEnhancedRxFIFO/65 (read) FlexCAN_AbortTxTransfer/67 (read) FlexCAN_AbortRxTransfer/68 (read) FlexCAN_Ip_Init_Privileged/69 (write) FlexCAN_Ip_Send/70 (read) FlexCAN_Ip_Receive/72 (read) FlexCAN_Ip_ReceiveBlocking/73 (read) FlexCAN_Ip_ConfigRemoteResponseMb/78 (read) FlexCAN_IRQHandlerRxFIFO/63 (read) FlexCAN_IRQHandlerEnhancedRxFIFO/66 (read) FlexCAN_Ip_EnableInterrupts_Privileged/113 (read) FlexCAN_ProccessLegacyRxFIFO/57 (read) FlexCAN_IRQHandler/81 (read) FlexCAN_Busoff_Error_IRQHandler/86 (read) FlexCAN_Ip_SendBlocking/87 (read) FlexCAN_Ip_Deinit_Privileged/93 (write) FlexCAN_Ip_MainFunctionRead/94 (read) FlexCAN_Ip_MainFunctionBusOff_Privileged/95 (read) FlexCAN_Ip_MainFunctionWrite/96 (read) FlexCAN_Ip_AbortTransfer/116 (read) 
  Availability: available
  Varpool flags:
Flexcan_Ip_apxBase/48 (Flexcan_Ip_apxBase) @06f274c8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: FlexCAN_Ip_GetListenOnlyMode/120 (read) FlexCAN_ProcessSpuriousInterruptMB/64 (read) FlexCAN_IRQHandlerTxMB/62 (read) FlexCAN_CompleteRxMessageFifoData/80 (read) FlexCAN_Ip_ConfigRemoteResponseMb/78 (read) FlexCAN_CompleteRxMessageEnhancedFifoData/54 (read) FlexCAN_StartRxMessageEnhancedFifoData/55 (read) FlexCAN_StartSendData/59 (read) FlexCAN_StartRxMessageFifoData/60 (read) FlexCAN_IRQHandlerRxMB/61 (read) FlexCAN_ProccessEnhancedRxFifo/56 (read) FlexCAN_ProcessIRQHandlerEnhancedRxFIFO/65 (read) FlexCAN_AbortTxTransfer/67 (read) FlexCAN_AbortRxTransfer/68 (read) FlexCAN_Ip_Init_Privileged/69 (read) FlexCAN_Ip_Send/70 (read) FlexCAN_Ip_ConfigRxMb/71 (read) FlexCAN_Ip_Receive/72 (read) FlexCAN_IRQHandlerRxFIFO/63 (read) FlexCAN_Ip_ReceiveBlocking/73 (read) FlexCAN_Ip_RxFifo/74 (read) FlexCAN_Ip_ConfigRxFifo_Privileged/76 (read) FlexCAN_Ip_ConfigEnhancedRxFifo_Privileged/77 (read) FlexCAN_ProccessLegacyRxFIFO/57 (read) FlexCAN_IRQHandlerEnhancedRxFIFO/66 (read) FlexCAN_Ip_SetListenOnlyMode_Privileged/119 (read) FlexCAN_Ip_RxFifoBlocking/75 (read) FlexCAN_IRQHandler/81 (read) FlexCAN_Ip_ClearErrorStatus/82 (read) FlexCAN_Ip_GetErrorStatus/83 (read) FlexCAN_Ip_GetControllerTxErrorCounter/84 (read) FlexCAN_Ip_GetControllerRxErrorCounter/85 (read) FlexCAN_Busoff_Error_IRQHandler/86 (read) FlexCAN_Ip_SendBlocking/87 (read) FlexCAN_Ip_SetRxMbGlobalMask_Privileged/88 (read) FlexCAN_Ip_EnterFreezeMode_Privileged/89 (read) FlexCAN_Ip_ExitFreezeMode_Privileged/90 (read) FlexCAN_Ip_SetRxIndividualMask_Privileged/91 (read) FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/92 (read) FlexCAN_Ip_Deinit_Privileged/93 (read) FlexCAN_Ip_MainFunctionRead/94 (read) FlexCAN_Ip_MainFunctionBusOff_Privileged/95 (read) FlexCAN_Ip_MainFunctionWrite/96 (read) FlexCAN_Ip_GetStopMode_Privileged/97 (read) FlexCAN_Ip_GetStartMode_Privileged/98 (read) FlexCAN_Ip_SetStartMode_Privileged/99 (read) FlexCAN_Ip_SetStopMode_Privileged/100 (read) FlexCAN_Ip_SetRxMaskType_Privileged/101 (read) FlexCAN_Ip_SetBitrate_Privileged/102 (read) FlexCAN_Ip_GetBitrate/103 (read) FlexCAN_Ip_ClearTDCFail/104 (read) FlexCAN_Ip_GetTDCFail/105 (read) FlexCAN_Ip_GetTDCValue/106 (read) FlexCAN_Ip_SetBitrateCbt_Privileged/107 (read) FlexCAN_Ip_GetBitrateFD/108 (read) FlexCAN_Ip_SetTDCOffset_Privileged/109 (read) FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/110 (read) FlexCAN_Ip_GetBuffStatusFlag/111 (read) FlexCAN_Ip_ClearBuffStatusFlag/112 (read) FlexCAN_Ip_EnableInterrupts_Privileged/113 (read) FlexCAN_Ip_DisableInterrupts_Privileged/114 (read) FlexCAN_Ip_SetErrorInt_Privileged/115 (read) FlexCAN_Ip_AbortTransfer/116 (read) FlexCAN_Ip_SetRxMb14Mask_Privileged/117 (read) FlexCAN_Ip_SetRxMb15Mask_Privileged/118 (read) FlexCAN_Ip_ManualBusOffRecovery/121 (read) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
FlexCAN_SetRegDefaultVal/47 (FlexCAN_SetRegDefaultVal) @07022700
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_Deinit_Privileged/93 
  Calls: FlexCAN_GetMaxMbNum/150 FlexCAN_GetMaxMbNum/150 FlexCAN_IsEnhancedRxFifoAvailable/145 
FlexCAN_GetEnhancedRxFIFOIntStatusFlag/46 (FlexCAN_GetEnhancedRxFIFOIntStatusFlag) @0701ec40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_ProcessIRQHandlerEnhancedRxFIFO/65 
  Calls: 
FlexCAN_ClearEnhancedRxFifoIntStatusFlag/45 (FlexCAN_ClearEnhancedRxFifoIntStatusFlag) @0701e9a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_ClearBuffStatusFlag/112 FlexCAN_IRQHandler/81 FlexCAN_IRQHandler/81 FlexCAN_IRQHandler/81 FlexCAN_IRQHandler/81 FlexCAN_ProcessIRQHandlerEnhancedRxFIFO/65 FlexCAN_IRQHandlerEnhancedRxFIFO/66 FlexCAN_IRQHandlerEnhancedRxFIFO/66 FlexCAN_IRQHandlerEnhancedRxFIFO/66 FlexCAN_IRQHandlerEnhancedRxFIFO/66 FlexCAN_IRQHandlerEnhancedRxFIFO/66 FlexCAN_IRQHandlerEnhancedRxFIFO/66 
  Calls: 
FlexCAN_GetEnhancedRxFIFOStatusFlag/44 (FlexCAN_GetEnhancedRxFIFOStatusFlag) @0701e700
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_GetBuffStatusFlag/111 FlexCAN_Ip_MainFunctionRead/94 FlexCAN_ProcessIRQHandlerEnhancedRxFIFO/65 FlexCAN_ProccessEnhancedRxFifo/56 
  Calls: 
FlexCAN_SetEnhancedRxFifoIntAll/43 (FlexCAN_SetEnhancedRxFifoIntAll) @0701e460
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_DisableInterrupts_Privileged/114 FlexCAN_Ip_EnableInterrupts_Privileged/113 FlexCAN_ProccessEnhancedRxFifo/56 FlexCAN_StartRxMessageEnhancedFifoData/55 FlexCAN_CompleteRxMessageEnhancedFifoData/54 
  Calls: 
FlexCAN_IsEnhancedRxFifoEnabled/42 (FlexCAN_IsEnhancedRxFifoEnabled) @0701e1c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_DisableInterrupts_Privileged/114 FlexCAN_Ip_EnableInterrupts_Privileged/113 FlexCAN_Ip_MainFunctionRead/94 FlexCAN_IRQHandler/81 FlexCAN_Ip_RxFifoBlocking/75 FlexCAN_Ip_RxFifo/74 
  Calls: 
FlexCAN_SetRxMaskType/41 (FlexCAN_SetRxMaskType) @0701cee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetRxMaskType_Privileged/101 
  Calls: 
FlexCAN_SetTxArbitrationStartDelay/40 (FlexCAN_SetTxArbitrationStartDelay) @0701ca80
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/110 
  Calls: 
FlexCAN_SetRxIndividualMask/38 (FlexCAN_SetRxIndividualMask) @0701c460
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetRxIndividualMask_Privileged/91 
  Calls: 
FlexCAN_SetRxMsgBuffGlobalMask/37 (FlexCAN_SetRxMsgBuffGlobalMask) @0701c1c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetRxMbGlobalMask_Privileged/88 
  Calls: 
FlexCAN_GetMsgBuffIntStatusFlag/36 (FlexCAN_GetMsgBuffIntStatusFlag) @07016ee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_IRQHandler/81 FlexCAN_IRQHandler/81 FlexCAN_IRQHandler/81 
  Calls: 
RxFifoOcuppiedLastMsgBuff/28 (RxFifoOcuppiedLastMsgBuff) @070111c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_AbortRxTransfer/68 
  Calls: 
FlexCAN_IsListenOnlyModeEnabled/27 (FlexCAN_IsListenOnlyModeEnabled) @0700dee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_GetListenOnlyMode/120 FlexCAN_Ip_Send/70 
  Calls: 
FlexCAN_IsFDEnabled/26 (FlexCAN_IsFDEnabled) @0700dc40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetBitrateCbt_Privileged/107 
  Calls: 
FlexCAN_SetSelfReception/25 (FlexCAN_SetSelfReception) @0700d9a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_InitCtroll/51 
  Calls: 
FlexCAN_EnableExtCbt/24 (FlexCAN_EnableExtCbt) @0700d540
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_InitBaudrate/53 
  Calls: 
FlexCAN_EnhCbtEnable/23 (FlexCAN_EnhCbtEnable) @0700d1c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetBitrate_Privileged/102 
  Calls: 
FlexCAN_IsEnhCbtEnabled/22 (FlexCAN_IsEnhCbtEnabled) @06f4be00
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_GetBitrateFD/108 FlexCAN_Ip_SetBitrateCbt_Privileged/107 FlexCAN_Ip_GetTDCValue/106 FlexCAN_Ip_GetTDCFail/105 FlexCAN_Ip_ClearTDCFail/104 FlexCAN_Ip_GetBitrate/103 
  Calls: 
FlexCAN_IsExCbtEnabled/21 (FlexCAN_IsExCbtEnabled) @06f4bb60
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_GetBitrate/103 FlexCAN_Ip_SetBitrate_Privileged/102 
  Calls: 
FlexCAN_GetFDTimeSegments/20 (FlexCAN_GetFDTimeSegments) @06f4b8c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_GetBitrateFD/108 
  Calls: 
FlexCAN_GetTimeSegments/19 (FlexCAN_GetTimeSegments) @06f4b620
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_GetBitrate/103 
  Calls: 
FlexCAN_GetExtendedTimeSegments/18 (FlexCAN_GetExtendedTimeSegments) @06f4b380
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_GetBitrate/103 
  Calls: 
FlexCAN_GetEnhancedDataTimeSegments/17 (FlexCAN_GetEnhancedDataTimeSegments) @06f4b0e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_GetBitrateFD/108 
  Calls: 
FlexCAN_SetEnhancedDataTimeSegments/16 (FlexCAN_SetEnhancedDataTimeSegments) @06f45e00
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetBitrateCbt_Privileged/107 FlexCAN_InitBaudrate/53 
  Calls: 
FlexCAN_GetEnhancedNominalTimeSegments/15 (FlexCAN_GetEnhancedNominalTimeSegments) @06f458c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_GetBitrate/103 
  Calls: 
FlexCAN_SetEnhancedNominalTimeSegments/14 (FlexCAN_SetEnhancedNominalTimeSegments) @06f45620
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetBitrate_Privileged/102 FlexCAN_InitBaudrate/53 
  Calls: 
FlexCAN_SetExtendedTimeSegments/13 (FlexCAN_SetExtendedTimeSegments) @06f450e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetBitrate_Privileged/102 FlexCAN_InitBaudrate/53 
  Calls: 
FlexCAN_SetTimeSegments/12 (FlexCAN_SetTimeSegments) @06f429a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetBitrate_Privileged/102 FlexCAN_InitBaudrate/53 
  Calls: 
FlexCAN_SetFDTimeSegments/11 (FlexCAN_SetFDTimeSegments) @06f422a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetBitrateCbt_Privileged/107 FlexCAN_InitBaudrate/53 
  Calls: 
FlexCAN_GetBuffStatusImask/10 (FlexCAN_GetBuffStatusImask) @06f3db60
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_ProcessSpuriousInterruptMB/64 
  Calls: 
FlexCAN_GetBuffStatusFlag/9 (FlexCAN_GetBuffStatusFlag) @06f3d8c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_GetBuffStatusFlag/111 FlexCAN_Ip_MainFunctionWrite/96 FlexCAN_Ip_MainFunctionRead/94 FlexCAN_Ip_MainFunctionRead/94 FlexCAN_Ip_SendBlocking/87 FlexCAN_Ip_SendBlocking/87 FlexCAN_ProccessLegacyRxFIFO/57 FlexCAN_Ip_ReceiveBlocking/73 FlexCAN_AbortTxTransfer/67 FlexCAN_ProcessSpuriousInterruptMB/64 
  Calls: 
FlexCAN_ClearMsgBuffIntStatusFlag/8 (FlexCAN_ClearMsgBuffIntStatusFlag) @06f3d620
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_ClearBuffStatusFlag/112 FlexCAN_Ip_MainFunctionWrite/96 FlexCAN_Ip_MainFunctionWrite/96 FlexCAN_Ip_SendBlocking/87 FlexCAN_Ip_SendBlocking/87 FlexCAN_IRQHandler/81 FlexCAN_IRQHandler/81 FlexCAN_IRQHandlerRxFIFO/63 FlexCAN_IRQHandlerRxFIFO/63 FlexCAN_IRQHandlerRxFIFO/63 FlexCAN_Ip_ConfigRemoteResponseMb/78 FlexCAN_Ip_ConfigRxMb/71 FlexCAN_AbortRxTransfer/68 FlexCAN_AbortTxTransfer/67 FlexCAN_IRQHandlerTxMB/62 FlexCAN_IRQHandlerTxMB/62 FlexCAN_IRQHandlerRxMB/61 FlexCAN_StartSendData/59 FlexCAN_ProcessSpuriousInterruptMB/64 
  Calls: 
FlexCAN_UnlockRxMsgBuff/7 (FlexCAN_UnlockRxMsgBuff) @06f3d380
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_MainFunctionWrite/96 FlexCAN_Ip_MainFunctionWrite/96 FlexCAN_IRQHandlerTxMB/62 FlexCAN_IRQHandlerTxMB/62 FlexCAN_IRQHandlerRxMB/61 
  Calls: 
FlexCAN_SetListenOnlyMode/6 (FlexCAN_SetListenOnlyMode) @06f3d000
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/119 
  Calls: 
FlexCAN_SetFDEnabled/5 (FlexCAN_SetFDEnabled) @06f36c40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetBitrateCbt_Privileged/107 FlexCAN_InitController/52 
  Calls: 
FlexCAN_DisableMemErrorDetection/4 (FlexCAN_DisableMemErrorDetection) @06f367e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_InitController/52 
  Calls: 
FlexCAN_IsEnabled/3 (FlexCAN_IsEnabled) @06f360e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/119 FlexCAN_Ip_SetRxMb15Mask_Privileged/118 FlexCAN_Ip_SetRxMb14Mask_Privileged/117 FlexCAN_Ip_SetErrorInt_Privileged/115 FlexCAN_Ip_DisableInterrupts_Privileged/114 FlexCAN_Ip_EnableInterrupts_Privileged/113 FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/110 FlexCAN_Ip_SetTDCOffset_Privileged/109 FlexCAN_Ip_SetRxMaskType_Privileged/101 FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/92 FlexCAN_Ip_SetRxIndividualMask_Privileged/91 FlexCAN_Ip_SetRxMbGlobalMask_Privileged/88 FlexCAN_Ip_ConfigEnhancedRxFifo_Privileged/77 FlexCAN_Ip_ConfigRxFifo_Privileged/76 FlexCAN_InitController/52 
  Calls: 
FlexCAN_SetEnhancedTDCOffset/2 (FlexCAN_SetEnhancedTDCOffset) @06f31c40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetTDCOffset_Privileged/109 
  Calls: 
FlexCAN_SetTDCOffset/1 (FlexCAN_SetTDCOffset) @06f318c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetTDCOffset_Privileged/109 
  Calls: 
FlexCAN_SetRxFifoGlobalMask/0 (FlexCAN_SetRxFifoGlobalMask) @06f31540
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/92 
  Calls: 
FlexCAN_Ip_ManualBusOffRecovery (uint8 Instance)
{
  Flexcan_Ip_StatusType RetVal;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  struct FLEXCAN_Type * Base;
  Flexcan_Ip_StatusType D.11235;
  long unsigned int D.11232;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _33;
  Flexcan_Ip_StatusType _36;

  <bb 2> :
  _1 = (int) Instance_17(D);
  Base_19 = Flexcan_Ip_apxBase[_1];
  timeStart = 0;
  timeElapsed_21 = 0;
  uS2Ticks_23 = OsIf_MicrosToTicks (100, 0);
  RetVal_24 = 1;
  _2 ={v} Base_19->CTRL1;
  _3 = _2 & 64;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  RetVal_25 = 0;
  _4 ={v} Base_19->ESR1;
  _5 = _4 & 32;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_20 ();
  _6 ={v} Base_19->CTRL1;
  _7 = _6 & 4294967231;
  Base_19->CTRL1 ={v} _7;
  _8 ={v} Base_19->CTRL1;
  _9 = _8 | 64;
  Base_19->CTRL1 ={v} _9;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_20 ();
  _10 = OsIf_GetCounter (0);
  timeStart = _10;
  goto <bb 7>; [INV]

  <bb 5> :
  _33 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_34 = _33 + timeElapsed_13;
  if (timeElapsed_34 >= uS2Ticks_23)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  RetVal_35 = 3;
  goto <bb 8>; [INV]

  <bb 7> :
  # timeElapsed_13 = PHI <timeElapsed_21(4), timeElapsed_34(5)>
  _11 ={v} Base_19->ESR1;
  _12 = _11 & 32;
  if (_12 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # RetVal_14 = PHI <RetVal_24(2), RetVal_25(3), RetVal_35(6), RetVal_25(7)>
  _36 = RetVal_14;
  timeStart ={v} {CLOBBER};

  <bb 9> :
<L10>:
  return _36;

}


FlexCAN_Ip_GetListenOnlyMode (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  boolean D.11226;
  int _1;
  boolean _6;

  <bb 2> :
  _1 = (int) instance_2(D);
  base_4 = Flexcan_Ip_apxBase[_1];
  _6 = FlexCAN_IsListenOnlyModeEnabled (base_4);

  <bb 3> :
<L0>:
  return _6;

}


FlexCAN_Ip_SetListenOnlyMode_Privileged (uint8 instance, const boolean enable)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.11220;
  int _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool _5;
  int _6;
  Flexcan_Ip_StatusType _28;

  <bb 2> :
  result_12 = 0;
  status_13 = 0;
  _1 = (int) instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnabled (pBase_16);
  _3 = (int) _2;
  _4 = _3 != 0;
  _5 = ~_4;
  _6 = (int) _5;
  disabled_18 = (boolean) _6;
  if (disabled_18 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_20 = FlexCAN_Enable (pBase_16);

  <bb 4> :
  # result_7 = PHI <result_12(2), result_20(3)>
  if (result_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_10 ();
  FlexCAN_SetListenOnlyMode (pBase_16, enable_22(D));
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_10 ();

  <bb 6> :
  if (disabled_18 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  status_26 = FlexCAN_Disable (pBase_16);
  if (status_26 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_27 = status_26;

  <bb 9> :
  # result_8 = PHI <result_7(6), result_7(7), result_27(8)>
  _28 = result_8;

  <bb 10> :
<L8>:
  return _28;

}


FlexCAN_Ip_SetRxMb15Mask_Privileged (uint8 instance, uint32 mask)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.11210;
  int _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool _5;
  int _6;
  Flexcan_Ip_StatusType _26;

  <bb 2> :
  result_12 = 0;
  status_13 = 0;
  _1 = (int) instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnabled (pBase_16);
  _3 = (int) _2;
  _4 = _3 != 0;
  _5 = ~_4;
  _6 = (int) _5;
  disabled_18 = (boolean) _6;
  if (disabled_18 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_20 = FlexCAN_Enable (pBase_16);

  <bb 4> :
  # result_7 = PHI <result_12(2), result_20(3)>
  if (result_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  pBase_16->RX15MASK ={v} mask_21(D);

  <bb 6> :
  if (disabled_18 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  status_24 = FlexCAN_Disable (pBase_16);
  if (status_24 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_25 = status_24;

  <bb 9> :
  # result_8 = PHI <result_7(6), result_7(7), result_25(8)>
  _26 = result_8;

  <bb 10> :
<L8>:
  return _26;

}


FlexCAN_Ip_SetRxMb14Mask_Privileged (uint8 instance, uint32 mask)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.11200;
  int _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool _5;
  int _6;
  Flexcan_Ip_StatusType _26;

  <bb 2> :
  result_12 = 0;
  status_13 = 0;
  _1 = (int) instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnabled (pBase_16);
  _3 = (int) _2;
  _4 = _3 != 0;
  _5 = ~_4;
  _6 = (int) _5;
  disabled_18 = (boolean) _6;
  if (disabled_18 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_20 = FlexCAN_Enable (pBase_16);

  <bb 4> :
  # result_7 = PHI <result_12(2), result_20(3)>
  if (result_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  pBase_16->RX14MASK ={v} mask_21(D);

  <bb 6> :
  if (disabled_18 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  status_24 = FlexCAN_Disable (pBase_16);
  if (status_24 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_25 = status_24;

  <bb 9> :
  # result_8 = PHI <result_7(6), result_7(7), result_25(8)>
  _26 = result_8;

  <bb 10> :
<L8>:
  return _26;

}


FlexCAN_Ip_AbortTransfer (uint8 u8Instance, uint8 mb_idx)
{
  Flexcan_Ip_StatusType result;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.11190;
  int _1;
  int _2;
  int _3;
  <unnamed type> _4;
  long unsigned int _5;
  _Bool _6;
  int _7;
  <unnamed type> _8;
  int _9;
  <unnamed type> _10;
  Flexcan_Ip_StatusType _26;

  <bb 2> :
  _1 = (int) u8Instance_15(D);
  pBase_17 = Flexcan_Ip_apxBase[_1];
  _2 = (int) u8Instance_15(D);
  state_18 = Flexcan_Ip_apxState[_2];
  result_19 = 0;
  if (mb_idx_20(D) <= 95)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  _3 = (int) mb_idx_20(D);
  _4 ={v} state_18->mbs[_3].state;
  if (_4 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  result_25 = 5;
  goto <bb 9>; [INV]

  <bb 5> :
  _5 = (long unsigned int) mb_idx_20(D);
  _6 = state_18->isIntActive;
  FLEXCAN_ClearMsgBuffIntCmd (pBase_17, u8Instance_15(D), _5, _6);
  _7 = (int) mb_idx_20(D);
  _8 ={v} state_18->mbs[_7].state;
  if (_8 == 2)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  result_23 = FlexCAN_AbortTxTransfer (u8Instance_15(D), mb_idx_20(D));

  <bb 7> :
  # result_11 = PHI <result_19(5), result_23(6)>
  _9 = (int) mb_idx_20(D);
  _10 ={v} state_18->mbs[_9].state;
  if (_10 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  FlexCAN_AbortRxTransfer (u8Instance_15(D), mb_idx_20(D));

  <bb 9> :
  # result_12 = PHI <result_19(2), result_25(4), result_11(7), result_11(8)>
  _26 = result_12;

  <bb 10> :
<L9>:
  return _26;

}


FlexCAN_Ip_SetErrorInt_Privileged (uint8 u8Instance, Flexcan_Ip_ErrorIntType type, boolean enable)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.11179;
  int _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool _5;
  int _6;
  Flexcan_Ip_StatusType _31;

  <bb 2> :
  result_12 = 0;
  status_13 = 0;
  _1 = (int) u8Instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnabled (pBase_16);
  _3 = (int) _2;
  _4 = _3 != 0;
  _5 = ~_4;
  _6 = (int) _5;
  disabled_18 = (boolean) _6;
  if (disabled_18 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_20 = FlexCAN_Enable (pBase_16);

  <bb 4> :
  # result_7 = PHI <result_12(2), result_20(3)>
  if (result_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  switch (type_21(D)) <default: <L8> [INV], case 0: <L6> [INV], case 1: <L7> [INV], case 2: <L4> [INV], case 3: <L5> [INV], case 4: <L3> [INV]>

  <bb 6> :
<L3>:
  FlexCAN_SetErrIntCmd (pBase_16, 32768, enable_22(D));
  goto <bb 12>; [INV]

  <bb 7> :
<L4>:
  FlexCAN_SetErrIntCmd (pBase_16, 16384, enable_22(D));
  goto <bb 12>; [INV]

  <bb 8> :
<L5>:
  FlexCAN_SetErrIntCmd (pBase_16, 16385, enable_22(D));
  goto <bb 12>; [INV]

  <bb 9> :
<L6>:
  FlexCAN_SetErrIntCmd (pBase_16, 1024, enable_22(D));
  goto <bb 12>; [INV]

  <bb 10> :
<L7>:
  FlexCAN_SetErrIntCmd (pBase_16, 2048, enable_22(D));
  goto <bb 12>; [INV]

  <bb 11> :
<L8>:

  <bb 12> :
  if (disabled_18 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  status_29 = FlexCAN_Disable (pBase_16);
  if (status_29 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  result_30 = status_29;

  <bb 15> :
  # result_8 = PHI <result_7(12), result_7(13), result_30(14)>
  _31 = result_8;

  <bb 16> :
<L15>:
  return _31;

}


FlexCAN_Ip_DisableInterrupts_Privileged (uint8 u8Instance)
{
  struct Flexcan_Ip_StateType * state;
  Flexcan_Ip_StatusType result;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.11169;
  int _1;
  int _2;
  _Bool _3;
  _Bool _4;
  _Bool _5;
  Flexcan_Ip_StatusType _21;

  <bb 2> :
  _1 = (int) u8Instance_9(D);
  pBase_11 = Flexcan_Ip_apxBase[_1];
  result_12 = 1;
  _2 = (int) u8Instance_9(D);
  state_13 = Flexcan_Ip_apxState[_2];
  _3 = FlexCAN_IsEnabled (pBase_11);
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  FlexCAN_DisableInterrupts (pBase_11);
  _4 = FlexCAN_IsEnhancedRxFifoAvailable (pBase_11);
  if (_4 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _5 = FlexCAN_IsEnhancedRxFifoEnabled (pBase_11);
  if (_5 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  FlexCAN_SetEnhancedRxFifoIntAll (pBase_11, 0);

  <bb 6> :
  state_13->isIntActive = 0;
  result_20 = 0;

  <bb 7> :
  # result_6 = PHI <result_12(2), result_20(6)>
  _21 = result_6;

  <bb 8> :
<L6>:
  return _21;

}


FlexCAN_Ip_EnableInterrupts_Privileged (uint8 u8Instance)
{
  struct Flexcan_Ip_StateType * state;
  Flexcan_Ip_StatusType result;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.11161;
  int _1;
  int _2;
  _Bool _3;
  _Bool _4;
  _Bool _5;
  _Bool _6;
  _Bool _7;
  Flexcan_Ip_StatusType _23;

  <bb 2> :
  _1 = (int) u8Instance_11(D);
  pBase_13 = Flexcan_Ip_apxBase[_1];
  result_14 = 1;
  _2 = (int) u8Instance_11(D);
  state_15 = Flexcan_Ip_apxState[_2];
  _3 = FlexCAN_IsEnabled (pBase_13);
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  FlexCAN_EnableInterrupts (pBase_13, u8Instance_11(D));
  _4 = state_15->enhancedFifoOutput.isPolling;
  _5 = ~_4;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _6 = FlexCAN_IsEnhancedRxFifoAvailable (pBase_13);
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _7 = FlexCAN_IsEnhancedRxFifoEnabled (pBase_13);
  if (_7 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  FlexCAN_SetEnhancedRxFifoIntAll (pBase_13, 1);

  <bb 7> :
  state_15->isIntActive = 1;
  result_22 = 0;

  <bb 8> :
  # result_8 = PHI <result_14(2), result_22(7)>
  _23 = result_8;

  <bb 9> :
<L8>:
  return _23;

}


FlexCAN_Ip_ClearBuffStatusFlag (uint8 instance, uint8 msgBuffIdx)
{
  struct FLEXCAN_Type * pBase;
  int _1;
  long unsigned int _2;

  <bb 2> :
  _1 = (int) instance_4(D);
  pBase_6 = Flexcan_Ip_apxBase[_1];
  if (msgBuffIdx_7(D) == 255)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (pBase_6, 30);
  goto <bb 5>; [INV]

  <bb 4> :
  _2 = (long unsigned int) msgBuffIdx_7(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_6, _2);

  <bb 5> :
  return;

}


FlexCAN_Ip_GetBuffStatusFlag (uint8 instance, uint8 msgBuffIdx)
{
  const struct FLEXCAN_Type * pBase;
  boolean returnResult;
  boolean D.11148;
  int _1;
  unsigned char _2;
  long unsigned int _3;
  unsigned char _4;
  boolean _16;

  <bb 2> :
  returnResult_7 = 1;
  _1 = (int) instance_8(D);
  pBase_10 = Flexcan_Ip_apxBase[_1];
  if (msgBuffIdx_11(D) == 255)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = FlexCAN_GetEnhancedRxFIFOStatusFlag (pBase_10, 30);
  returnResult_15 = _2 == 1;
  goto <bb 5>; [INV]

  <bb 4> :
  _3 = (long unsigned int) msgBuffIdx_11(D);
  _4 = FlexCAN_GetBuffStatusFlag (pBase_10, _3);
  returnResult_13 = _4 == 1;

  <bb 5> :
  # returnResult_5 = PHI <returnResult_15(3), returnResult_13(4)>
  _16 = returnResult_5;

  <bb 6> :
<L3>:
  return _16;

}


FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged (uint8 instance, uint8 value)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.11143;
  int _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool _5;
  int _6;
  Flexcan_Ip_StatusType _28;

  <bb 2> :
  result_12 = 0;
  status_13 = 0;
  _1 = (int) instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnabled (pBase_16);
  _3 = (int) _2;
  _4 = _3 != 0;
  _5 = ~_4;
  _6 = (int) _5;
  disabled_18 = (boolean) _6;
  if (disabled_18 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_20 = FlexCAN_Enable (pBase_16);

  <bb 4> :
  # result_7 = PHI <result_12(2), result_20(3)>
  if (result_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_17 ();
  FlexCAN_SetTxArbitrationStartDelay (pBase_16, value_22(D));
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_17 ();

  <bb 6> :
  if (disabled_18 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  status_26 = FlexCAN_Disable (pBase_16);
  if (status_26 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_27 = status_26;

  <bb 9> :
  # result_8 = PHI <result_7(6), result_7(7), result_27(8)>
  _28 = result_8;

  <bb 10> :
<L8>:
  return _28;

}


FlexCAN_Ip_SetTDCOffset_Privileged (uint8 instance, boolean enable, uint8 offset)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.11129;
  int _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool _5;
  int _6;
  long unsigned int _7;
  long unsigned int _8;
  Flexcan_Ip_StatusType _33;

  <bb 2> :
  result_15 = 0;
  status_16 = 0;
  _1 = (int) instance_17(D);
  pBase_19 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnabled (pBase_19);
  _3 = (int) _2;
  _4 = _3 != 0;
  _5 = ~_4;
  _6 = (int) _5;
  disabled_21 = (boolean) _6;
  if (disabled_21 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_23 = FlexCAN_Enable (pBase_19);

  <bb 4> :
  # result_9 = PHI <result_15(2), result_23(3)>
  if (result_9 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_16 ();
  _7 ={v} pBase_19->CTRL2;
  _8 = _7 & 8192;
  if (_8 == 8192)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  FlexCAN_SetEnhancedTDCOffset (pBase_19, enable_25(D), offset_26(D));
  goto <bb 8>; [INV]

  <bb 7> :
  FlexCAN_SetTDCOffset (pBase_19, enable_25(D), offset_26(D));

  <bb 8> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_16 ();

  <bb 9> :
  if (disabled_21 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  status_31 = FlexCAN_Disable (pBase_19);
  if (status_31 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  result_32 = status_31;

  <bb 12> :
  # result_10 = PHI <result_9(9), result_9(10), result_32(11)>
  _33 = result_10;

  <bb 13> :
<L11>:
  return _33;

}


FlexCAN_Ip_GetBitrateFD (uint8 instance, struct Flexcan_Ip_TimeSegmentType * bitrate)
{
  boolean enhCbt;
  const struct FLEXCAN_Type * pBase;
  boolean D.11116;
  int _1;
  boolean _12;

  <bb 2> :
  _1 = (int) instance_3(D);
  pBase_5 = Flexcan_Ip_apxBase[_1];
  enhCbt_6 = 0;
  enhCbt_8 = FlexCAN_IsEnhCbtEnabled (pBase_5);
  if (enhCbt_8 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  FlexCAN_GetEnhancedDataTimeSegments (pBase_5, bitrate_9(D));
  goto <bb 5>; [INV]

  <bb 4> :
  FlexCAN_GetFDTimeSegments (pBase_5, bitrate_9(D));

  <bb 5> :
  _12 = enhCbt_8;

  <bb 6> :
<L3>:
  return _12;

}


FlexCAN_Ip_SetBitrateCbt_Privileged (uint8 instance, const struct Flexcan_Ip_TimeSegmentType * bitrate, boolean bitRateSwitch)
{
  boolean enhCbt;
  boolean disabled;
  boolean fd_enable;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.11109;
  int _1;
  long unsigned int _2;
  signed int _3;
  Flexcan_Ip_StatusType _32;

  <bb 2> :
  result_10 = 0;
  status_11 = 0;
  _1 = (int) instance_12(D);
  pBase_14 = Flexcan_Ip_apxBase[_1];
  fd_enable_16 = FlexCAN_IsFDEnabled (pBase_14);
  _2 ={v} pBase_14->MCR;
  _3 = (signed int) _2;
  disabled_17 = _3 < 0;
  if (disabled_17 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_19 = FlexCAN_Enable (pBase_14);

  <bb 4> :
  # result_4 = PHI <result_10(2), result_19(3)>
  if (result_4 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  enhCbt_21 = FlexCAN_IsEnhCbtEnabled (pBase_14);
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_15 ();
  FlexCAN_SetFDEnabled (pBase_14, fd_enable_16, bitRateSwitch_23(D));
  if (enhCbt_21 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  FlexCAN_SetEnhancedDataTimeSegments (pBase_14, bitrate_25(D));
  goto <bb 8>; [INV]

  <bb 7> :
  FlexCAN_SetFDTimeSegments (pBase_14, bitrate_25(D));

  <bb 8> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_15 ();

  <bb 9> :
  if (disabled_17 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  status_30 = FlexCAN_Disable (pBase_14);
  if (status_30 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  result_31 = status_30;

  <bb 12> :
  # result_5 = PHI <result_4(9), result_4(10), result_31(11)>
  _32 = result_5;

  <bb 13> :
<L11>:
  return _32;

}


FlexCAN_Ip_GetTDCValue (uint8 u8Instance)
{
  const struct FLEXCAN_Type * pBase;
  uint8 value;
  uint8 D.11096;
  int _1;
  _Bool _2;
  long unsigned int _3;
  long unsigned int _4;
  unsigned char _5;
  uint8 _14;

  <bb 2> :
  value_7 = 0;
  _1 = (int) u8Instance_8(D);
  pBase_10 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnhCbtEnabled (pBase_10);
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _3 ={v} pBase_10->ETDC;
  value_13 = (uint8) _3;
  goto <bb 5>; [INV]

  <bb 4> :
  _4 ={v} pBase_10->FDCTRL;
  _5 = (unsigned char) _4;
  value_12 = _5 & 63;

  <bb 5> :
  # value_6 = PHI <value_13(3), value_12(4)>
  _14 = value_6;

  <bb 6> :
<L3>:
  return _14;

}


FlexCAN_Ip_GetTDCFail (uint8 u8Instance)
{
  const struct FLEXCAN_Type * pBase;
  boolean value;
  boolean D.11091;
  int _1;
  _Bool _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  boolean _15;

  <bb 2> :
  value_8 = 0;
  _1 = (int) u8Instance_9(D);
  pBase_11 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnhCbtEnabled (pBase_11);
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _3 ={v} pBase_11->ETDC;
  _4 = _3 & 32768;
  value_14 = _4 == 32768;
  goto <bb 5>; [INV]

  <bb 4> :
  _5 ={v} pBase_11->FDCTRL;
  _6 = _5 & 16384;
  value_13 = _6 == 16384;

  <bb 5> :
  # value_7 = PHI <value_14(3), value_13(4)>
  _15 = value_7;

  <bb 6> :
<L3>:
  return _15;

}


FlexCAN_Ip_ClearTDCFail (uint8 u8Instance)
{
  struct FLEXCAN_Type * pBase;
  int _1;
  _Bool _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  _1 = (int) u8Instance_8(D);
  pBase_10 = Flexcan_Ip_apxBase[_1];
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_09 ();
  _2 = FlexCAN_IsEnhCbtEnabled (pBase_10);
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _3 ={v} pBase_10->ETDC;
  _4 = _3 | 32768;
  pBase_10->ETDC ={v} _4;
  goto <bb 5>; [INV]

  <bb 4> :
  _5 ={v} pBase_10->FDCTRL;
  _6 = _5 | 16384;
  pBase_10->FDCTRL ={v} _6;

  <bb 5> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_09 ();
  return;

}


FlexCAN_Ip_GetBitrate (uint8 instance, struct Flexcan_Ip_TimeSegmentType * bitrate)
{
  boolean enhCbt;
  const struct FLEXCAN_Type * pBase;
  boolean D.11081;
  int _1;
  _Bool _2;
  boolean _15;

  <bb 2> :
  _1 = (int) instance_4(D);
  pBase_6 = Flexcan_Ip_apxBase[_1];
  enhCbt_7 = 0;
  enhCbt_9 = FlexCAN_IsEnhCbtEnabled (pBase_6);
  if (enhCbt_9 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  FlexCAN_GetEnhancedNominalTimeSegments (pBase_6, bitrate_11(D));
  goto <bb 7>; [INV]

  <bb 4> :
  _2 = FlexCAN_IsExCbtEnabled (pBase_6);
  if (_2 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  FlexCAN_GetExtendedTimeSegments (pBase_6, bitrate_11(D));
  goto <bb 7>; [INV]

  <bb 6> :
  FlexCAN_GetTimeSegments (pBase_6, bitrate_11(D));

  <bb 7> :
  _15 = enhCbt_9;

  <bb 8> :
<L6>:
  return _15;

}


FlexCAN_Ip_SetBitrate_Privileged (uint8 instance, const struct Flexcan_Ip_TimeSegmentType * bitrate, boolean enhExt)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.11067;
  int _1;
  long unsigned int _2;
  signed int _3;
  _Bool _4;
  Flexcan_Ip_StatusType _31;

  <bb 2> :
  result_11 = 0;
  status_12 = 0;
  _1 = (int) instance_13(D);
  pBase_15 = Flexcan_Ip_apxBase[_1];
  _2 ={v} pBase_15->MCR;
  _3 = (signed int) _2;
  disabled_16 = _3 < 0;
  if (disabled_16 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_18 = FlexCAN_Enable (pBase_15);

  <bb 4> :
  # result_5 = PHI <result_11(2), result_18(3)>
  if (result_5 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 5> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_14 ();
  FlexCAN_EnhCbtEnable (pBase_15, enhExt_20(D));
  if (enhExt_20(D) != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  FlexCAN_SetEnhancedNominalTimeSegments (pBase_15, bitrate_23(D));
  goto <bb 10>; [INV]

  <bb 7> :
  _4 = FlexCAN_IsExCbtEnabled (pBase_15);
  if (_4 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  FlexCAN_SetExtendedTimeSegments (pBase_15, bitrate_23(D));
  goto <bb 10>; [INV]

  <bb 9> :
  FlexCAN_SetTimeSegments (pBase_15, bitrate_23(D));

  <bb 10> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_14 ();

  <bb 11> :
  if (disabled_16 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  status_29 = FlexCAN_Disable (pBase_15);
  if (status_29 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  result_30 = status_29;

  <bb 14> :
  # result_6 = PHI <result_5(11), result_5(12), result_30(13)>
  _31 = result_6;

  <bb 15> :
<L14>:
  return _31;

}


FlexCAN_Ip_SetRxMaskType_Privileged (uint8 instance, Flexcan_Ip_RxMaskType type)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.11048;
  int _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool _5;
  int _6;
  Flexcan_Ip_StatusType _28;

  <bb 2> :
  result_12 = 0;
  status_13 = 0;
  _1 = (int) instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnabled (pBase_16);
  _3 = (int) _2;
  _4 = _3 != 0;
  _5 = ~_4;
  _6 = (int) _5;
  disabled_18 = (boolean) _6;
  if (disabled_18 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_20 = FlexCAN_Enable (pBase_16);

  <bb 4> :
  # result_7 = PHI <result_12(2), result_20(3)>
  if (result_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_08 ();
  FlexCAN_SetRxMaskType (pBase_16, type_22(D));
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_08 ();

  <bb 6> :
  if (disabled_18 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  status_26 = FlexCAN_Disable (pBase_16);
  if (status_26 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_27 = status_26;

  <bb 9> :
  # result_8 = PHI <result_7(6), result_7(7), result_27(8)>
  _28 = result_8;

  <bb 10> :
<L8>:
  return _28;

}


FlexCAN_Ip_SetStopMode_Privileged (uint8 instance)
{
  Flexcan_Ip_StatusType status;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.11038;
  int _1;
  Flexcan_Ip_StatusType _11;

  <bb 2> :
  _1 = (int) instance_4(D);
  pBase_6 = Flexcan_Ip_apxBase[_1];
  status_8 = FlexCAN_EnterFreezeMode (pBase_6);
  if (status_8 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  status_10 = FlexCAN_Disable (pBase_6);

  <bb 4> :
  # status_2 = PHI <status_8(2), status_10(3)>
  _11 = status_2;

  <bb 5> :
<L2>:
  return _11;

}


FlexCAN_Ip_SetStartMode_Privileged (uint8 instance)
{
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.11034;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  Flexcan_Ip_StatusType _11;

  <bb 2> :
  _1 = (int) instance_4(D);
  pBase_6 = Flexcan_Ip_apxBase[_1];
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_07 ();
  _2 ={v} pBase_6->MCR;
  _3 = _2 & 2147483647;
  pBase_6->MCR ={v} _3;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_07 ();
  _11 = FlexCAN_ExitFreezeMode (pBase_6);

  <bb 3> :
<L0>:
  return _11;

}


FlexCAN_Ip_GetStartMode_Privileged (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  boolean D.11032;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  boolean _7;

  <bb 2> :
  _1 = (int) instance_4(D);
  base_6 = Flexcan_Ip_apxBase[_1];
  _2 ={v} base_6->MCR;
  _3 = _2 & 17825792;
  _7 = _3 == 0;

  <bb 3> :
<L0>:
  return _7;

}


FlexCAN_Ip_GetStopMode_Privileged (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  boolean D.11030;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  boolean _7;

  <bb 2> :
  _1 = (int) instance_4(D);
  base_6 = Flexcan_Ip_apxBase[_1];
  _2 ={v} base_6->MCR;
  _3 = _2 & 1048576;
  _7 = _3 == 1048576;

  <bb 3> :
<L0>:
  return _7;

}


FlexCAN_Ip_MainFunctionWrite (uint8 instance, uint8 mb_idx)
{
  struct Flexcan_Ip_MsgBuffType mb;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  long unsigned int _3;
  unsigned char _4;
  int _5;
  <unnamed type> _6;
  int _7;
  _Bool _8;
  long unsigned int _9;
  long unsigned int _10;
  int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  int _18;
  long unsigned int _19;
  long unsigned int _20;
  int _21;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _22;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _23;
  long unsigned int _24;

  <bb 2> :
  _1 = (int) instance_28(D);
  base_30 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_28(D);
  state_31 = Flexcan_Ip_apxState[_2];
  _3 = (long unsigned int) mb_idx_32(D);
  _4 = FlexCAN_GetBuffStatusFlag (base_30, _3);
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  _5 = (int) mb_idx_32(D);
  _6 ={v} state_31->mbs[_5].state;
  if (_6 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 4> :
  _7 = (int) mb_idx_32(D);
  _8 = state_31->mbs[_7].isRemote;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  _9 = (long unsigned int) mb_idx_32(D);
  FlexCAN_LockRxMsgBuff (base_30, _9);
  _10 = (long unsigned int) mb_idx_32(D);
  FlexCAN_GetMsgBuff (base_30, _10, &mb);
  FlexCAN_UnlockRxMsgBuff (base_30);
  _11 = (int) mb_idx_32(D);
  _12 = mb.time_stamp;
  state_31->mbs[_11].time_stamp = _12;
  _13 = mb.cs;
  _14 = _13 >> 24;
  _15 = _14 & 15;
  if (_15 == 4)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _16 = (long unsigned int) mb_idx_32(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_30, _16);

  <bb 7> :
  mb ={v} {CLOBBER};
  goto <bb 9>; [INV]

  <bb 8> :
  _17 = (long unsigned int) mb_idx_32(D);
  _18 = (int) mb_idx_32(D);
  _19 = FlexCAN_GetMsgBuffTimestamp (base_30, _17);
  state_31->mbs[_18].time_stamp = _19;
  FlexCAN_UnlockRxMsgBuff (base_30);
  _20 = (long unsigned int) mb_idx_32(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_30, _20);

  <bb 9> :
  _21 = (int) mb_idx_32(D);
  state_31->mbs[_21].state ={v} 0;
  _22 = state_31->callback;
  if (_22 != 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _23 = state_31->callback;
  _24 = (long unsigned int) mb_idx_32(D);
  _23 (instance_28(D), 4, _24, state_31);

  <bb 11> :
  return;

}


FlexCAN_Ip_MainFunctionBusOff_Privileged (uint8 instance)
{
  uint32 u32ErrStatus;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType eRetVal;
  Flexcan_Ip_StatusType D.11017;
  int _1;
  int _2;
  long unsigned int _3;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _4;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _5;
  Flexcan_Ip_StatusType _19;

  <bb 2> :
  eRetVal_9 = 1;
  _1 = (int) instance_10(D);
  base_12 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_10(D);
  state_13 = Flexcan_Ip_apxState[_2];
  u32ErrStatus_14 = 0;
  u32ErrStatus_15 ={v} base_12->ESR1;
  _3 = u32ErrStatus_15 & 4;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _4 = state_13->error_callback;
  if (_4 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _5 = state_13->error_callback;
  _5 (instance_10(D), 11, u32ErrStatus_15, state_13);

  <bb 5> :
  base_12->ESR1 ={v} 4;
  eRetVal_18 = 0;

  <bb 6> :
  # eRetVal_6 = PHI <eRetVal_9(2), eRetVal_18(5)>
  _19 = eRetVal_6;

  <bb 7> :
<L4>:
  return _19;

}


FlexCAN_Ip_MainFunctionRead (uint8 instance, uint8 mb_idx)
{
  const struct Flexcan_Ip_StateType * state;
  const struct FLEXCAN_Type * base;
  int _1;
  int _2;
  _Bool _3;
  _Bool _4;
  unsigned char _5;
  _Bool _6;
  unsigned char _7;
  long unsigned int _8;
  unsigned char _9;
  int _10;
  <unnamed type> _11;
  long unsigned int _12;

  <bb 2> :
  _1 = (int) instance_15(D);
  base_17 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_15(D);
  state_18 = Flexcan_Ip_apxState[_2];
  if (mb_idx_19(D) == 255)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _3 = FlexCAN_IsEnhancedRxFifoAvailable (base_17);
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 4> :
  _4 = FlexCAN_IsEnhancedRxFifoEnabled (base_17);
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 5> :
  _5 = FlexCAN_GetEnhancedRxFIFOStatusFlag (base_17, 28);
  if (_5 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 6> :
  FlexCAN_IRQHandlerEnhancedRxFIFO (instance_15(D), 28);
  goto <bb 16>; [INV]

  <bb 7> :
  _6 = state_18->bIsLegacyFifoEn;
  if (_6 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 8> :
  if (mb_idx_19(D) <= 7)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 9> :
  if (mb_idx_19(D) == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  _7 = FlexCAN_GetBuffStatusFlag (base_17, 5);
  if (_7 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  FlexCAN_IRQHandlerRxFIFO (instance_15(D), 5);

  <bb 12> :
  goto <bb 16>; [INV]

  <bb 13> :
  _8 = (long unsigned int) mb_idx_19(D);
  _9 = FlexCAN_GetBuffStatusFlag (base_17, _8);
  if (_9 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  _10 = (int) mb_idx_19(D);
  _11 ={v} state_18->mbs[_10].state;
  if (_11 == 1)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _12 = (long unsigned int) mb_idx_19(D);
  FlexCAN_IRQHandlerRxMB (instance_15(D), _12);

  <bb 16> :
  return;

}


FlexCAN_Ip_Deinit_Privileged (uint8 instance)
{
  Flexcan_Ip_StatusType result;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType D.10984;
  int _1;
  int _2;
  Flexcan_Ip_StatusType _13;

  <bb 2> :
  _1 = (int) instance_4(D);
  base_6 = Flexcan_Ip_apxBase[_1];
  result_7 = 1;
  result_9 = FlexCAN_EnterFreezeMode (base_6);
  if (result_9 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  FlexCAN_SetRegDefaultVal (base_6);
  FlexCAN_Disable (base_6);
  _2 = (int) instance_4(D);
  Flexcan_Ip_apxState[_2] = 0B;

  <bb 4> :
  _13 = result_9;

  <bb 5> :
<L2>:
  return _13;

}


FlexCAN_Ip_SetRxFifoGlobalMask_Privileged (uint8 instance, uint32 mask)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.10980;
  int _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool _5;
  int _6;
  Flexcan_Ip_StatusType _26;

  <bb 2> :
  result_12 = 0;
  status_13 = 0;
  _1 = (int) instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnabled (pBase_16);
  _3 = (int) _2;
  _4 = _3 != 0;
  _5 = ~_4;
  _6 = (int) _5;
  disabled_18 = (boolean) _6;
  if (disabled_18 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_20 = FlexCAN_Enable (pBase_16);

  <bb 4> :
  # result_7 = PHI <result_12(2), result_20(3)>
  if (result_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  FlexCAN_SetRxFifoGlobalMask (pBase_16, mask_21(D));

  <bb 6> :
  if (disabled_18 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  status_24 = FlexCAN_Disable (pBase_16);
  if (status_24 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_25 = status_24;

  <bb 9> :
  # result_8 = PHI <result_7(6), result_7(7), result_25(8)>
  _26 = result_8;

  <bb 10> :
<L8>:
  return _26;

}


FlexCAN_Ip_SetRxIndividualMask_Privileged (uint8 instance, uint8 mb_idx, uint32 mask)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.10970;
  int _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool _5;
  int _6;
  long unsigned int _7;
  Flexcan_Ip_StatusType _28;

  <bb 2> :
  result_13 = 0;
  status_14 = 0;
  _1 = (int) instance_15(D);
  pBase_17 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnabled (pBase_17);
  _3 = (int) _2;
  _4 = _3 != 0;
  _5 = ~_4;
  _6 = (int) _5;
  disabled_19 = (boolean) _6;
  if (disabled_19 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_21 = FlexCAN_Enable (pBase_17);

  <bb 4> :
  # result_8 = PHI <result_13(2), result_21(3)>
  if (result_8 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _7 = (long unsigned int) mb_idx_22(D);
  FlexCAN_SetRxIndividualMask (pBase_17, _7, mask_23(D));

  <bb 6> :
  if (disabled_19 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  status_26 = FlexCAN_Disable (pBase_17);
  if (status_26 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_27 = status_26;

  <bb 9> :
  # result_9 = PHI <result_8(6), result_8(7), result_27(8)>
  _28 = result_9;

  <bb 10> :
<L8>:
  return _28;

}


FlexCAN_Ip_ExitFreezeMode_Privileged (uint8 instance)
{
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType D.10960;
  int _1;
  Flexcan_Ip_StatusType _6;

  <bb 2> :
  _1 = (int) instance_2(D);
  base_4 = Flexcan_Ip_apxBase[_1];
  _6 = FlexCAN_ExitFreezeMode (base_4);

  <bb 3> :
<L0>:
  return _6;

}


FlexCAN_Ip_EnterFreezeMode_Privileged (uint8 instance)
{
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType D.10958;
  int _1;
  Flexcan_Ip_StatusType _6;

  <bb 2> :
  _1 = (int) instance_2(D);
  base_4 = Flexcan_Ip_apxBase[_1];
  _6 = FlexCAN_EnterFreezeMode (base_4);

  <bb 3> :
<L0>:
  return _6;

}


FlexCAN_Ip_SetRxMbGlobalMask_Privileged (uint8 instance, uint32 mask)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.10956;
  int _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool _5;
  int _6;
  Flexcan_Ip_StatusType _26;

  <bb 2> :
  result_12 = 0;
  status_13 = 0;
  _1 = (int) instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnabled (pBase_16);
  _3 = (int) _2;
  _4 = _3 != 0;
  _5 = ~_4;
  _6 = (int) _5;
  disabled_18 = (boolean) _6;
  if (disabled_18 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_20 = FlexCAN_Enable (pBase_16);

  <bb 4> :
  # result_7 = PHI <result_12(2), result_20(3)>
  if (result_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  FlexCAN_SetRxMsgBuffGlobalMask (pBase_16, mask_21(D));

  <bb 6> :
  if (disabled_18 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  status_24 = FlexCAN_Disable (pBase_16);
  if (status_24 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_25 = status_24;

  <bb 9> :
  # result_8 = PHI <result_7(6), result_7(7), result_25(8)>
  _26 = result_8;

  <bb 10> :
<L8>:
  return _26;

}


FlexCAN_Ip_SendBlocking (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data, uint32 timeout_ms)
{
  volatile uint32 * flexcan_mb;
  uint32 flexcan_mb_config;
  uint32 uS2Ticks;
  uint32 mS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.10945;
  long unsigned int D.10938;
  long unsigned int D.10931;
  int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  unsigned char _6;
  int _7;
  <unnamed type> _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  unsigned char _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  int _19;
  long unsigned int _55;
  long unsigned int _72;
  Flexcan_Ip_StatusType _80;

  <bb 2> :
  _1 = (int) instance_33(D);
  base_35 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_33(D);
  state_36 = Flexcan_Ip_apxState[_2];
  timeStart = 0;
  timeElapsed_38 = 0;
  _3 = timeout_ms_39(D) * 1000;
  mS2Ticks_41 = OsIf_MicrosToTicks (_3, 0);
  uS2Ticks_42 = 0;
  flexcan_mb_config_43 = 0;
  flexcan_mb_44 = 0B;
  result_50 = FlexCAN_StartSendData (instance_33(D), mb_idx_45(D), tx_info_46(D), msg_id_47(D), mb_data_48(D));
  if (result_50 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 3> :
  _4 = OsIf_GetCounter (0);
  timeStart = _4;
  goto <bb 6>; [INV]

  <bb 4> :
  _55 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_56 = _55 + timeElapsed_25;
  if (timeElapsed_56 >= mS2Ticks_41)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  result_57 = 3;
  goto <bb 7>; [INV]

  <bb 6> :
  # timeElapsed_25 = PHI <timeElapsed_38(3), timeElapsed_56(4)>
  _5 = (long unsigned int) mb_idx_45(D);
  _6 = FlexCAN_GetBuffStatusFlag (base_35, _5);
  if (_6 != 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # result_20 = PHI <result_57(5), result_50(6)>
  if (result_20 == 3)
    goto <bb 8>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 8> :
  _7 = (int) mb_idx_45(D);
  _8 ={v} state_36->mbs[_7].state;
  if (_8 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 9> :
  _9 = (long unsigned int) mb_idx_45(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_35, _9);
  _10 = (long unsigned int) mb_idx_45(D);
  flexcan_mb_60 = FlexCAN_GetMsgBuffRegion (base_35, _10);
  flexcan_mb_config_61 ={v} *flexcan_mb_60;
  flexcan_mb_config_62 = flexcan_mb_config_61 & 4043309055;
  flexcan_mb_config_63 = flexcan_mb_config_62 | 150994944;
  *flexcan_mb_60 ={v} flexcan_mb_config_63;
  uS2Ticks_66 = OsIf_MicrosToTicks (100, 0);
  _11 = OsIf_GetCounter (0);
  timeStart = _11;
  timeElapsed_69 = 0;
  goto <bb 12>; [INV]

  <bb 10> :
  _72 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_73 = _72 + timeElapsed_26;
  if (timeElapsed_73 >= uS2Ticks_66)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  result_74 = 3;
  goto <bb 13>; [INV]

  <bb 12> :
  # timeElapsed_26 = PHI <timeElapsed_69(9), timeElapsed_73(10)>
  _12 = (long unsigned int) mb_idx_45(D);
  _13 = FlexCAN_GetBuffStatusFlag (base_35, _12);
  if (_13 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # result_21 = PHI <result_74(11), result_20(12)>
  flexcan_mb_config_75 ={v} *flexcan_mb_60;
  _14 = flexcan_mb_config_75 >> 24;
  _15 = _14 & 15;
  if (_15 == 8)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  result_76 = 0;

  <bb 15> :
  # result_22 = PHI <result_21(13), result_76(14)>
  _16 = flexcan_mb_config_75 >> 24;
  _17 = _16 & 15;
  if (_17 == 9)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  result_77 = 3;

  <bb 17> :
  # result_23 = PHI <result_20(7), result_20(8), result_22(15), result_77(16)>
  _18 = (long unsigned int) mb_idx_45(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_35, _18);
  _19 = (int) mb_idx_45(D);
  state_36->mbs[_19].state ={v} 0;

  <bb 18> :
  # result_24 = PHI <result_50(2), result_23(17)>
  _80 = result_24;
  timeStart ={v} {CLOBBER};

  <bb 19> :
<L21>:
  return _80;

}


FlexCAN_Busoff_Error_IRQHandler (uint8 instance)
{
  boolean isSpuriousInt;
  uint32 u32ErrStatus;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;
  int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _6;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _7;
  long unsigned int _8;
  long unsigned int _9;
  signed int _10;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _11;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _16;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _21;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _26;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _27;

  <bb 2> :
  _1 = (int) instance_52(D);
  pBase_54 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_52(D);
  state_55 = Flexcan_Ip_apxState[_2];
  u32ErrStatus_56 = 0;
  isSpuriousInt_57 = 1;
  if (state_55 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 3> :
  u32ErrStatus_58 ={v} pBase_54->ESR1;
  _3 = u32ErrStatus_58 & 2;
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _4 ={v} pBase_54->CTRL1;
  _5 = _4 & 16384;
  if (_5 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  pBase_54->ESR1 ={v} 2;
  _6 = state_55->error_callback;
  if (_6 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _7 = state_55->error_callback;
  _7 (instance_52(D), 9, u32ErrStatus_58, state_55);
  u32ErrStatus_61 ={v} pBase_54->ESR1;

  <bb 7> :
  # u32ErrStatus_28 = PHI <u32ErrStatus_58(5), u32ErrStatus_61(6)>
  isSpuriousInt_62 = 0;

  <bb 8> :
  # u32ErrStatus_29 = PHI <u32ErrStatus_58(3), u32ErrStatus_58(4), u32ErrStatus_28(7)>
  # isSpuriousInt_36 = PHI <isSpuriousInt_57(3), isSpuriousInt_57(4), isSpuriousInt_62(7)>
  _8 = u32ErrStatus_29 & 1048576;
  if (_8 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 9> :
  _9 ={v} pBase_54->CTRL2;
  _10 = (signed int) _9;
  if (_10 < 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  pBase_54->ESR1 ={v} 1048576;
  _11 = state_55->error_callback;
  if (_11 != 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _12 = state_55->error_callback;
  _12 (instance_52(D), 10, u32ErrStatus_29, state_55);
  u32ErrStatus_65 ={v} pBase_54->ESR1;

  <bb 12> :
  # u32ErrStatus_30 = PHI <u32ErrStatus_29(10), u32ErrStatus_65(11)>
  isSpuriousInt_66 = 0;

  <bb 13> :
  # u32ErrStatus_31 = PHI <u32ErrStatus_29(8), u32ErrStatus_29(9), u32ErrStatus_30(12)>
  # isSpuriousInt_37 = PHI <isSpuriousInt_36(8), isSpuriousInt_36(9), isSpuriousInt_66(12)>
  _13 = u32ErrStatus_31 & 131072;
  if (_13 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 14> :
  _14 ={v} pBase_54->CTRL1;
  _15 = _14 & 2048;
  if (_15 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 15> :
  pBase_54->ESR1 ={v} 131072;
  _16 = state_55->error_callback;
  if (_16 != 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  _17 = state_55->error_callback;
  _17 (instance_52(D), 13, u32ErrStatus_31, state_55);
  u32ErrStatus_69 ={v} pBase_54->ESR1;

  <bb 17> :
  # u32ErrStatus_32 = PHI <u32ErrStatus_31(15), u32ErrStatus_69(16)>
  isSpuriousInt_70 = 0;

  <bb 18> :
  # u32ErrStatus_33 = PHI <u32ErrStatus_31(13), u32ErrStatus_31(14), u32ErrStatus_32(17)>
  # isSpuriousInt_38 = PHI <isSpuriousInt_37(13), isSpuriousInt_37(14), isSpuriousInt_70(17)>
  _18 = u32ErrStatus_33 & 65536;
  if (_18 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 19> :
  _19 ={v} pBase_54->CTRL1;
  _20 = _19 & 1024;
  if (_20 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 20> :
  pBase_54->ESR1 ={v} 65536;
  _21 = state_55->error_callback;
  if (_21 != 0B)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  _22 = state_55->error_callback;
  _22 (instance_52(D), 12, u32ErrStatus_33, state_55);
  u32ErrStatus_73 ={v} pBase_54->ESR1;

  <bb 22> :
  # u32ErrStatus_34 = PHI <u32ErrStatus_33(20), u32ErrStatus_73(21)>
  isSpuriousInt_74 = 0;

  <bb 23> :
  # u32ErrStatus_35 = PHI <u32ErrStatus_33(18), u32ErrStatus_33(19), u32ErrStatus_34(22)>
  # isSpuriousInt_39 = PHI <isSpuriousInt_38(18), isSpuriousInt_38(19), isSpuriousInt_74(22)>
  _23 = u32ErrStatus_35 & 4;
  if (_23 != 0)
    goto <bb 24>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 24> :
  _24 ={v} pBase_54->CTRL1;
  _25 = _24 & 32768;
  if (_25 != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 25> :
  pBase_54->ESR1 ={v} 4;
  _26 = state_55->error_callback;
  if (_26 != 0B)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  _27 = state_55->error_callback;
  _27 (instance_52(D), 11, u32ErrStatus_35, state_55);

  <bb 27> :
  isSpuriousInt_77 = 0;

  <bb 28> :
  # isSpuriousInt_40 = PHI <isSpuriousInt_57(2), isSpuriousInt_39(23), isSpuriousInt_39(24), isSpuriousInt_77(27)>
  if (isSpuriousInt_40 != 0)
    goto <bb 29>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 29> :
  pBase_54->ESR1 ={v} 3866630;

  <bb 30> :
  return;

}


FlexCAN_Ip_GetControllerRxErrorCounter (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  uint8 D.10893;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  uint8 _7;

  <bb 2> :
  _1 = (int) instance_4(D);
  base_6 = Flexcan_Ip_apxBase[_1];
  _2 ={v} base_6->ECR;
  _3 = _2 >> 8;
  _7 = (uint8) _3;

  <bb 3> :
<L0>:
  return _7;

}


FlexCAN_Ip_GetControllerTxErrorCounter (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  uint8 D.10891;
  int _1;
  long unsigned int _2;
  uint8 _6;

  <bb 2> :
  _1 = (int) instance_3(D);
  base_5 = Flexcan_Ip_apxBase[_1];
  _2 ={v} base_5->ECR;
  _6 = (uint8) _2;

  <bb 3> :
<L0>:
  return _6;

}


FlexCAN_Ip_GetErrorStatus (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  uint32 D.10889;
  int _1;
  uint32 _5;

  <bb 2> :
  _1 = (int) instance_2(D);
  base_4 = Flexcan_Ip_apxBase[_1];
  _5 ={v} base_4->ESR1;

  <bb 3> :
<L0>:
  return _5;

}


FlexCAN_Ip_ClearErrorStatus (uint8 instance, uint32 error)
{
  struct FLEXCAN_Type * base;
  int _1;

  <bb 2> :
  _1 = (int) instance_2(D);
  base_4 = Flexcan_Ip_apxBase[_1];
  base_4->ESR1 ={v} error_5(D);
  return;

}


FlexCAN_IRQHandler (uint8 instance, uint32 startMbIdx, uint32 endMbIdx, boolean bEnhancedFifoExisted)
{
  uint32 mb_idx;
  boolean bIsSpuriousInt;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  uint32 flag_reg;
  uint32 u32MbHandle;
  int _1;
  int _2;
  unsigned char _3;
  unsigned char _4;
  _Bool _5;
  <unnamed type> _6;
  <unnamed type> _7;
  unsigned char _8;
  <unnamed type> _9;
  _Bool _10;
  <unnamed type> _11;

  <bb 2> :
  u32MbHandle_25 = 0;
  flag_reg_26 = 0;
  _1 = (int) instance_27(D);
  base_29 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_27(D);
  state_30 = Flexcan_Ip_apxState[_2];
  bIsSpuriousInt_31 = 1;
  mb_idx_33 = endMbIdx_32(D);
  if (state_30 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 3> :
  _3 = FlexCAN_GetMsgBuffIntStatusFlag (base_29, mb_idx_33);
  flag_reg_44 = (uint32) _3;
  goto <bb 5>; [INV]

  <bb 4> :
  mb_idx_45 = mb_idx_16 + 4294967295;
  _4 = FlexCAN_GetMsgBuffIntStatusFlag (base_29, mb_idx_45);
  flag_reg_47 = (uint32) _4;

  <bb 5> :
  # flag_reg_13 = PHI <flag_reg_44(3), flag_reg_47(4)>
  # mb_idx_16 = PHI <mb_idx_33(3), mb_idx_45(4)>
  if (flag_reg_13 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  if (mb_idx_16 > startMbIdx_34(D))
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (flag_reg_13 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 8> :
  bIsSpuriousInt_48 = 0;
  u32MbHandle_49 = mb_idx_16;
  _5 = state_30->bIsLegacyFifoEn;
  if (_5 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (mb_idx_16 <= 7)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  FlexCAN_IRQHandlerRxFIFO (instance_27(D), mb_idx_16);
  u32MbHandle_51 = 0;
  goto <bb 13>; [INV]

  <bb 11> :
  _6 ={v} state_30->mbs[u32MbHandle_49].state;
  if (_6 == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  FlexCAN_IRQHandlerRxMB (instance_27(D), mb_idx_16);

  <bb 13> :
  # u32MbHandle_12 = PHI <u32MbHandle_51(10), u32MbHandle_49(11), u32MbHandle_49(12)>
  _7 ={v} state_30->mbs[u32MbHandle_12].state;
  if (_7 == 2)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  FlexCAN_IRQHandlerTxMB (instance_27(D), mb_idx_16);

  <bb 15> :
  _8 = FlexCAN_GetMsgBuffIntStatusFlag (base_29, mb_idx_16);
  if (_8 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 16> :
  _9 ={v} state_30->mbs[u32MbHandle_12].state;
  if (_9 == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  FlexCAN_ClearMsgBuffIntStatusFlag (base_29, mb_idx_16);

  <bb 18> :
  # bIsSpuriousInt_14 = PHI <bIsSpuriousInt_31(7), bIsSpuriousInt_48(15), bIsSpuriousInt_48(16), bIsSpuriousInt_48(17)>
  if (bEnhancedFifoExisted_36(D) != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 19> :
  _10 = FlexCAN_IsEnhancedRxFifoEnabled (base_29);
  if (_10 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 20> :
  _11 = state_30->transferType;
  if (_11 == 0)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  bIsSpuriousInt_58 = FlexCAN_ProcessIRQHandlerEnhancedRxFIFO (instance_27(D), bIsSpuriousInt_14);

  <bb 22> :
  # bIsSpuriousInt_15 = PHI <bIsSpuriousInt_14(18), bIsSpuriousInt_14(19), bIsSpuriousInt_14(20), bIsSpuriousInt_58(21)>
  if (bIsSpuriousInt_15 != 0)
    goto <bb 23>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 23> :
  FlexCAN_ProcessSpuriousInterruptMB (instance_27(D), startMbIdx_34(D), endMbIdx_32(D));
  goto <bb 29>; [INV]

  <bb 24> :
  mb_idx_35 = startMbIdx_34(D);
  goto <bb 26>; [INV]

  <bb 25> :
  FlexCAN_ClearMsgBuffIntStatusFlag (base_29, mb_idx_17);
  mb_idx_42 = mb_idx_17 + 1;

  <bb 26> :
  # mb_idx_17 = PHI <mb_idx_35(24), mb_idx_42(25)>
  if (mb_idx_17 <= endMbIdx_32(D))
    goto <bb 25>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 27> :
  if (bEnhancedFifoExisted_36(D) != 0)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 28> :
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base_29, 28);
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base_29, 29);
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base_29, 30);
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base_29, 31);

  <bb 29> :
  return;

}


FlexCAN_CompleteRxMessageFifoData (uint8 instance)
{
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  <unnamed type> _3;
  _Bool _4;
  _Bool _5;
  _Bool _6;

  <bb 2> :
  _1 = (int) instance_8(D);
  base_10 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_8(D);
  state_11 = Flexcan_Ip_apxState[_2];
  _3 = state_11->transferType;
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _4 = state_11->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_10, instance_8(D), 5, 0, _4);
  _5 = state_11->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_10, instance_8(D), 6, 0, _5);
  _6 = state_11->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_10, instance_8(D), 7, 0, _6);

  <bb 4> :
  state_11->mbs[0].pMBmessage = 0B;
  state_11->mbs[0].state ={v} 0;
  return;

}


FlexCAN_Ip_GetTransferStatus (uint8 instance, uint8 mb_idx)
{
  Flexcan_Ip_StatusType status;
  const struct Flexcan_Ip_StateType * state;
  Flexcan_Ip_StatusType D.10809;
  int _1;
  int _2;
  <unnamed type> _3;
  <unnamed type> _4;
  Flexcan_Ip_StatusType _15;

  <bb 2> :
  _1 = (int) instance_6(D);
  state_8 = Flexcan_Ip_apxState[_1];
  status_9 = 1;
  if (mb_idx_10(D) <= 95)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _2 = (int) mb_idx_10(D);
  _3 ={v} state_8->mbs[_2].state;
  if (_3 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  status_14 = 0;
  goto <bb 9>; [INV]

  <bb 5> :
  status_13 = 2;
  goto <bb 9>; [INV]

  <bb 6> :
  _4 ={v} state_8->enhancedFifoOutput.state;
  if (_4 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  status_12 = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  status_11 = 2;

  <bb 9> :
  # status_5 = PHI <status_13(5), status_12(7), status_11(8), status_14(4)>
  _15 = status_5;

  <bb 10> :
<L9>:
  return _15;

}


FlexCAN_Ip_ConfigRemoteResponseMb (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data)
{
  volatile uint32 * pMbAddr;
  const struct Flexcan_Ip_StateType * const state;
  struct FLEXCAN_Type * pBase;
  struct Flexcan_Ip_MsbuffCodeStatusType cs;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.10797;
  int _1;
  int _2;
  long unsigned int _3;
  <unnamed type> _4;
  long unsigned int _5;
  long unsigned int _6;
  _Bool _7;
  _Bool _8;
  _Bool _9;
  long unsigned int _10;
  _Bool _11;
  Flexcan_Ip_StatusType _36;

  <bb 2> :
  result_14 = 0;
  _1 = (int) instance_15(D);
  pBase_17 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_15(D);
  state_18 = Flexcan_Ip_apxState[_2];
  pMbAddr_19 = 0B;
  if (result_14 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _3 = tx_info_20(D)->data_length;
  cs.dataLen = _3;
  _4 = tx_info_20(D)->msg_id_type;
  cs.msgIdType = _4;
  cs.code = 10;
  cs.fd_enable = 0;
  cs.enable_brs = 0;
  cs.fd_padding = 0;
  _5 = (long unsigned int) mb_idx_27(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_17, _5);
  _6 = (long unsigned int) mb_idx_27(D);
  pMbAddr_30 = FlexCAN_GetMsgBuffRegion (pBase_17, _6);
  _7 = tx_info_20(D)->is_remote;
  FlexCAN_SetTxMsgBuff (pMbAddr_30, &cs, msg_id_31(D), mb_data_32(D), _7);
  _8 = tx_info_20(D)->is_polling;
  _9 = ~_8;
  if (_9 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _10 = (long unsigned int) mb_idx_27(D);
  _11 = state_18->isIntActive;
  result_35 = FlexCAN_SetMsgBuffIntCmd (pBase_17, instance_15(D), _10, 1, _11);

  <bb 5> :
  # result_12 = PHI <result_14(2), result_14(3), result_35(4)>
  _36 = result_12;
  cs ={v} {CLOBBER};

  <bb 6> :
<L5>:
  return _36;

}


FlexCAN_Ip_ConfigEnhancedRxFifo_Privileged (uint8 instance, const struct Flexcan_Ip_EnhancedIdTableType * id_filter_table)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.10791;
  int _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool _5;
  int _6;
  Flexcan_Ip_StatusType _26;

  <bb 2> :
  result_12 = 0;
  status_13 = 0;
  _1 = (int) instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnabled (pBase_16);
  _3 = (int) _2;
  _4 = _3 != 0;
  _5 = ~_4;
  _6 = (int) _5;
  disabled_18 = (boolean) _6;
  if (disabled_18 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_20 = FlexCAN_Enable (pBase_16);

  <bb 4> :
  # result_7 = PHI <result_12(2), result_20(3)>
  if (result_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  FlexCAN_SetEnhancedRxFifoFilter (pBase_16, id_filter_table_21(D));

  <bb 6> :
  if (disabled_18 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  status_24 = FlexCAN_Disable (pBase_16);
  if (status_24 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_25 = status_24;

  <bb 9> :
  # result_8 = PHI <result_7(6), result_7(7), result_25(8)>
  _26 = result_8;

  <bb 10> :
<L8>:
  return _26;

}


FlexCAN_Ip_ConfigRxFifo_Privileged (uint8 instance, Flexcan_Ip_RxFifoIdElementFormatType id_format, const struct Flexcan_Ip_IdTableType * id_filter_table)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.10781;
  int _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool _5;
  int _6;
  Flexcan_Ip_StatusType _27;

  <bb 2> :
  result_12 = 0;
  status_13 = 0;
  _1 = (int) instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnabled (pBase_16);
  _3 = (int) _2;
  _4 = _3 != 0;
  _5 = ~_4;
  _6 = (int) _5;
  disabled_18 = (boolean) _6;
  if (disabled_18 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_20 = FlexCAN_Enable (pBase_16);

  <bb 4> :
  # result_7 = PHI <result_12(2), result_20(3)>
  if (result_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  FlexCAN_SetRxFifoFilter (pBase_16, id_format_21(D), id_filter_table_22(D));

  <bb 6> :
  if (disabled_18 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  status_25 = FlexCAN_Disable (pBase_16);
  if (status_25 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_26 = status_25;

  <bb 9> :
  # result_8 = PHI <result_7(6), result_7(7), result_26(8)>
  _27 = result_8;

  <bb 10> :
<L8>:
  return _27;

}


FlexCAN_Ip_RxFifoBlocking (uint8 instance, struct Flexcan_Ip_MsgBuffType * data, uint32 timeout)
{
  const struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.10771;
  int _1;
  _Bool _2;
  _Bool _3;
  Flexcan_Ip_StatusType _26;

  <bb 2> :
  result_6 = 0;
  _1 = (int) instance_7(D);
  base_9 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnhancedRxFifoAvailable (base_9);
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _3 = FlexCAN_IsEnhancedRxFifoEnabled (base_9);
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  result_23 = FlexCAN_StartRxMessageEnhancedFifoData (instance_7(D), data_11(D));
  if (result_23 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  result_25 = FlexCAN_ProccessEnhancedRxFifo (instance_7(D), timeout_14(D));
  goto <bb 10>; [INV]

  <bb 6> :
  result_19 = FlexCAN_StartRxMessageFifoData (instance_7(D), data_11(D));
  if (result_19 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  result_21 = FlexCAN_ProccessLegacyRxFIFO (instance_7(D), timeout_14(D));
  goto <bb 10>; [INV]

  <bb 8> :
  result_13 = FlexCAN_StartRxMessageFifoData (instance_7(D), data_11(D));
  if (result_13 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  result_16 = FlexCAN_ProccessLegacyRxFIFO (instance_7(D), timeout_14(D));

  <bb 10> :
  # result_4 = PHI <result_19(6), result_13(8), result_16(9), result_25(5), result_23(4), result_21(7)>
  _26 = result_4;

  <bb 11> :
<L12>:
  return _26;

}


FlexCAN_Ip_RxFifo (uint8 instance, struct Flexcan_Ip_MsgBuffType * data)
{
  const struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.10755;
  int _1;
  _Bool _2;
  _Bool _3;
  Flexcan_Ip_StatusType _19;

  <bb 2> :
  result_6 = 0;
  _1 = (int) instance_7(D);
  base_9 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnhancedRxFifoAvailable (base_9);
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _3 = FlexCAN_IsEnhancedRxFifoEnabled (base_9);
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  result_18 = FlexCAN_StartRxMessageEnhancedFifoData (instance_7(D), data_11(D));
  goto <bb 7>; [INV]

  <bb 5> :
  result_16 = FlexCAN_StartRxMessageFifoData (instance_7(D), data_11(D));
  goto <bb 7>; [INV]

  <bb 6> :
  result_13 = FlexCAN_StartRxMessageFifoData (instance_7(D), data_11(D));

  <bb 7> :
  # result_4 = PHI <result_16(5), result_13(6), result_18(4)>
  _19 = result_4;

  <bb 8> :
<L6>:
  return _19;

}


FlexCAN_Ip_ReceiveBlocking (uint8 instance, uint8 mb_idx, struct Flexcan_Ip_MsgBuffType * data, boolean isPolling, uint32 u32TimeoutMs)
{
  struct FLEXCAN_Type * base;
  struct Flexcan_Ip_StateType * state;
  uint32 mS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.10746;
  long unsigned int D.10732;
  long unsigned int _1;
  int _2;
  int _3;
  _Bool _4;
  long unsigned int _5;
  _Bool _6;
  long unsigned int _7;
  long unsigned int _8;
  unsigned char _9;
  long unsigned int _10;
  int _11;
  <unnamed type> _12;
  _Bool _13;
  long unsigned int _14;
  _Bool _15;
  int _16;
  <unnamed type> _17;
  int _18;
  long unsigned int _50;
  Flexcan_Ip_StatusType _57;

  <bb 2> :
  timeStart = 0;
  timeElapsed_31 = 0;
  _1 = u32TimeoutMs_32(D) * 1000;
  mS2Ticks_34 = OsIf_MicrosToTicks (_1, 0);
  _2 = (int) instance_35(D);
  state_36 = Flexcan_Ip_apxState[_2];
  _3 = (int) instance_35(D);
  base_37 = Flexcan_Ip_apxBase[_3];
  result_42 = FlexCAN_StartRxMessageBufferData (instance_35(D), mb_idx_38(D), data_39(D), isPolling_40(D));
  if (result_42 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _4 = ~isPolling_40(D);
  if (_4 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _5 = (long unsigned int) mb_idx_38(D);
  _6 = state_36->isIntActive;
  result_44 = FlexCAN_SetMsgBuffIntCmd (base_37, instance_35(D), _5, 1, _6);

  <bb 5> :
  # result_19 = PHI <result_42(2), result_42(3), result_44(4)>
  if (result_19 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 6> :
  _7 = OsIf_GetCounter (0);
  timeStart = _7;
  goto <bb 12>; [INV]

  <bb 7> :
  if (isPolling_40(D) != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  _8 = (long unsigned int) mb_idx_38(D);
  _9 = FlexCAN_GetBuffStatusFlag (base_37, _8);
  if (_9 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _10 = (long unsigned int) mb_idx_38(D);
  FlexCAN_IRQHandlerRxMB (instance_35(D), _10);

  <bb 10> :
  _50 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_51 = _50 + timeElapsed_22;
  if (timeElapsed_51 >= mS2Ticks_34)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  result_52 = 3;
  goto <bb 13>; [INV]

  <bb 12> :
  # timeElapsed_22 = PHI <timeElapsed_31(6), timeElapsed_51(10)>
  _11 = (int) mb_idx_38(D);
  _12 ={v} state_36->mbs[_11].state;
  if (_12 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # result_20 = PHI <result_19(5), result_52(11), result_19(12)>
  if (result_20 == 3)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  _13 = ~isPolling_40(D);
  if (_13 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _14 = (long unsigned int) mb_idx_38(D);
  _15 = state_36->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_37, instance_35(D), _14, 0, _15);

  <bb 16> :
  if (result_20 != 4)
    goto <bb 17>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 17> :
  if (result_20 != 2)
    goto <bb 18>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 18> :
  _16 = (int) mb_idx_38(D);
  _17 ={v} state_36->mbs[_16].state;
  if (_17 == 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  result_56 = 0;
  goto <bb 21>; [INV]

  <bb 20> :
  _18 = (int) mb_idx_38(D);
  state_36->mbs[_18].state ={v} 0;
  result_55 = 3;

  <bb 21> :
  # result_21 = PHI <result_20(16), result_20(17), result_56(19), result_55(20)>
  _57 = result_21;
  timeStart ={v} {CLOBBER};

  <bb 22> :
<L27>:
  return _57;

}


FlexCAN_Ip_Receive (uint8 instance, uint8 mb_idx, struct Flexcan_Ip_MsgBuffType * data, boolean isPolling)
{
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.10720;
  int _1;
  int _2;
  _Bool _3;
  long unsigned int _4;
  _Bool _5;
  Flexcan_Ip_StatusType _19;

  <bb 2> :
  _1 = (int) instance_8(D);
  base_10 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_8(D);
  state_11 = Flexcan_Ip_apxState[_2];
  result_16 = FlexCAN_StartRxMessageBufferData (instance_8(D), mb_idx_12(D), data_13(D), isPolling_14(D));
  if (result_16 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _3 = ~isPolling_14(D);
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _4 = (long unsigned int) mb_idx_12(D);
  _5 = state_11->isIntActive;
  result_18 = FlexCAN_SetMsgBuffIntCmd (base_10, instance_8(D), _4, 1, _5);

  <bb 5> :
  # result_6 = PHI <result_16(2), result_16(3), result_18(4)>
  _19 = result_6;

  <bb 6> :
<L4>:
  return _19;

}


FlexCAN_Ip_ConfigRxMb (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * rx_info, uint32 msg_id)
{
  struct FLEXCAN_Type * base;
  struct Flexcan_Ip_MsbuffCodeStatusType cs;
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.10713;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  <unnamed type> _4;
  _Bool _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  Flexcan_Ip_StatusType _26;

  <bb 2> :
  eResult_9 = 0;
  _1 = (int) instance_10(D);
  base_12 = Flexcan_Ip_apxBase[_1];
  _2 = (long unsigned int) mb_idx_13(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_12, _2);
  _3 = rx_info_15(D)->data_length;
  cs.dataLen = _3;
  _4 = rx_info_15(D)->msg_id_type;
  cs.msgIdType = _4;
  _5 = rx_info_15(D)->fd_enable;
  cs.fd_enable = _5;
  cs.code = 15;
  _6 = (long unsigned int) mb_idx_13(D);
  FlexCAN_SetRxMsgBuff (base_12, _6, &cs, msg_id_20(D));
  cs.code = 0;
  _7 = (long unsigned int) mb_idx_13(D);
  FlexCAN_SetRxMsgBuff (base_12, _7, &cs, msg_id_20(D));
  cs.code = 4;
  _8 = (long unsigned int) mb_idx_13(D);
  FlexCAN_SetRxMsgBuff (base_12, _8, &cs, msg_id_20(D));
  _26 = eResult_9;
  cs ={v} {CLOBBER};

  <bb 3> :
<L1>:
  return _26;

}


FlexCAN_Ip_Send (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data)
{
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.10709;
  int _1;
  int _2;
  _Bool _3;
  _Bool _4;
  _Bool _5;
  _Bool _6;
  long unsigned int _7;
  _Bool _8;
  Flexcan_Ip_StatusType _25;

  <bb 2> :
  result_11 = 1;
  _1 = (int) instance_12(D);
  base_14 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_12(D);
  state_15 = Flexcan_Ip_apxState[_2];
  _3 = FlexCAN_IsListenOnlyModeEnabled (base_14);
  _4 = ~_3;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  result_22 = FlexCAN_StartSendData (instance_12(D), mb_idx_17(D), tx_info_18(D), msg_id_19(D), mb_data_20(D));
  if (result_22 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _5 = tx_info_18(D)->is_polling;
  _6 = ~_5;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _7 = (long unsigned int) mb_idx_17(D);
  _8 = state_15->isIntActive;
  result_24 = FlexCAN_SetMsgBuffIntCmd (base_14, instance_12(D), _7, 1, _8);

  <bb 6> :
  # result_9 = PHI <result_11(2), result_22(3), result_22(4), result_24(5)>
  _25 = result_9;

  <bb 7> :
<L6>:
  return _25;

}


FlexCAN_Ip_Init_Privileged (uint8 Flexcan_Ip_u8Instance, struct Flexcan_Ip_StateType * Flexcan_Ip_pState, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  uint32 i;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.10701;
  int _1;
  <unnamed type> _2;
  <unnamed type> _3;
  void (*<T7e3>) (uint8, Flexcan_Ip_EventType, uint32, const struct Flexcan_Ip_StateType *) _4;
  void (*<T7e3>) (uint8, Flexcan_Ip_EventType, uint32, const struct Flexcan_Ip_StateType *) _5;
  _Bool _6;
  _Bool _7;
  long unsigned int _8;
  int _9;
  Flexcan_Ip_StatusType _41;

  <bb 2> :
  eResult_13 = 0;
  _1 = (int) Flexcan_Ip_u8Instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  eResult_19 = FlexCAN_InitController (Flexcan_Ip_u8Instance_14(D), pBase_16, Flexcan_Ip_pData_17(D));
  if (eResult_19 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  FlexCAN_InitBaudrate (pBase_16, Flexcan_Ip_pData_17(D));
  _2 = Flexcan_Ip_pData_17(D)->flexcanMode;
  FlexCAN_SetOperationMode (pBase_16, _2);
  i_22 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  Flexcan_Ip_pState_23(D)->mbs[i_10].isPolling = 1;
  Flexcan_Ip_pState_23(D)->mbs[i_10].pMBmessage = 0B;
  Flexcan_Ip_pState_23(D)->mbs[i_10].state ={v} 0;
  Flexcan_Ip_pState_23(D)->mbs[i_10].time_stamp = 0;
  i_40 = i_10 + 1;

  <bb 5> :
  # i_10 = PHI <i_22(3), i_40(4)>
  if (i_10 <= 95)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  Flexcan_Ip_pState_23(D)->enhancedFifoOutput.isPolling = 1;
  Flexcan_Ip_pState_23(D)->enhancedFifoOutput.state ={v} 0;
  _3 = Flexcan_Ip_pData_17(D)->transfer_type;
  Flexcan_Ip_pState_23(D)->transferType = _3;
  _4 = Flexcan_Ip_pData_17(D)->Callback;
  Flexcan_Ip_pState_23(D)->callback = _4;
  Flexcan_Ip_pState_23(D)->callbackParam = 0B;
  _5 = Flexcan_Ip_pData_17(D)->ErrorCallback;
  Flexcan_Ip_pState_23(D)->error_callback = _5;
  Flexcan_Ip_pState_23(D)->errorCallbackParam = 0B;
  _6 = Flexcan_Ip_pData_17(D)->is_rx_fifo_needed;
  Flexcan_Ip_pState_23(D)->bIsLegacyFifoEn = _6;
  _7 = Flexcan_Ip_pData_17(D)->is_enhanced_rx_fifo_needed;
  Flexcan_Ip_pState_23(D)->bIsEnhancedFifoEn = _7;
  _8 = Flexcan_Ip_pData_17(D)->max_num_mb;
  Flexcan_Ip_pState_23(D)->u32MaxMbNum = _8;
  Flexcan_Ip_pState_23(D)->isIntActive = 1;
  _9 = (int) Flexcan_Ip_u8Instance_14(D);
  Flexcan_Ip_apxState[_9] = Flexcan_Ip_pState_23(D);

  <bb 7> :
  _41 = eResult_19;

  <bb 8> :
<L5>:
  return _41;

}


FlexCAN_AbortRxTransfer (uint8 u8Instance, uint8 mb_idx)
{
  volatile uint32 * flexcan_mb;
  uint32 flexcan_mb_config;
  uint32 val2;
  uint32 val1;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;
  int _1;
  int _2;
  int _3;
  _Bool _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  _Bool _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> :
  _1 = (int) u8Instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  _2 = (int) u8Instance_14(D);
  state_17 = Flexcan_Ip_apxState[_2];
  val1_18 = 0;
  val2_19 = 0;
  flexcan_mb_config_20 = 0;
  flexcan_mb_21 = 0B;
  _3 = (int) mb_idx_22(D);
  state_17->mbs[_3].state ={v} 0;
  _4 = state_17->bIsLegacyFifoEn;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _5 ={v} pBase_16->CTRL2;
  _6 = _5 >> 24;
  val1_33 = _6 & 15;
  val2_35 = RxFifoOcuppiedLastMsgBuff (val1_33);
  _7 = (long unsigned int) mb_idx_22(D);
  if (val2_35 < _7)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _8 = (long unsigned int) mb_idx_22(D);
  flexcan_mb_37 = FlexCAN_GetMsgBuffRegion (pBase_16, _8);
  flexcan_mb_config_38 ={v} *flexcan_mb_37;
  flexcan_mb_config_39 = flexcan_mb_config_38 & 4043309055;
  flexcan_mb_config_40 = flexcan_mb_config_39;
  *flexcan_mb_37 ={v} flexcan_mb_config_40;
  flexcan_mb_config_42 = flexcan_mb_config_40 & 4043309055;
  flexcan_mb_config_43 = flexcan_mb_config_42 | 67108864;
  *flexcan_mb_37 ={v} flexcan_mb_config_43;

  <bb 5> :
  if (mb_idx_22(D) == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _9 = state_17->isIntActive;
  FLEXCAN_ClearMsgBuffIntCmd (pBase_16, u8Instance_14(D), 5, _9);
  goto <bb 8>; [INV]

  <bb 7> :
  _10 = (long unsigned int) mb_idx_22(D);
  flexcan_mb_25 = FlexCAN_GetMsgBuffRegion (pBase_16, _10);
  flexcan_mb_config_26 ={v} *flexcan_mb_25;
  flexcan_mb_config_27 = flexcan_mb_config_26 & 4043309055;
  flexcan_mb_config_28 = flexcan_mb_config_27;
  *flexcan_mb_25 ={v} flexcan_mb_config_28;
  flexcan_mb_config_30 = flexcan_mb_config_28 & 4043309055;
  flexcan_mb_config_31 = flexcan_mb_config_30 | 67108864;
  *flexcan_mb_25 ={v} flexcan_mb_config_31;

  <bb 8> :
  _11 = (long unsigned int) mb_idx_22(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_16, _11);
  return;

}


FlexCAN_AbortTxTransfer (uint8 u8Instance, uint8 mb_idx)
{
  volatile uint32 * flexcan_mb;
  uint32 uS2Ticks;
  uint32 flexcan_mb_config;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType result;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.10687;
  long unsigned int D.10678;
  int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  unsigned char _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  int _12;
  long unsigned int _42;
  Flexcan_Ip_StatusType _50;

  <bb 2> :
  _1 = (int) u8Instance_19(D);
  pBase_21 = Flexcan_Ip_apxBase[_1];
  _2 = (int) u8Instance_19(D);
  state_22 = Flexcan_Ip_apxState[_2];
  result_23 = 0;
  timeStart = 0;
  timeElapsed_25 = 0;
  flexcan_mb_config_26 = 0;
  uS2Ticks_27 = 0;
  flexcan_mb_28 = 0B;
  _3 = (long unsigned int) mb_idx_29(D);
  flexcan_mb_31 = FlexCAN_GetMsgBuffRegion (pBase_21, _3);
  flexcan_mb_config_32 ={v} *flexcan_mb_31;
  flexcan_mb_config_33 = flexcan_mb_config_32 & 4043309055;
  flexcan_mb_config_34 = flexcan_mb_config_33 | 150994944;
  *flexcan_mb_31 ={v} flexcan_mb_config_34;
  uS2Ticks_37 = OsIf_MicrosToTicks (100, 0);
  _4 = OsIf_GetCounter (0);
  timeStart = _4;
  goto <bb 5>; [INV]

  <bb 3> :
  _42 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_43 = _42 + timeElapsed_16;
  if (timeElapsed_43 >= uS2Ticks_37)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  result_44 = 3;
  goto <bb 6>; [INV]

  <bb 5> :
  # timeElapsed_16 = PHI <timeElapsed_25(2), timeElapsed_43(3)>
  _5 = (long unsigned int) mb_idx_29(D);
  _6 = FlexCAN_GetBuffStatusFlag (pBase_21, _5);
  if (_6 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # result_13 = PHI <result_44(4), result_23(5)>
  if (result_13 != 3)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  flexcan_mb_config_45 ={v} *flexcan_mb_31;
  _7 = flexcan_mb_config_45 >> 24;
  _8 = _7 & 15;
  if (_8 == 8)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_46 = 5;

  <bb 9> :
  # result_14 = PHI <result_13(7), result_46(8)>
  _9 = flexcan_mb_config_45 >> 24;
  _10 = _9 & 15;
  if (_10 == 9)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  result_47 = 0;

  <bb 11> :
  # result_15 = PHI <result_13(6), result_14(9), result_47(10)>
  _11 = (long unsigned int) mb_idx_29(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_21, _11);
  _12 = (int) mb_idx_29(D);
  state_22->mbs[_12].state ={v} 0;
  _50 = result_15;
  timeStart ={v} {CLOBBER};

  <bb 12> :
<L12>:
  return _50;

}


FlexCAN_IRQHandlerEnhancedRxFIFO (uint8 instance, uint32 intType)
{
  struct Flexcan_Ip_MsgBuffType data;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  <unnamed type> _3;
  struct Flexcan_Ip_MsgBuffType * _4;
  struct Flexcan_Ip_MsgBuffType * _5;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _6;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _7;
  <unnamed type> _8;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _9;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _10;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _11;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _12;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _13;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _14;

  <bb 2> :
  _1 = (int) instance_22(D);
  base_24 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_22(D);
  state_25 = Flexcan_Ip_apxState[_2];
  switch (intType_26(D)) <default: <L18> [INV], case 28: <L0> [INV], case 29: <L9> [INV], case 30: <L12> [INV], case 31: <L15> [INV]>

  <bb 3> :
<L0>:
  _3 ={v} state_25->enhancedFifoOutput.state;
  if (_3 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  _4 = state_25->enhancedFifoOutput.pMBmessage;
  if (_4 == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  state_25->enhancedFifoOutput.pMBmessage = &data;

  <bb 6> :
  _5 = state_25->enhancedFifoOutput.pMBmessage;
  FlexCAN_ReadEnhancedRxFifo (base_24, _5);
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base_24, intType_26(D));
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base_24, 29);
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base_24, 30);
  state_25->enhancedFifoOutput.state ={v} 0;
  _6 = state_25->callback;
  if (_6 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _7 = state_25->callback;
  _7 (instance_22(D), 5, 255, state_25);

  <bb 8> :
  _8 ={v} state_25->enhancedFifoOutput.state;
  if (_8 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  FlexCAN_CompleteRxMessageEnhancedFifoData (instance_22(D));

  <bb 10> :
  goto <bb 21>; [INV]

  <bb 11> :
<L9>:
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base_24, intType_26(D));
  _9 = state_25->callback;
  if (_9 != 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _10 = state_25->callback;
  _10 (instance_22(D), 6, 255, state_25);

  <bb 13> :
  goto <bb 21>; [INV]

  <bb 14> :
<L12>:
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base_24, intType_26(D));
  _11 = state_25->callback;
  if (_11 != 0B)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _12 = state_25->callback;
  _12 (instance_22(D), 7, 255, state_25);

  <bb 16> :
  goto <bb 21>; [INV]

  <bb 17> :
<L15>:
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base_24, intType_26(D));
  _13 = state_25->callback;
  if (_13 != 0B)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  _14 = state_25->callback;
  _14 (instance_22(D), 8, 255, state_25);

  <bb 19> :
  goto <bb 21>; [INV]

  <bb 20> :
<L18>:

  <bb 21> :
  data ={v} {CLOBBER};
  return;

}


FlexCAN_ProcessIRQHandlerEnhancedRxFIFO (uint8 u8Instance, boolean bIsSpuriousIntPrevious)
{
  boolean bIsSpuriousInt;
  uint32 u32intType;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  boolean D.10862;
  int _1;
  int _2;
  unsigned char _3;
  unsigned char _4;
  _Bool _5;
  _Bool _6;
  boolean _20;

  <bb 2> :
  _1 = (int) u8Instance_12(D);
  base_14 = Flexcan_Ip_apxBase[_1];
  _2 = (int) u8Instance_12(D);
  state_15 = Flexcan_Ip_apxState[_2];
  u32intType_16 = 0;
  bIsSpuriousInt_18 = bIsSpuriousIntPrevious_17(D);
  u32intType_19 = 31;
  goto <bb 10>; [INV]

  <bb 3> :
  _3 = FlexCAN_GetEnhancedRxFIFOStatusFlag (base_14, u32intType_7);
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  _4 = FlexCAN_GetEnhancedRxFIFOIntStatusFlag (base_14, u32intType_7);
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  FlexCAN_IRQHandlerEnhancedRxFIFO (u8Instance_12(D), u32intType_7);
  bIsSpuriousInt_25 = 0;
  goto <bb 9>; [INV]

  <bb 6> :
  if (bIsSpuriousInt_9 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _5 = state_15->enhancedFifoOutput.isPolling;
  _6 = ~_5;
  if (_6 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  FlexCAN_ClearEnhancedRxFifoIntStatusFlag (base_14, u32intType_7);

  <bb 9> :
  # bIsSpuriousInt_8 = PHI <bIsSpuriousInt_9(3), bIsSpuriousInt_25(5), bIsSpuriousInt_9(6), bIsSpuriousInt_9(7), bIsSpuriousInt_9(8)>
  u32intType_26 = u32intType_7 + 4294967295;

  <bb 10> :
  # u32intType_7 = PHI <u32intType_19(2), u32intType_26(9)>
  # bIsSpuriousInt_9 = PHI <bIsSpuriousInt_18(2), bIsSpuriousInt_8(9)>
  if (u32intType_7 > 27)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  _20 = bIsSpuriousInt_9;

  <bb 12> :
<L13>:
  return _20;

}


FlexCAN_ProcessSpuriousInterruptMB (uint8 instance, uint32 startMbIdx, uint32 endMbIdx)
{
  uint32 u32MbHandle;
  uint32 mb_idx;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  unsigned char _3;
  unsigned char _4;
  _Bool _5;
  _Bool _6;
  _Bool _7;
  <unnamed type> _8;

  <bb 2> :
  _1 = (int) instance_13(D);
  base_15 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_13(D);
  state_16 = Flexcan_Ip_apxState[_2];
  mb_idx_17 = 0;
  u32MbHandle_18 = 0;
  mb_idx_20 = startMbIdx_19(D);
  goto <bb 12>; [INV]

  <bb 3> :
  _3 = FlexCAN_GetBuffStatusFlag (base_15, mb_idx_9);
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 4> :
  _4 = FlexCAN_GetBuffStatusImask (base_15, mb_idx_9);
  if (_4 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 5> :
  u32MbHandle_24 = mb_idx_9;
  _5 = state_16->bIsLegacyFifoEn;
  if (_5 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  if (mb_idx_9 <= 7)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  u32MbHandle_25 = 0;

  <bb 8> :
  # u32MbHandle_10 = PHI <u32MbHandle_24(5), u32MbHandle_24(6), u32MbHandle_25(7)>
  _6 = state_16->mbs[u32MbHandle_10].isPolling;
  _7 = ~_6;
  if (_7 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  FlexCAN_ClearMsgBuffIntStatusFlag (base_15, mb_idx_9);
  _8 ={v} state_16->mbs[u32MbHandle_10].state;
  if (_8 == 2)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  state_16->mbs[u32MbHandle_10].state ={v} 0;
  state_16->mbs[u32MbHandle_10].isPolling = 1;

  <bb 11> :
  mb_idx_29 = mb_idx_9 + 1;

  <bb 12> :
  # mb_idx_9 = PHI <mb_idx_20(2), mb_idx_29(11)>
  if (mb_idx_9 <= endMbIdx_21(D))
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  return;

}


FlexCAN_IRQHandlerRxFIFO (uint8 instance, uint32 mb_idx)
{
  struct Flexcan_Ip_MsgBuffType data;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  struct Flexcan_Ip_MsgBuffType * _3;
  <unnamed type> _4;
  struct Flexcan_Ip_MsgBuffType * _5;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _6;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _7;
  <unnamed type> _8;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _9;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _10;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _11;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _12;

  <bb 2> :
  _1 = (int) instance_19(D);
  base_21 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_19(D);
  state_22 = Flexcan_Ip_apxState[_2];
  _3 = state_22->mbs[0].pMBmessage;
  if (_3 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  state_22->mbs[0].pMBmessage = &data;

  <bb 4> :
  switch (mb_idx_24(D)) <default: <L15> [INV], case 5: <L2> [INV], case 6: <L9> [INV], case 7: <L12> [INV]>

  <bb 5> :
<L2>:
  _4 ={v} state_22->mbs[0].state;
  if (_4 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 6> :
  _5 = state_22->mbs[0].pMBmessage;
  FlexCAN_ReadRxFifo (base_21, _5);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_21, mb_idx_24(D));
  state_22->mbs[0].state ={v} 0;
  _6 = state_22->callback;
  if (_6 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _7 = state_22->callback;
  _7 (instance_19(D), 1, 0, state_22);

  <bb 8> :
  _8 ={v} state_22->mbs[0].state;
  if (_8 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  state_22->mbs[0].isPolling = 1;
  FlexCAN_CompleteRxMessageFifoData (instance_19(D));

  <bb 10> :
  goto <bb 18>; [INV]

  <bb 11> :
<L9>:
  FlexCAN_ClearMsgBuffIntStatusFlag (base_21, mb_idx_24(D));
  _9 = state_22->callback;
  if (_9 != 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _10 = state_22->callback;
  _10 (instance_19(D), 2, 0, state_22);

  <bb 13> :
  goto <bb 18>; [INV]

  <bb 14> :
<L12>:
  FlexCAN_ClearMsgBuffIntStatusFlag (base_21, mb_idx_24(D));
  _11 = state_22->callback;
  if (_11 != 0B)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _12 = state_22->callback;
  _12 (instance_19(D), 3, 0, state_22);

  <bb 16> :
  goto <bb 18>; [INV]

  <bb 17> :
<L15>:

  <bb 18> :
  data ={v} {CLOBBER};
  return;

}


FlexCAN_IRQHandlerTxMB (uint8 u8Instance, uint32 u32MbIdx)
{
  struct Flexcan_Ip_MsgBuffType mb;
  struct Flexcan_Ip_StateType * pState;
  struct FLEXCAN_Type * pBase;
  int _1;
  int _2;
  _Bool _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _9;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _10;
  <unnamed type> _11;
  _Bool _12;
  _Bool _13;
  _Bool _14;

  <bb 2> :
  _1 = (int) u8Instance_18(D);
  pBase_20 = Flexcan_Ip_apxBase[_1];
  _2 = (int) u8Instance_18(D);
  pState_21 = Flexcan_Ip_apxState[_2];
  _3 = pState_21->mbs[u32MbIdx_22(D)].isRemote;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  FlexCAN_LockRxMsgBuff (pBase_20, u32MbIdx_22(D));
  FlexCAN_GetMsgBuff (pBase_20, u32MbIdx_22(D), &mb);
  FlexCAN_UnlockRxMsgBuff (pBase_20);
  _4 = mb.time_stamp;
  pState_21->mbs[u32MbIdx_22(D)].time_stamp = _4;
  _5 = mb.cs;
  _6 = _5 >> 24;
  _7 = _6 & 15;
  if (_7 == 4)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_20, u32MbIdx_22(D));
  goto <bb 6>; [INV]

  <bb 5> :
  _8 = FlexCAN_GetMsgBuffTimestamp (pBase_20, u32MbIdx_22(D));
  pState_21->mbs[u32MbIdx_22(D)].time_stamp = _8;
  FlexCAN_UnlockRxMsgBuff (pBase_20);
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_20, u32MbIdx_22(D));

  <bb 6> :
  pState_21->mbs[u32MbIdx_22(D)].state ={v} 0;
  _9 = pState_21->callback;
  if (_9 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _10 = pState_21->callback;
  _10 (u8Instance_18(D), 4, u32MbIdx_22(D), pState_21);

  <bb 8> :
  _11 ={v} pState_21->mbs[u32MbIdx_22(D)].state;
  if (_11 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  pState_21->mbs[u32MbIdx_22(D)].isPolling = 1;
  _12 = pState_21->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_20, u8Instance_18(D), u32MbIdx_22(D), 0, _12);
  goto <bb 12>; [INV]

  <bb 10> :
  _13 = pState_21->mbs[u32MbIdx_22(D)].isPolling;
  if (_13 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _14 = pState_21->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_20, u8Instance_18(D), u32MbIdx_22(D), 0, _14);

  <bb 12> :
  mb ={v} {CLOBBER};
  return;

}


FlexCAN_IRQHandlerRxMB (uint8 instance, uint32 mb_idx)
{
  boolean bCurrentIntStat;
  struct Flexcan_Ip_MsgBuffType data;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  struct Flexcan_Ip_MsgBuffType * _3;
  struct Flexcan_Ip_MsgBuffType * _4;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _5;
  void (*<T7dd>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _6;
  <unnamed type> _7;
  _Bool _8;
  _Bool _9;
  _Bool _10;
  _Bool _11;
  _Bool _12;
  _Bool _13;

  <bb 2> :
  _1 = (int) instance_17(D);
  base_19 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_17(D);
  state_20 = Flexcan_Ip_apxState[_2];
  bCurrentIntStat_21 = 0;
  _3 = state_20->mbs[mb_idx_22(D)].pMBmessage;
  if (_3 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  state_20->mbs[mb_idx_22(D)].pMBmessage = &data;

  <bb 4> :
  FlexCAN_LockRxMsgBuff (base_19, mb_idx_22(D));
  _4 = state_20->mbs[mb_idx_22(D)].pMBmessage;
  FlexCAN_GetMsgBuff (base_19, mb_idx_22(D), _4);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_19, mb_idx_22(D));
  FlexCAN_UnlockRxMsgBuff (base_19);
  state_20->mbs[mb_idx_22(D)].state ={v} 0;
  bCurrentIntStat_29 = state_20->mbs[mb_idx_22(D)].isPolling;
  _5 = state_20->callback;
  if (_5 != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _6 = state_20->callback;
  _6 (instance_17(D), 0, mb_idx_22(D), state_20);

  <bb 6> :
  _7 ={v} state_20->mbs[mb_idx_22(D)].state;
  if (_7 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _8 = state_20->mbs[mb_idx_22(D)].isPolling;
  _9 = ~_8;
  if (_9 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  state_20->mbs[mb_idx_22(D)].isPolling = 1;
  _10 = state_20->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_19, instance_17(D), mb_idx_22(D), 0, _10);
  goto <bb 12>; [INV]

  <bb 9> :
  _11 = ~bCurrentIntStat_29;
  if (_11 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  _12 = state_20->mbs[mb_idx_22(D)].isPolling;
  if (_12 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _13 = state_20->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_19, instance_17(D), mb_idx_22(D), 0, _13);

  <bb 12> :
  data ={v} {CLOBBER};
  return;

}


FlexCAN_StartRxMessageFifoData (uint8 instance, struct Flexcan_Ip_MsgBuffType * data)
{
  Flexcan_Ip_StatusType eResult;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType D.10635;
  int _1;
  int _2;
  <unnamed type> _3;
  <unnamed type> _4;
  <unnamed type> _5;
  _Bool _6;
  _Bool _7;
  _Bool _8;
  Flexcan_Ip_StatusType _28;

  <bb 2> :
  base_12 = 0B;
  state_13 = 0B;
  eResult_14 = 0;
  _1 = (int) instance_15(D);
  base_17 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_15(D);
  state_18 = Flexcan_Ip_apxState[_2];
  _3 ={v} state_18->mbs[0].state;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  eResult_27 = 2;
  goto <bb 8>; [INV]

  <bb 4> :
  state_18->mbs[0].state ={v} 1;
  _4 = state_18->transferType;
  if (_4 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  state_18->mbs[0].isPolling = 1;

  <bb 6> :
  state_18->mbs[0].pMBmessage = data_21(D);
  _5 = state_18->transferType;
  if (_5 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  state_18->mbs[0].isPolling = 0;
  _6 = state_18->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_17, instance_15(D), 6, 1, _6);
  _7 = state_18->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_17, instance_15(D), 7, 1, _7);
  _8 = state_18->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_17, instance_15(D), 5, 1, _8);

  <bb 8> :
  # eResult_9 = PHI <eResult_27(3), eResult_14(6), eResult_14(7)>
  _28 = eResult_9;

  <bb 9> :
<L7>:
  return _28;

}


FlexCAN_StartSendData (uint8 Flexcan_Ip_u8Instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data)
{
  volatile uint32 * pMbAddr;
  struct FLEXCAN_Type * base;
  struct Flexcan_Ip_StateType * state;
  struct Flexcan_Ip_MsbuffCodeStatusType cs;
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.10625;
  int _1;
  int _2;
  int _3;
  <unnamed type> _4;
  long unsigned int _5;
  int _6;
  int _7;
  int _8;
  _Bool _9;
  int _10;
  _Bool _11;
  long unsigned int _12;
  <unnamed type> _13;
  _Bool _14;
  unsigned char _15;
  _Bool _16;
  _Bool _17;
  long unsigned int _18;
  Flexcan_Ip_StatusType _48;

  <bb 2> :
  eResult_22 = 0;
  _1 = (int) Flexcan_Ip_u8Instance_23(D);
  state_25 = Flexcan_Ip_apxState[_1];
  _2 = (int) Flexcan_Ip_u8Instance_23(D);
  base_26 = Flexcan_Ip_apxBase[_2];
  pMbAddr_27 = 0B;
  _3 = (int) mb_idx_28(D);
  _4 ={v} state_25->mbs[_3].state;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  eResult_47 = 2;
  goto <bb 8>; [INV]

  <bb 4> :
  _5 = (long unsigned int) mb_idx_28(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_26, _5);
  _6 = (int) mb_idx_28(D);
  state_25->mbs[_6].state ={v} 2;
  _7 = (int) mb_idx_28(D);
  state_25->mbs[_7].time_stamp = 0;
  _8 = (int) mb_idx_28(D);
  _9 = tx_info_32(D)->is_polling;
  state_25->mbs[_8].isPolling = _9;
  _10 = (int) mb_idx_28(D);
  _11 = tx_info_32(D)->is_remote;
  state_25->mbs[_10].isRemote = _11;
  _12 = tx_info_32(D)->data_length;
  cs.dataLen = _12;
  _13 = tx_info_32(D)->msg_id_type;
  cs.msgIdType = _13;
  _14 = tx_info_32(D)->fd_enable;
  cs.fd_enable = _14;
  _15 = tx_info_32(D)->fd_padding;
  cs.fd_padding = _15;
  _16 = tx_info_32(D)->enable_brs;
  cs.enable_brs = _16;
  _17 = tx_info_32(D)->is_remote;
  if (_17 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  cs.code = 28;
  goto <bb 7>; [INV]

  <bb 6> :
  cs.code = 12;

  <bb 7> :
  _18 = (long unsigned int) mb_idx_28(D);
  pMbAddr_43 = FlexCAN_GetMsgBuffRegion (base_26, _18);
  FlexCAN_SetTxMsgBuff (pMbAddr_43, &cs, msg_id_44(D), mb_data_45(D), 0);

  <bb 8> :
  # eResult_19 = PHI <eResult_47(3), eResult_22(7)>
  _48 = eResult_19;
  cs ={v} {CLOBBER};

  <bb 9> :
<L7>:
  return _48;

}


FlexCAN_StartRxMessageBufferData (uint8 instance, uint8 mb_idx, struct Flexcan_Ip_MsgBuffType * data, boolean isPolling)
{
  struct Flexcan_Ip_StateType * state;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.10617;
  int _1;
  int _2;
  <unnamed type> _3;
  int _4;
  int _5;
  int _6;
  Flexcan_Ip_StatusType _20;

  <bb 2> :
  result_9 = 0;
  _1 = (int) instance_10(D);
  state_12 = Flexcan_Ip_apxState[_1];
  _2 = (int) mb_idx_13(D);
  _3 ={v} state_12->mbs[_2].state;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_19 = 2;
  goto <bb 5>; [INV]

  <bb 4> :
  _4 = (int) mb_idx_13(D);
  state_12->mbs[_4].state ={v} 1;
  _5 = (int) mb_idx_13(D);
  state_12->mbs[_5].pMBmessage = data_15(D);
  _6 = (int) mb_idx_13(D);
  state_12->mbs[_6].isPolling = isPolling_17(D);

  <bb 5> :
  # result_7 = PHI <result_19(3), result_9(4)>
  _20 = result_7;

  <bb 6> :
<L3>:
  return _20;

}


FlexCAN_ProccessLegacyRxFIFO (uint8 u8Instance, uint32 u32TimeoutMs)
{
  uint32 u32intType;
  uint32 mS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  struct FLEXCAN_Type * pBase;
  struct Flexcan_Ip_StateType * pState;
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.10579;
  long unsigned int D.10572;
  int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  <unnamed type> _5;
  unsigned char _6;
  <unnamed type> _7;
  <unnamed type> _8;
  _Bool _9;
  _Bool _10;
  _Bool _11;
  <unnamed type> _12;
  long unsigned int _42;
  Flexcan_Ip_StatusType _51;

  <bb 2> :
  eResult_24 = 0;
  _1 = (int) u8Instance_25(D);
  pState_27 = Flexcan_Ip_apxState[_1];
  _2 = (int) u8Instance_25(D);
  pBase_28 = Flexcan_Ip_apxBase[_2];
  timeStart = 0;
  timeElapsed_30 = 0;
  _3 = u32TimeoutMs_31(D) * 1000;
  mS2Ticks_33 = OsIf_MicrosToTicks (_3, 0);
  u32intType_34 = 0;
  _4 = OsIf_GetCounter (0);
  timeStart = _4;
  goto <bb 11>; [INV]

  <bb 3> :
  _5 = pState_27->transferType;
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  u32intType_37 = 7;
  goto <bb 8>; [INV]

  <bb 5> :
  _6 = FlexCAN_GetBuffStatusFlag (pBase_28, u32intType_16);
  if (_6 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  FlexCAN_IRQHandlerRxFIFO (u8Instance_25(D), u32intType_16);

  <bb 7> :
  u32intType_40 = u32intType_16 + 4294967295;

  <bb 8> :
  # u32intType_16 = PHI <u32intType_37(4), u32intType_40(7)>
  if (u32intType_16 > 4)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _42 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_43 = _42 + timeElapsed_15;
  if (timeElapsed_43 >= mS2Ticks_33)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  eResult_44 = 3;
  goto <bb 12>; [INV]

  <bb 11> :
  # timeElapsed_15 = PHI <timeElapsed_30(2), timeElapsed_43(9)>
  _7 ={v} pState_27->mbs[0].state;
  if (_7 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # eResult_13 = PHI <eResult_44(10), eResult_24(11)>
  if (eResult_13 == 3)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  _8 = pState_27->transferType;
  if (_8 != 1)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  _9 = pState_27->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_28, u8Instance_25(D), 5, 0, _9);
  _10 = pState_27->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_28, u8Instance_25(D), 6, 0, _10);
  _11 = pState_27->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_28, u8Instance_25(D), 7, 0, _11);

  <bb 15> :
  _12 ={v} pState_27->mbs[0].state;
  switch (_12) <default: <L18> [INV], case 0: <L17> [INV], case 1: <L16> [INV]>

  <bb 16> :
<L16>:
  pState_27->mbs[0].state ={v} 0;
  goto <bb 19>; [INV]

  <bb 17> :
<L17>:
  eResult_49 = 0;
  goto <bb 19>; [INV]

  <bb 18> :
<L18>:
  eResult_50 = 1;

  <bb 19> :
  # eResult_14 = PHI <eResult_13(16), eResult_49(17), eResult_50(18)>
  _51 = eResult_14;
  timeStart ={v} {CLOBBER};

  <bb 20> :
<L21>:
  return _51;

}


FlexCAN_ProccessEnhancedRxFifo (uint8 u8Instance, uint32 u32TimeoutMs)
{
  uint32 u32intType;
  uint32 mS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  struct FLEXCAN_Type * pBase;
  struct Flexcan_Ip_StateType * pState;
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.10563;
  long unsigned int D.10556;
  int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  <unnamed type> _5;
  unsigned char _6;
  <unnamed type> _7;
  <unnamed type> _8;
  <unnamed type> _9;
  long unsigned int _39;
  Flexcan_Ip_StatusType _46;

  <bb 2> :
  eResult_21 = 0;
  _1 = (int) u8Instance_22(D);
  pState_24 = Flexcan_Ip_apxState[_1];
  _2 = (int) u8Instance_22(D);
  pBase_25 = Flexcan_Ip_apxBase[_2];
  timeStart = 0;
  timeElapsed_27 = 0;
  _3 = u32TimeoutMs_28(D) * 1000;
  mS2Ticks_30 = OsIf_MicrosToTicks (_3, 0);
  u32intType_31 = 0;
  _4 = OsIf_GetCounter (0);
  timeStart = _4;
  goto <bb 11>; [INV]

  <bb 3> :
  _5 = pState_24->transferType;
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  u32intType_34 = 31;
  goto <bb 8>; [INV]

  <bb 5> :
  _6 = FlexCAN_GetEnhancedRxFIFOStatusFlag (pBase_25, u32intType_13);
  if (_6 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  FlexCAN_IRQHandlerEnhancedRxFIFO (u8Instance_22(D), u32intType_13);

  <bb 7> :
  u32intType_37 = u32intType_13 + 4294967295;

  <bb 8> :
  # u32intType_13 = PHI <u32intType_34(4), u32intType_37(7)>
  if (u32intType_13 > 27)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _39 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_40 = _39 + timeElapsed_12;
  if (timeElapsed_40 >= mS2Ticks_30)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  eResult_41 = 3;
  goto <bb 12>; [INV]

  <bb 11> :
  # timeElapsed_12 = PHI <timeElapsed_27(2), timeElapsed_40(9)>
  _7 ={v} pState_24->enhancedFifoOutput.state;
  if (_7 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # eResult_10 = PHI <eResult_41(10), eResult_21(11)>
  if (eResult_10 == 3)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  _8 = pState_24->transferType;
  if (_8 != 1)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  FlexCAN_SetEnhancedRxFifoIntAll (pBase_25, 0);

  <bb 15> :
  _9 ={v} pState_24->enhancedFifoOutput.state;
  switch (_9) <default: <L18> [INV], case 0: <L17> [INV], case 1: <L16> [INV]>

  <bb 16> :
<L16>:
  pState_24->enhancedFifoOutput.state ={v} 0;
  goto <bb 19>; [INV]

  <bb 17> :
<L17>:
  eResult_44 = 0;
  goto <bb 19>; [INV]

  <bb 18> :
<L18>:
  eResult_45 = 1;

  <bb 19> :
  # eResult_11 = PHI <eResult_10(16), eResult_44(17), eResult_45(18)>
  _46 = eResult_11;
  timeStart ={v} {CLOBBER};

  <bb 20> :
<L21>:
  return _46;

}


FlexCAN_StartRxMessageEnhancedFifoData (uint8 instance, struct Flexcan_Ip_MsgBuffType * data)
{
  Flexcan_Ip_StatusType eResult;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType D.10550;
  int _1;
  int _2;
  <unnamed type> _3;
  <unnamed type> _4;
  _Bool _5;
  <unnamed type> _6;
  Flexcan_Ip_StatusType _22;

  <bb 2> :
  _1 = (int) instance_10(D);
  base_12 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_10(D);
  state_13 = Flexcan_Ip_apxState[_2];
  eResult_14 = 0;
  _3 ={v} state_13->enhancedFifoOutput.state;
  if (_3 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  eResult_21 = 2;
  goto <bb 9>; [INV]

  <bb 4> :
  state_13->enhancedFifoOutput.state ={v} 1;
  state_13->enhancedFifoOutput.pMBmessage = data_16(D);
  _4 = state_13->transferType;
  if (_4 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  state_13->enhancedFifoOutput.isPolling = 0;
  _5 = state_13->isIntActive;
  if (_5 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  FlexCAN_SetEnhancedRxFifoIntAll (base_12, 1);

  <bb 7> :
  _6 = state_13->transferType;
  if (_6 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  state_13->enhancedFifoOutput.isPolling = 1;

  <bb 9> :
  # eResult_7 = PHI <eResult_21(3), eResult_14(7), eResult_14(8)>
  _22 = eResult_7;

  <bb 10> :
<L9>:
  return _22;

}


FlexCAN_CompleteRxMessageEnhancedFifoData (uint8 instance)
{
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  _Bool _3;
  _Bool _4;

  <bb 2> :
  _1 = (int) instance_6(D);
  base_8 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_6(D);
  state_9 = Flexcan_Ip_apxState[_2];
  _3 = state_9->enhancedFifoOutput.isPolling;
  _4 = ~_3;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  state_9->enhancedFifoOutput.isPolling = 1;
  FlexCAN_SetEnhancedRxFifoIntAll (base_8, 0);

  <bb 4> :
  state_9->enhancedFifoOutput.pMBmessage = 0B;
  state_9->enhancedFifoOutput.state ={v} 0;
  return;

}


FlexCAN_InitBaudrate (struct FLEXCAN_Type * pBase, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  _Bool _1;
  _Bool _2;
  long unsigned int _3;
  long unsigned int _4;
  const struct Flexcan_Ip_TimeSegmentType * _5;
  _Bool _6;
  const struct Flexcan_Ip_TimeSegmentType * _7;
  long unsigned int _8;
  long unsigned int _9;
  _Bool _10;
  const struct Flexcan_Ip_TimeSegmentType * _11;
  const struct Flexcan_Ip_TimeSegmentType * _12;
  const struct Flexcan_Ip_TimeSegmentType * _13;

  <bb 2> :
  _1 = Flexcan_Ip_pData_16(D)->fd_enable;
  FlexCAN_EnableExtCbt (pBase_17(D), _1);
  _2 = Flexcan_Ip_pData_16(D)->enhCbtEnable;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _3 ={v} pBase_17(D)->CTRL2;
  _4 = _3 | 8192;
  pBase_17(D)->CTRL2 ={v} _4;
  _5 = &Flexcan_Ip_pData_16(D)->bitrate;
  FlexCAN_SetEnhancedNominalTimeSegments (pBase_17(D), _5);
  _6 = Flexcan_Ip_pData_16(D)->fd_enable;
  if (_6 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _7 = &Flexcan_Ip_pData_16(D)->bitrate_cbt;
  FlexCAN_SetEnhancedDataTimeSegments (pBase_17(D), _7);
  goto <bb 8>; [INV]

  <bb 5> :
  _8 ={v} pBase_17(D)->CTRL2;
  _9 = _8 & 4294959103;
  pBase_17(D)->CTRL2 ={v} _9;
  _10 = Flexcan_Ip_pData_16(D)->fd_enable;
  if (_10 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _11 = &Flexcan_Ip_pData_16(D)->bitrate;
  FlexCAN_SetExtendedTimeSegments (pBase_17(D), _11);
  _12 = &Flexcan_Ip_pData_16(D)->bitrate_cbt;
  FlexCAN_SetFDTimeSegments (pBase_17(D), _12);
  goto <bb 8>; [INV]

  <bb 7> :
  _13 = &Flexcan_Ip_pData_16(D)->bitrate;
  FlexCAN_SetTimeSegments (pBase_17(D), _13);

  <bb 8> :
  return;

}


FlexCAN_InitController (uint8 Instance, struct FLEXCAN_Type * pBase, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.10512;
  _Bool _1;
  long unsigned int _2;
  long unsigned int _3;
  _Bool _4;
  _Bool _5;
  long unsigned int _6;
  Flexcan_Ip_StatusType _32;

  <bb 2> :
  eResult_11 = 0;
  _1 = FlexCAN_IsEnabled (pBase_13(D));
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  eResult_16 = FlexCAN_EnterFreezeMode (pBase_13(D));
  if (eResult_16 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  eResult_18 = FlexCAN_Disable (pBase_13(D));

  <bb 5> :
  # eResult_7 = PHI <eResult_11(2), eResult_16(3), eResult_18(4)>
  if (eResult_7 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  _2 ={v} pBase_13(D)->MCR;
  _3 = _2 & 2147483647;
  pBase_13(D)->MCR ={v} _3;
  eResult_21 = FlexCAN_Init (pBase_13(D));
  if (eResult_21 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  FlexCAN_EnterFreezeMode (pBase_13(D));
  FlexCAN_Disable (pBase_13(D));
  goto <bb 9>; [INV]

  <bb 8> :
  FlexCAN_DisableMemErrorDetection (pBase_13(D));
  _4 = Flexcan_Ip_pData_23(D)->fd_enable;
  _5 = Flexcan_Ip_pData_23(D)->bitRateSwitch;
  FlexCAN_SetFDEnabled (pBase_13(D), _4, _5);
  _6 = Flexcan_Ip_pData_23(D)->ctrlOptions;
  FlexCAN_ConfigCtrlOptions (pBase_13(D), _6);
  FlexCAN_ResetImaskBuff (Instance_26(D));
  eResult_29 = FlexCAN_InitCtroll (pBase_13(D), Flexcan_Ip_pData_23(D));

  <bb 9> :
  # eResult_8 = PHI <eResult_7(5), eResult_21(7), eResult_29(8)>
  _32 = eResult_8;

  <bb 10> :
<L9>:
  return _32;

}


FlexCAN_InitCtroll (struct FLEXCAN_Type * pBase, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.10497;
  <unnamed type> _1;
  const struct Flexcan_Ip_PayloadSizeType * _2;
  long unsigned int _3;
  Flexcan_Ip_StatusType _17;

  <bb 2> :
  eResult_6 = 0;
  _1 = Flexcan_Ip_pData_8(D)->flexcanMode;
  if (_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  FlexCAN_SetSelfReception (pBase_9(D), 0);

  <bb 4> :
  eResult_12 = FlexCAN_InitRxFifo (pBase_9(D), Flexcan_Ip_pData_8(D));
  if (eResult_12 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  FlexCAN_EnterFreezeMode (pBase_9(D));
  FlexCAN_Disable (pBase_9(D));
  goto <bb 7>; [INV]

  <bb 6> :
  _2 = &Flexcan_Ip_pData_8(D)->payload;
  FlexCAN_SetPayloadSize (pBase_9(D), _2);
  _3 = Flexcan_Ip_pData_8(D)->max_num_mb;
  FlexCAN_SetMaxMsgBuffNum (pBase_9(D), _3);

  <bb 7> :
  _17 = eResult_12;

  <bb 8> :
<L5>:
  return _17;

}


FlexCAN_InitRxFifo (struct FLEXCAN_Type * pBase, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.10490;
  _Bool _1;
  <unnamed type> _2;
  _Bool _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  Flexcan_Ip_StatusType _19;

  <bb 2> :
  eResult_11 = 0;
  _1 = Flexcan_Ip_pData_13(D)->is_rx_fifo_needed;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = Flexcan_Ip_pData_13(D)->num_id_filters;
  eResult_16 = FlexCAN_EnableRxFifo (pBase_14(D), _2);

  <bb 4> :
  # eResult_7 = PHI <eResult_11(2), eResult_16(3)>
  if (eResult_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _3 = Flexcan_Ip_pData_13(D)->is_enhanced_rx_fifo_needed;
  if (_3 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _4 = Flexcan_Ip_pData_13(D)->num_enhanced_std_id_filters;
  _5 = Flexcan_Ip_pData_13(D)->num_enhanced_ext_id_filters;
  _6 = Flexcan_Ip_pData_13(D)->num_enhanced_watermark;
  eResult_18 = FlexCAN_EnableEnhancedRxFifo (pBase_14(D), _4, _5, _6);

  <bb 7> :
  # eResult_8 = PHI <eResult_7(4), eResult_7(5), eResult_18(6)>
  _19 = eResult_8;

  <bb 8> :
<L6>:
  return _19;

}


FlexCAN_SetRegDefaultVal (struct FLEXCAN_Type * base)
{
  _Bool _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> :
  _1 = FlexCAN_IsEnhancedRxFifoAvailable (base_16(D));
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  base_16(D)->ERFSR ={v} 4160749568;
  base_16(D)->ERFIER ={v} 0;
  base_16(D)->ERFCR ={v} 0;

  <bb 4> :
  base_16(D)->FDCBT ={v} 0;
  base_16(D)->FDCTRL ={v} 2147500288;
  base_16(D)->ERRSR ={v} 851981;
  base_16(D)->ERRIPPR ={v} 0;
  base_16(D)->ERRIDPR ={v} 0;
  base_16(D)->ERRIAR ={v} 0;
  _2 ={v} base_16(D)->CTRL2;
  _3 = _2 | 536870912;
  base_16(D)->CTRL2 ={v} _3;
  _4 ={v} base_16(D)->MECR;
  _5 = _4 & 2147483647;
  base_16(D)->MECR ={v} _5;
  base_16(D)->MECR ={v} 786560;
  _6 ={v} base_16(D)->MECR;
  _7 = _6 | 2147483648;
  base_16(D)->MECR ={v} _7;
  _8 ={v} base_16(D)->CTRL2;
  _9 = _8 & 3758096383;
  base_16(D)->CTRL2 ={v} _9;
  _10 = FlexCAN_GetMaxMbNum (base_16(D));
  if (_10 > 64)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  base_16(D)->IFLAG3 ={v} 4294967295;
  base_16(D)->IMASK3 ={v} 0;

  <bb 6> :
  _11 = FlexCAN_GetMaxMbNum (base_16(D));
  if (_11 > 32)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  base_16(D)->IFLAG2 ={v} 4294967295;
  base_16(D)->IMASK2 ={v} 0;

  <bb 8> :
  base_16(D)->IFLAG1 ={v} 4294967295;
  base_16(D)->IMASK1 ={v} 0;
  base_16(D)->CBT ={v} 0;
  base_16(D)->CTRL2 ={v} 1048576;
  base_16(D)->ESR1 ={v} 241670;
  base_16(D)->ECR ={v} 0;
  base_16(D)->TIMER ={v} 0;
  base_16(D)->CTRL1 ={v} 0;
  base_16(D)->EPRS ={v} 0;
  base_16(D)->ENCBT ={v} 0;
  base_16(D)->EDCBT ={v} 0;
  base_16(D)->ETDC ={v} 0;
  base_16(D)->MCR ={v} 3633315855;
  return;

}


FlexCAN_GetEnhancedRxFIFOIntStatusFlag (const struct FLEXCAN_Type * base, uint32 intFlag)
{
  uint8 D.10864;
  long unsigned int _1;
  unsigned char _2;
  int _3;
  int _4;
  long unsigned int _5;
  long unsigned int _6;
  unsigned char _7;
  int _8;
  int _9;
  long unsigned int _10;
  uint8 _14;

  <bb 2> :
  _1 ={v} base_12(D)->ERFIER;
  _2 = (unsigned char) intFlag_13(D);
  _3 = (int) _2;
  _4 = _3 & 31;
  _5 = 1 << _4;
  _6 = _1 & _5;
  _7 = (unsigned char) intFlag_13(D);
  _8 = (int) _7;
  _9 = _8 & 31;
  _10 = _6 >> _9;
  _14 = (uint8) _10;

  <bb 3> :
<L0>:
  return _14;

}


FlexCAN_ClearEnhancedRxFifoIntStatusFlag (struct FLEXCAN_Type * base, uint32 intFlag)
{
  long unsigned int _1;

  <bb 2> :
  _1 = 1 << intFlag_2(D);
  base_4(D)->ERFSR ={v} _1;
  return;

}


FlexCAN_GetEnhancedRxFIFOStatusFlag (const struct FLEXCAN_Type * base, uint32 intFlag)
{
  uint8 D.10566;
  long unsigned int _1;
  unsigned char _2;
  int _3;
  int _4;
  long unsigned int _5;
  long unsigned int _6;
  unsigned char _7;
  int _8;
  int _9;
  long unsigned int _10;
  uint8 _14;

  <bb 2> :
  _1 ={v} base_12(D)->ERFSR;
  _2 = (unsigned char) intFlag_13(D);
  _3 = (int) _2;
  _4 = _3 & 31;
  _5 = 1 << _4;
  _6 = _1 & _5;
  _7 = (unsigned char) intFlag_13(D);
  _8 = (int) _7;
  _9 = _8 & 31;
  _10 = _6 >> _9;
  _14 = (uint8) _10;

  <bb 3> :
<L0>:
  return _14;

}


FlexCAN_SetEnhancedRxFifoIntAll (struct FLEXCAN_Type * base, boolean enable)
{
  <bb 2> :
  if (enable_2(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  base_4(D)->ERFIER ={v} 4026531840;
  goto <bb 5>; [INV]

  <bb 4> :
  base_4(D)->ERFIER ={v} 0;

  <bb 5> :
  return;

}


FlexCAN_IsEnhancedRxFifoEnabled (const struct FLEXCAN_Type * base)
{
  boolean D.10757;
  long unsigned int _1;
  signed int _2;
  boolean _5;

  <bb 2> :
  _1 ={v} base_4(D)->ERFCR;
  _2 = (signed int) _1;
  _5 = _2 < 0;

  <bb 3> :
<L0>:
  return _5;

}


FlexCAN_SetRxMaskType (struct FLEXCAN_Type * base, Flexcan_Ip_RxMaskType type)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  if (type_6(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} base_8(D)->MCR;
  _2 = _1 & 4294901759;
  base_8(D)->MCR ={v} _2;
  goto <bb 5>; [INV]

  <bb 4> :
  _3 ={v} base_8(D)->MCR;
  _4 = _3 | 65536;
  base_8(D)->MCR ={v} _4;

  <bb 5> :
  return;

}


FlexCAN_SetTxArbitrationStartDelay (struct FLEXCAN_Type * base, uint8 tasd)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  _1 ={v} base_8(D)->CTRL2;
  _2 = _1 & 4278714367;
  _3 = (long unsigned int) tasd_9(D);
  _4 = _3 << 19;
  _5 = _4 & 16252928;
  _6 = _2 | _5;
  base_8(D)->CTRL2 ={v} _6;
  return;

}


FlexCAN_SetRxIndividualMask (struct FLEXCAN_Type * base, uint32 msgBuffIdx, uint32 mask)
{
  <bb 2> :
  base_2(D)->RXIMR[msgBuffIdx_3(D)] ={v} mask_4(D);
  return;

}


FlexCAN_SetRxMsgBuffGlobalMask (struct FLEXCAN_Type * base, uint32 Mask)
{
  <bb 2> :
  base_2(D)->RXMGMASK ={v} Mask_3(D);
  return;

}


FlexCAN_GetMsgBuffIntStatusFlag (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 mask;
  uint8 flag;
  uint8 D.10850;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  unsigned char _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  unsigned char _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  unsigned char _15;
  uint8 _27;

  <bb 2> :
  flag_17 = 0;
  if (msgBuffIdx_18(D) <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  mask_25 ={v} base_20(D)->IMASK1;
  _1 ={v} base_20(D)->IFLAG1;
  _2 = mask_25 & _1;
  _3 = msgBuffIdx_18(D) & 31;
  _4 = _2 >> _3;
  _5 = (unsigned char) _4;
  flag_26 = _5 & 1;
  goto <bb 8>; [INV]

  <bb 4> :
  if (msgBuffIdx_18(D) <= 63)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  mask_23 ={v} base_20(D)->IMASK2;
  _6 ={v} base_20(D)->IFLAG2;
  _7 = mask_23 & _6;
  _8 = msgBuffIdx_18(D) & 31;
  _9 = _7 >> _8;
  _10 = (unsigned char) _9;
  flag_24 = _10 & 1;
  goto <bb 8>; [INV]

  <bb 6> :
  if (msgBuffIdx_18(D) <= 95)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  mask_21 ={v} base_20(D)->IMASK3;
  _11 ={v} base_20(D)->IFLAG3;
  _12 = mask_21 & _11;
  _13 = msgBuffIdx_18(D) & 31;
  _14 = _12 >> _13;
  _15 = (unsigned char) _14;
  flag_22 = _15 & 1;

  <bb 8> :
  # flag_16 = PHI <flag_26(3), flag_24(5), flag_17(6), flag_22(7)>
  _27 = flag_16;

  <bb 9> :
<L9>:
  return _27;

}


RxFifoOcuppiedLastMsgBuff (uint32 x)
{
  uint32 D.10697;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  uint32 _5;

  <bb 2> :
  _1 = x_4(D) + 1;
  _2 = _1 * 8;
  _3 = _2 / 4;
  _5 = _3 + 5;

  <bb 3> :
<L0>:
  return _5;

}


FlexCAN_IsListenOnlyModeEnabled (const struct FLEXCAN_Type * base)
{
  boolean D.10711;
  long unsigned int _1;
  long unsigned int _2;
  boolean _5;

  <bb 2> :
  _1 ={v} base_4(D)->CTRL1;
  _2 = _1 & 8;
  _5 = _2 != 0;

  <bb 3> :
<L0>:
  return _5;

}


FlexCAN_IsFDEnabled (const struct FLEXCAN_Type * base)
{
  boolean D.11111;
  long unsigned int _1;
  long unsigned int _2;
  boolean _5;

  <bb 2> :
  _1 ={v} base_4(D)->MCR;
  _2 = _1 & 2048;
  _5 = _2 != 0;

  <bb 3> :
<L0>:
  return _5;

}


FlexCAN_SetSelfReception (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.0;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.0_4;
  long unsigned int iftmp.0_8;
  long unsigned int iftmp.0_9;

  <bb 2> :
  _1 ={v} base_6(D)->MCR;
  _2 = _1 & 4294836223;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.0_9 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.0_8 = 131072;

  <bb 5> :
  # iftmp.0_4 = PHI <iftmp.0_9(3), iftmp.0_8(4)>
  _3 = iftmp.0_4 | _2;
  base_6(D)->MCR ={v} _3;
  return;

}


FlexCAN_EnableExtCbt (struct FLEXCAN_Type * base, boolean enableCBT)
{
  long unsigned int iftmp.3;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.3_4;
  long unsigned int iftmp.3_8;
  long unsigned int iftmp.3_9;

  <bb 2> :
  _1 ={v} base_6(D)->CBT;
  _2 = _1 & 2147483647;
  if (enableCBT_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.3_9 = 2147483648;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.3_8 = 0;

  <bb 5> :
  # iftmp.3_4 = PHI <iftmp.3_9(3), iftmp.3_8(4)>
  _3 = iftmp.3_4 | _2;
  base_6(D)->CBT ={v} _3;
  return;

}


FlexCAN_EnhCbtEnable (struct FLEXCAN_Type * base, boolean enableCBT)
{
  long unsigned int iftmp.5;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.5_4;
  long unsigned int iftmp.5_8;
  long unsigned int iftmp.5_9;

  <bb 2> :
  _1 ={v} base_6(D)->CTRL2;
  _2 = _1 & 4294959103;
  if (enableCBT_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.5_9 = 8192;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.5_8 = 0;

  <bb 5> :
  # iftmp.5_4 = PHI <iftmp.5_9(3), iftmp.5_8(4)>
  _3 = iftmp.5_4 | _2;
  base_6(D)->CTRL2 ={v} _3;
  return;

}


FlexCAN_IsEnhCbtEnabled (const struct FLEXCAN_Type * pBase)
{
  boolean D.11083;
  long unsigned int _1;
  long unsigned int _2;
  boolean _5;

  <bb 2> :
  _1 ={v} pBase_4(D)->CTRL2;
  _2 = _1 & 8192;
  _5 = _2 != 0;

  <bb 3> :
<L0>:
  return _5;

}


FlexCAN_IsExCbtEnabled (const struct FLEXCAN_Type * pBase)
{
  boolean D.11073;
  long unsigned int _1;
  signed int _2;
  boolean _5;

  <bb 2> :
  _1 ={v} pBase_4(D)->CBT;
  _2 = (signed int) _1;
  _5 = _2 < 0;

  <bb 3> :
<L0>:
  return _5;

}


FlexCAN_GetFDTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;

  <bb 2> :
  _1 ={v} base_16(D)->FDCBT;
  _2 = _1 >> 20;
  _3 = _2 & 1023;
  timeSeg_17(D)->preDivider = _3;
  _4 ={v} base_16(D)->FDCBT;
  _5 = _4 >> 10;
  _6 = _5 & 31;
  timeSeg_17(D)->propSeg = _6;
  _7 ={v} base_16(D)->FDCBT;
  _8 = _7 >> 5;
  _9 = _8 & 7;
  timeSeg_17(D)->phaseSeg1 = _9;
  _10 ={v} base_16(D)->FDCBT;
  _11 = _10 & 7;
  timeSeg_17(D)->phaseSeg2 = _11;
  _12 ={v} base_16(D)->FDCBT;
  _13 = _12 >> 16;
  _14 = _13 & 7;
  timeSeg_17(D)->rJumpwidth = _14;
  return;

}


FlexCAN_GetTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;

  <bb 2> :
  _1 ={v} base_16(D)->CTRL1;
  _2 = _1 >> 24;
  _3 = _2 & 255;
  timeSeg_17(D)->preDivider = _3;
  _4 ={v} base_16(D)->CTRL1;
  _5 = _4 & 7;
  timeSeg_17(D)->propSeg = _5;
  _6 ={v} base_16(D)->CTRL1;
  _7 = _6 >> 19;
  _8 = _7 & 7;
  timeSeg_17(D)->phaseSeg1 = _8;
  _9 ={v} base_16(D)->CTRL1;
  _10 = _9 >> 16;
  _11 = _10 & 7;
  timeSeg_17(D)->phaseSeg2 = _11;
  _12 ={v} base_16(D)->CTRL1;
  _13 = _12 >> 22;
  _14 = _13 & 3;
  timeSeg_17(D)->rJumpwidth = _14;
  return;

}


FlexCAN_GetExtendedTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;

  <bb 2> :
  _1 ={v} base_16(D)->CBT;
  _2 = _1 >> 21;
  _3 = _2 & 1023;
  timeSeg_17(D)->preDivider = _3;
  _4 ={v} base_16(D)->CBT;
  _5 = _4 >> 10;
  _6 = _5 & 63;
  timeSeg_17(D)->propSeg = _6;
  _7 ={v} base_16(D)->CBT;
  _8 = _7 >> 5;
  _9 = _8 & 31;
  timeSeg_17(D)->phaseSeg1 = _9;
  _10 ={v} base_16(D)->CBT;
  _11 = _10 & 31;
  timeSeg_17(D)->phaseSeg2 = _11;
  _12 ={v} base_16(D)->CBT;
  _13 = _12 >> 16;
  _14 = _13 & 31;
  timeSeg_17(D)->rJumpwidth = _14;
  return;

}


FlexCAN_GetEnhancedDataTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> :
  timeSeg_13(D)->propSeg = 0;
  _1 ={v} base_15(D)->EDCBT;
  _2 = _1 & 31;
  timeSeg_13(D)->phaseSeg1 = _2;
  _3 ={v} base_15(D)->EDCBT;
  _4 = _3 >> 12;
  _5 = _4 & 15;
  timeSeg_13(D)->phaseSeg2 = _5;
  _6 ={v} base_15(D)->EDCBT;
  _7 = _6 >> 22;
  _8 = _7 & 15;
  timeSeg_13(D)->rJumpwidth = _8;
  _9 ={v} base_15(D)->EPRS;
  _10 = _9 >> 16;
  _11 = _10 & 1023;
  timeSeg_13(D)->preDivider = _11;
  return;

}


FlexCAN_SetEnhancedDataTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;

  <bb 2> :
  _1 ={v} base_25(D)->EDCBT;
  _2 = _1 & 4231991264;
  base_25(D)->EDCBT ={v} _2;
  _3 ={v} base_25(D)->EDCBT;
  _4 = timeSeg_27(D)->phaseSeg1;
  _5 = timeSeg_27(D)->propSeg;
  _6 = _4 + _5;
  _7 = _6 & 31;
  _8 = timeSeg_27(D)->phaseSeg2;
  _9 = _8 << 12;
  _10 = _9 & 65535;
  _11 = _7 | _10;
  _12 = timeSeg_27(D)->rJumpwidth;
  _13 = _12 << 22;
  _14 = _13 & 62914560;
  _15 = _11 | _14;
  _16 = _3 | _15;
  base_25(D)->EDCBT ={v} _16;
  _17 ={v} base_25(D)->EPRS;
  _18 = _17 & 4227923967;
  base_25(D)->EPRS ={v} _18;
  _19 ={v} base_25(D)->EPRS;
  _20 = timeSeg_27(D)->preDivider;
  _21 = _20 << 16;
  _22 = _21 & 67043328;
  _23 = _19 | _22;
  base_25(D)->EPRS ={v} _23;
  return;

}


FlexCAN_GetEnhancedNominalTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;

  <bb 2> :
  timeSeg_12(D)->propSeg = 0;
  _1 ={v} base_14(D)->EPRS;
  _2 = _1 & 1023;
  timeSeg_12(D)->preDivider = _2;
  _3 ={v} base_14(D)->ENCBT;
  _4 = _3 & 255;
  timeSeg_12(D)->phaseSeg1 = _4;
  _5 ={v} base_14(D)->ENCBT;
  _6 = _5 >> 12;
  _7 = _6 & 127;
  timeSeg_12(D)->phaseSeg2 = _7;
  _8 ={v} base_14(D)->ENCBT;
  _9 = _8 >> 22;
  _10 = _9 & 127;
  timeSeg_12(D)->rJumpwidth = _10;
  return;

}


FlexCAN_SetEnhancedNominalTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;

  <bb 2> :
  _1 ={v} base_25(D)->ENCBT;
  _2 = _1 & 3761770240;
  base_25(D)->ENCBT ={v} _2;
  _3 ={v} base_25(D)->ENCBT;
  _4 = timeSeg_27(D)->phaseSeg1;
  _5 = timeSeg_27(D)->propSeg;
  _6 = _4 + _5;
  _7 = _6 + 1;
  _8 = _7 & 255;
  _9 = timeSeg_27(D)->phaseSeg2;
  _10 = _9 << 12;
  _11 = _10 & 520192;
  _12 = _8 | _11;
  _13 = timeSeg_27(D)->rJumpwidth;
  _14 = _13 << 22;
  _15 = _14 & 532676608;
  _16 = _12 | _15;
  _17 = _3 | _16;
  base_25(D)->ENCBT ={v} _17;
  _18 ={v} base_25(D)->EPRS;
  _19 = _18 & 4294966272;
  base_25(D)->EPRS ={v} _19;
  _20 ={v} base_25(D)->EPRS;
  _21 = timeSeg_27(D)->preDivider;
  _22 = _21 & 1023;
  _23 = _20 | _22;
  base_25(D)->EPRS ={v} _23;
  return;

}


FlexCAN_SetExtendedTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;

  <bb 2> :
  _1 ={v} base_24(D)->CBT;
  _2 = _1 & 2147483648;
  base_24(D)->CBT ={v} _2;
  _3 ={v} base_24(D)->CBT;
  _4 = timeSeg_26(D)->propSeg;
  _5 = _4 << 10;
  _6 = _5 & 65535;
  _7 = timeSeg_26(D)->phaseSeg2;
  _8 = _7 & 31;
  _9 = _6 | _8;
  _10 = timeSeg_26(D)->phaseSeg1;
  _11 = _10 << 5;
  _12 = _11 & 992;
  _13 = _9 | _12;
  _14 = timeSeg_26(D)->preDivider;
  _15 = _14 << 21;
  _16 = _15 & 2145386496;
  _17 = _13 | _16;
  _18 = timeSeg_26(D)->rJumpwidth;
  _19 = _18 << 16;
  _20 = _19 & 2031616;
  _21 = _17 | _20;
  _22 = _3 | _21;
  base_24(D)->CBT ={v} _22;
  return;

}


FlexCAN_SetTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;

  <bb 2> :
  _1 ={v} base_23(D)->CTRL1;
  _2 = _1 & 65528;
  base_23(D)->CTRL1 ={v} _2;
  _3 ={v} base_23(D)->CTRL1;
  _4 = timeSeg_25(D)->propSeg;
  _5 = _4 & 7;
  _6 = timeSeg_25(D)->phaseSeg2;
  _7 = _6 << 16;
  _8 = _7 & 458752;
  _9 = _5 | _8;
  _10 = timeSeg_25(D)->phaseSeg1;
  _11 = _10 << 19;
  _12 = _11 & 3670016;
  _13 = _9 | _12;
  _14 = timeSeg_25(D)->preDivider;
  _15 = _14 << 24;
  _16 = _13 | _15;
  _17 = timeSeg_25(D)->rJumpwidth;
  _18 = _17 << 22;
  _19 = _18 & 12582912;
  _20 = _16 | _19;
  _21 = _3 | _20;
  base_23(D)->CTRL1 ={v} _21;
  return;

}


FlexCAN_SetFDTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;

  <bb 2> :
  _1 ={v} base_24(D)->FDCBT;
  _2 = _1 & 3221783320;
  base_24(D)->FDCBT ={v} _2;
  _3 ={v} base_24(D)->FDCBT;
  _4 = timeSeg_26(D)->propSeg;
  _5 = _4 << 10;
  _6 = _5 & 31744;
  _7 = timeSeg_26(D)->phaseSeg2;
  _8 = _7 & 7;
  _9 = _6 | _8;
  _10 = timeSeg_26(D)->phaseSeg1;
  _11 = _10 << 5;
  _12 = _11 & 255;
  _13 = _9 | _12;
  _14 = timeSeg_26(D)->preDivider;
  _15 = _14 << 20;
  _16 = _15 & 1072693248;
  _17 = _13 | _16;
  _18 = timeSeg_26(D)->rJumpwidth;
  _19 = _18 << 16;
  _20 = _19 & 458752;
  _21 = _17 | _20;
  _22 = _3 | _21;
  base_24(D)->FDCBT ={v} _22;
  return;

}


FlexCAN_GetBuffStatusImask (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 u32Imask;
  uint8 D.10887;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  uint8 _24;

  <bb 2> :
  u32Imask_17 = 0;
  if (msgBuffIdx_18(D) <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} base_20(D)->IMASK1;
  _2 = msgBuffIdx_18(D) & 31;
  _3 = 1 << _2;
  _4 = _1 & _3;
  _5 = msgBuffIdx_18(D) & 31;
  u32Imask_23 = _4 >> _5;
  goto <bb 8>; [INV]

  <bb 4> :
  if (msgBuffIdx_18(D) <= 63)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _6 ={v} base_20(D)->IMASK2;
  _7 = msgBuffIdx_18(D) & 31;
  _8 = 1 << _7;
  _9 = _6 & _8;
  _10 = msgBuffIdx_18(D) & 31;
  u32Imask_22 = _9 >> _10;
  goto <bb 8>; [INV]

  <bb 6> :
  if (msgBuffIdx_18(D) <= 95)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _11 ={v} base_20(D)->IMASK3;
  _12 = msgBuffIdx_18(D) & 31;
  _13 = 1 << _12;
  _14 = _11 & _13;
  _15 = msgBuffIdx_18(D) & 31;
  u32Imask_21 = _14 >> _15;

  <bb 8> :
  # u32Imask_16 = PHI <u32Imask_23(3), u32Imask_22(5), u32Imask_17(6), u32Imask_21(7)>
  _24 = (uint8) u32Imask_16;

  <bb 9> :
<L9>:
  return _24;

}


FlexCAN_GetBuffStatusFlag (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 flag;
  uint8 D.10591;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  uint8 _24;

  <bb 2> :
  flag_17 = 0;
  if (msgBuffIdx_18(D) <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} base_20(D)->IFLAG1;
  _2 = msgBuffIdx_18(D) & 31;
  _3 = 1 << _2;
  _4 = _1 & _3;
  _5 = msgBuffIdx_18(D) & 31;
  flag_23 = _4 >> _5;
  goto <bb 8>; [INV]

  <bb 4> :
  if (msgBuffIdx_18(D) <= 63)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _6 ={v} base_20(D)->IFLAG2;
  _7 = msgBuffIdx_18(D) & 31;
  _8 = 1 << _7;
  _9 = _6 & _8;
  _10 = msgBuffIdx_18(D) & 31;
  flag_22 = _9 >> _10;
  goto <bb 8>; [INV]

  <bb 6> :
  if (msgBuffIdx_18(D) <= 95)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _11 ={v} base_20(D)->IFLAG3;
  _12 = msgBuffIdx_18(D) & 31;
  _13 = 1 << _12;
  _14 = _11 & _13;
  _15 = msgBuffIdx_18(D) & 31;
  flag_21 = _14 >> _15;

  <bb 8> :
  # flag_16 = PHI <flag_23(3), flag_22(5), flag_17(6), flag_21(7)>
  _24 = (uint8) flag_16;

  <bb 9> :
<L9>:
  return _24;

}


FlexCAN_ClearMsgBuffIntStatusFlag (struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 flag;
  long unsigned int _1;

  <bb 2> :
  _1 = msgBuffIdx_3(D) & 31;
  flag_4 = 1 << _1;
  if (msgBuffIdx_3(D) <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  base_6(D)->IFLAG1 ={v} flag_4;
  goto <bb 8>; [INV]

  <bb 4> :
  if (msgBuffIdx_3(D) <= 63)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  base_6(D)->IFLAG2 ={v} flag_4;
  goto <bb 8>; [INV]

  <bb 6> :
  if (msgBuffIdx_3(D) <= 95)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  base_6(D)->IFLAG3 ={v} flag_4;

  <bb 8> :
  return;

}


FlexCAN_UnlockRxMsgBuff (const struct FLEXCAN_Type * base)
{
  long unsigned int vol.4;
  long unsigned int vol.4_3;

  <bb 2> :
  vol.4_3 ={v} base_2(D)->TIMER;
  return;

}


FlexCAN_SetListenOnlyMode (struct FLEXCAN_Type * base, boolean enableListenOnly)
{
  long unsigned int iftmp.6;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.6_4;
  long unsigned int iftmp.6_8;
  long unsigned int iftmp.6_9;

  <bb 2> :
  _1 ={v} base_6(D)->CTRL1;
  _2 = _1 & 4294967287;
  if (enableListenOnly_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.6_9 = 8;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.6_8 = 0;

  <bb 5> :
  # iftmp.6_4 = PHI <iftmp.6_9(3), iftmp.6_8(4)>
  _3 = iftmp.6_4 | _2;
  base_6(D)->CTRL1 ={v} _3;
  return;

}


FlexCAN_SetFDEnabled (struct FLEXCAN_Type * base, boolean enableFD, boolean enableBRS)
{
  long unsigned int iftmp.2;
  long unsigned int iftmp.1;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int iftmp.1_9;
  long unsigned int iftmp.2_10;
  long unsigned int iftmp.1_14;
  long unsigned int iftmp.1_15;
  long unsigned int iftmp.2_18;
  long unsigned int iftmp.2_19;

  <bb 2> :
  _1 ={v} base_12(D)->MCR;
  _2 = _1 & 4294965247;
  if (enableFD_13(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.1_15 = 2048;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.1_14 = 0;

  <bb 5> :
  # iftmp.1_9 = PHI <iftmp.1_15(3), iftmp.1_14(4)>
  _3 = iftmp.1_9 | _2;
  base_12(D)->MCR ={v} _3;
  _4 ={v} base_12(D)->FDCTRL;
  _5 = _4 & 2147483647;
  if (enableBRS_17(D) != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.2_19 = 2147483648;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.2_18 = 0;

  <bb 8> :
  # iftmp.2_10 = PHI <iftmp.2_19(6), iftmp.2_18(7)>
  _6 = iftmp.2_10 | _5;
  base_12(D)->FDCTRL ={v} _6;
  _7 ={v} base_12(D)->FDCTRL;
  _8 = _7 & 4294926591;
  base_12(D)->FDCTRL ={v} _8;
  return;

}


FlexCAN_DisableMemErrorDetection (struct FLEXCAN_Type * base)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  _1 ={v} base_8(D)->CTRL2;
  _2 = _1 | 536870912;
  base_8(D)->CTRL2 ={v} _2;
  base_8(D)->MECR ={v} 0;
  base_8(D)->MECR ={v} 0;
  _3 ={v} base_8(D)->MECR;
  _4 = _3 | 256;
  base_8(D)->MECR ={v} _4;
  _5 ={v} base_8(D)->CTRL2;
  _6 = _5 & 3758096383;
  base_8(D)->CTRL2 ={v} _6;
  return;

}


FlexCAN_IsEnabled (const struct FLEXCAN_Type * pBase)
{
  boolean D.10514;
  long unsigned int _1;
  signed int _2;
  boolean _5;

  <bb 2> :
  _1 ={v} pBase_4(D)->MCR;
  _2 = (signed int) _1;
  _5 = _2 >= 0;

  <bb 3> :
<L0>:
  return _5;

}


FlexCAN_SetEnhancedTDCOffset (struct FLEXCAN_Type * base, boolean enable, uint8 offset)
{
  uint32 tmp;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  tmp_7 ={v} base_6(D)->ETDC;
  tmp_8 = tmp_7 & 2139160575;
  if (enable_9(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  tmp_10 = tmp_8 | 2147483648;
  _1 = (long unsigned int) offset_11(D);
  _2 = _1 << 16;
  _3 = _2 & 8323072;
  tmp_12 = tmp_10 | _3;

  <bb 4> :
  # tmp_4 = PHI <tmp_8(2), tmp_12(3)>
  base_6(D)->ETDC ={v} tmp_4;
  return;

}


FlexCAN_SetTDCOffset (struct FLEXCAN_Type * base, boolean enable, uint8 offset)
{
  uint32 tmp;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  tmp_7 ={v} base_6(D)->FDCTRL;
  tmp_8 = tmp_7 & 4294926591;
  if (enable_9(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  tmp_10 = tmp_8 | 32768;
  _1 = (long unsigned int) offset_11(D);
  _2 = _1 << 8;
  _3 = _2 & 7936;
  tmp_12 = tmp_10 | _3;

  <bb 4> :
  # tmp_4 = PHI <tmp_8(2), tmp_12(3)>
  base_6(D)->FDCTRL ={v} tmp_4;
  return;

}


FlexCAN_SetRxFifoGlobalMask (struct FLEXCAN_Type * base, uint32 Mask)
{
  <bb 2> :
  base_2(D)->RXFGMASK ={v} Mask_3(D);
  return;

}


